<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Openwrt旁路由Adguard设置参考</title>
    <url>/posts/40723.html</url>
    <content><![CDATA[<p>登录Adguard home界面，需要修改的有两个地方，一个是DNS上游服务器，一个是Bootstrap DNS 服务器。</p>
<p>下面是我填的DNS上游服务器地址，仅供参考。</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">223.5.5.5</span><br><span class="line">114.114.114.114</span><br><span class="line">8.8.8.8</span><br><span class="line">8.8.4.4</span><br><span class="line">101.226.4.6</span><br><span class="line">120.196.165.24</span><br><span class="line">tls://dot.360.cn</span><br><span class="line">https://dns10.quad9.net/dns-query</span><br><span class="line">https://dns.google/dns-query</span><br><span class="line">https://doh.360.cn/dns-query</span><br><span class="line">https://doh-jp.blahdns.com/dns-query</span><br><span class="line">https://dns.alidns.com/dns-query</span><br><span class="line">tls://dns.alidns.com</span><br><span class="line">tls://dns.google</span><br><span class="line">tls://1dot1dot1dot1.cloudflare-dns.com</span><br></pre></td></tr></table></figure>
<p>然后在并行请求之前打勾。<br>
Bootstrap DNS 服务器需要填入你本地运营商提供的DNS地址，下面是我填入的地址，也是仅供参考。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">202.99.216.113</span><br><span class="line">202.97.131.178</span><br><span class="line">114.114.114.114</span><br><span class="line">8.8.8.8</span><br><span class="line">8.8.4.4</span><br></pre></td></tr></table></figure>
<p>另外黑名单DNS列表里面推荐几个订阅。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/xinggsf/Adblock-Plus-Rule/blob/master/rule.txt</span><br><span class="line">https://github.com/xinggsf/Adblock-Plus-Rule/blob/master/mv.txt</span><br><span class="line">https://adguardteam.github.io/HostlistsRegistry/assets/filter_29.txt</span><br><span class="line">https://adguardteam.github.io/HostlistsRegistry/assets/filter_21.txt</span><br><span class="line">https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/master/anti-ad-easylist.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下图是我使用了差不多半天时间的统计信息。<br>
<img src="https://img.ycyc.win/img/20230314105521.png" alt="20230314105521"></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>adguard</tag>
        <tag>openwrt</tag>
        <tag>广告</tag>
      </tags>
  </entry>
  <entry>
    <title>openvpn指定网段是否走vpn隧道</title>
    <url>/posts/28254.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/202502141633298.png" alt="image.png"></p>
<p>一旦拨了openvpn之后，默认本地所有的流量都会走vpn隧道。如果你有特定的需求，只希望某个网段走vpn，其他网段还是走本地流量，或者是希望除了某个网段外，其他流量都走vpn，可以在openvpn的配置文件中增加以下配置：</p>
<h2 id="除了指定网段外其他网段走本地流量"><a class="header-anchor" href="#除了指定网段外其他网段走本地流量">¶</a>除了指定网段外其他网段走本地流量</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">route-nopull</span><br><span class="line">route 192.168.1.0 255.255.255.0 vpn_gateway</span><br></pre></td></tr></table></figure>
<h2 id="除了指定网段外其他网段走VPN"><a class="header-anchor" href="#除了指定网段外其他网段走VPN">¶</a>除了指定网段外其他网段走VPN</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">route 192.168.1.0 255.255.255.0 net_gateway</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>OPENVPN</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt旁路由连主路由WIFI无法上网问题处理</title>
    <url>/posts/39032.html</url>
    <content><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2>
<p>前两天在家里上网发现一个问题，手机设置了静态IP地址，网关和DNS都设置成旁路由的地址之后，连接AP发出的SSID可以正常出国和回国，但是连接到主路由发出的SSID之后出国不受影响，浏览国内的站点会出现无法访问的情况。因为我之前一直默认连接的是AP的信号，所以一直没发现问题，直到前天AP断电之后，手机连接到主路由发出的SSID才发现问题，而且不只是手机，笔记本也一样，只要是连接了无线之后都会有问题，但是使用有线连接的设备手动指定网关和DNS之后上网却一切正常。</p>
<span id="more"></span>
<p><img src="https://img.ycyc.win/img/%E5%AF%BC%E5%9B%BE1.jpeg" alt="导图1"></p>
<h2 id="解决"><a class="header-anchor" href="#解决">¶</a>解决</h2>
<p>我在恩山和chh发帖求助之后，有很多大神支招，有可能是主路由设置的问题，也有可能是旁路由设置的问题，而恩山上有个网友遇到的问题也和我的类似，巧的是他使用的主路由也是华为的。而华为路由器的管理后台没有太多设置的地方，连LAN的DNS和网关也无法指定。所以要解决问题的话是无法从主路由上下手了，只能在旁路由上做文章。<br>
感谢chh@iamyangyi 大神的提醒，我之前在N1防火墙规则中只添加了iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE语句，没有注意到网络接口，把eth0改成br-lan然后再重启防火墙就可以了。<br>
<img src="https://img.ycyc.win/img/2023032201.png" alt="2023032201"><br>
遇到类似问题的朋友可以参考。<br>
另外chh大神@hadis99 也提供了一种设置方法，不用添加防火墙规则，开启IP动态伪装也能解决遇到的问题。设置方法如下图<br>
<img src="https://img.ycyc.win/img/2023032202.png" alt="2023032202"></p>
<h2 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h2>
<p>CSDN相关的文章<a href="https://blog.csdn.net/qq1337715208/article/details/122271608">https://blog.csdn.net/qq1337715208/article/details/122271608</a><br>
恩山网友和我类似问题的帖子<a href="https://www.right.com.cn/FORUM/thread-5957512-1-1.html">https://www.right.com.cn/FORUM/thread-5957512-1-1.html</a><br>
我在恩山的帖子<a href="https://www.right.com.cn/forum/thread-8281362-1-1.html">https://www.right.com.cn/forum/thread-8281362-1-1.html</a><br>
我在chh的帖子<a href="https://www.chiphell.com/thread-2502752-1-1.html">https://www.chiphell.com/thread-2502752-1-1.html</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>旁路由</tag>
      </tags>
  </entry>
  <entry>
    <title>京东AX1800 pro拆机刷uboot及华硕固件</title>
    <url>/posts/12783.html</url>
    <content><![CDATA[<p>最近入手了一台京东AX1800pro 亚瑟路由器，64GB版本的，算上各种优惠后不到80块钱拿下。<br>
到手后看到版本是R2242，按理说应该是是符合网上大神教程里面的免拆刷机版本的，但是按照教程一步一步折腾了好几次之后都没成功，后来回想可能是第一次开机之后在wan口插了网线，连接了互联网，导致被打了补丁所致。于是乎只剩下拆机通过TTL来刷机了。<br>
过程倒是挺顺利的。<br>
<img src="https://img.ycyc.win/img/20240904101100.png" alt="20240904101100"><br>
首先是将顶部的盖板撬开，拆除里面的两颗螺丝，接着底部的橡胶垫边缘撬起，在六边形的六个角有六颗螺丝，拆掉后就可以将底板拆掉。拆掉之后还有五颗螺丝固定主板的固定支架，拆掉后就可以将主板抽出了。<br>
接着在主板TTL接口处焊接三个接线柱，分别是G、T、R三个口，对应CH340G模块的G、R、T，用杜邦线连接好，电脑上装好驱动，用网线连接路由器LAN口和电脑，就可以开始操作了。</p>
<span id="more"></span>
<p>将uboot.mbn放到tftpd的根目录。刷机过程中保持tftpd软件为开启状态。<br>
用putty连接对应的COM口，波特率为115200。<br>
通电开启，putty界面按回车键出现IPQ6018命令行，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tftpboot u-boot.mbn</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>等待命令执行完再输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tftpboot u-boot.mbn &amp;&amp; flash 0:APPSBL &amp;&amp; flash 0:APPSBL_1</span><br></pre></td></tr></table></figure>
<p>执行完毕后断开TTL连接然后，重启路由器即可。电脑配置192.168.1网段的IP，浏览器进入192.168.1.1即可上传固件刷机。注意先上传华硕底包，然后进入路由器后台选择固件升级，再上传正式固件即可。<br>
uboot及固件下载链接：<br>
链接：<a href="https://pan.baidu.com/s/1Nt1q3qWMUTlxAurM6av95A?pwd=76ao">https://pan.baidu.com/s/1Nt1q3qWMUTlxAurM6av95A?pwd=76ao</a><br>
提取码：76ao</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>京东</tag>
        <tag>AX1800PRO</tag>
        <tag>路由器</tag>
        <tag>刷机</tag>
        <tag>华硕</tag>
        <tag>固件</tag>
      </tags>
  </entry>
  <entry>
    <title>嘿嘿，ycyc.win</title>
    <url>/posts/13691.html</url>
    <content><![CDATA[<p>昨天不是在处理阿里云域名往porkbun转移的事嘛，然后一直联系阿里售后工单也没有进展。今天闲来无事看了看porkbun上的域名价格，看看有啥优惠合适的域名再注册一个。搜了一会发现ycyc.win还没有注册，ycyc寓意渊澄YC，是我儿女的名字，子渊和子澄。而且现在.win域名注册也有优惠，第一年3.56美刀，续费4.98美刀，折合每年35块钱左右，于是一口气注册了10年。最终一共花了35.6美刀，支付宝直接付款，折合人民币254.68元。每年也就20几块钱。😜<br>
<img src="https://img.ycyc.win/img/202409141409625.png" alt="image.png"></p>
<p>现在已经将域名的NS服务器更改到了cloudflare，也解析到了目前这个站点，现在就可以通过<a href="https://ycyc.win">https://ycyc.win</a> 来访问渊澄YC站点了。随后我会将之前miaoyang.win的主要业务陆续切到ycyc.win这个域名来。<br>
现在发现拼音状态下输入ycyc出来的词语是阴差阳错😳</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>网站</tag>
        <tag>ycyc</tag>
      </tags>
  </entry>
  <entry>
    <title>域名从阿里云转移到porkbun记录</title>
    <url>/posts/21876.html</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>我现在用的这个域名miaoyang.win是2016年的时候在阿里云注册的，当时.win域名有优惠活动，好像是5元还是10元每年，最多可以一次性注册10年。所以我注册了10年两个.win的域名。<br>
好巧不巧，注册了没几年，具体什么时候我忘记了，<a href="http://xn--ykqva161b154anm2aupl1rh.org">阿里云被取消了.org</a>、.win、.name等域名的注册管理机构许可，域名被强制转移到了阿里巴巴国际站。 当时想着距离到期时间还长，而且我的域名NS服务器也转移到了cloudflare，所以就没怎么关心续费和转移的事情。<br>
现在眼看着马上还有两年就到期了，所以试着去阿里云国际站看看续费的事情，不看不知道，一看吓一跳，不仅续费费用比其他域名注册商要高，一年要6.19美刀，而且在支付的时候还需要添加一张外币信用卡才能付款，中国大陆还不支持paypal。最让人受不了的是居然连自家的支付宝也不支持。。。想想现在许多国外域名主机商都开始支持支付宝直接付款了，阿里云国际站居然不支持自己的支付宝付款。。😠</p>
<span id="more"></span>
<p><img src="https://img.ycyc.win/img/202409131652855.png" alt="image.png"></p>
<p>好吧，只能使大招了，乾坤大挪移，把域名转移到其他注册商去。</p>
<p>对比了一下.win域名转移到godaddy需要285块大洋。而转移到porkbun只需要4.29美刀/年，并且也支持支付宝直接付款。<br>
<img src="https://img.ycyc.win/img/202409131753618.png" alt="image.png"></p>
<h2 id="域名转移流程"><a class="header-anchor" href="#域名转移流程">¶</a>域名转移流程</h2>
<p>转移第一步是前往原注册商那里获取转移授权码。大部分域名注册商限制新域名必须注册满60天以后才能进行转出操作，当然我这个域名已经注册8年了，不存在这个限制。另外注册商都不想要域名被转出去，所以转移码获取入口相对来说比较隐蔽，有的需要联系客服才能获取。好在阿里云这个转出功能标示还是比较明显的。</p>
<p><img src="https://img.ycyc.win/img/202409131704864.png" alt="image.png"></p>
<p>在获取到这个授权码之后就可以到你要转入的注册商那里填入域名和授权码进行付费了，一般域名在注册商之间转移操作，新的域名注册商会收取一年的续费费用。</p>
<p><img src="https://img.ycyc.win/img/202409131706628.png" alt="image.png"></p>
<p>但是我就是卡在第一步了，按照提示输入邮箱验证码之后直接报错返回到第一步了，并且报错信息一闪而过，看不清楚，目前正在提交工单等待售后处理。。。</p>
<h3 id="2024-9-15更新"><a class="header-anchor" href="#2024-9-15更新">¶</a>2024/9/15更新</h3>
<p>经过三天的等待终于获取到了转移授权码。在porkbun的域名转移页面填入域名和对应的转移授权码之后，完成付款即可等待转移生效。<br>
我的这个域名转移收费4.29美元，折合人民币30.69元。支持支付宝付款。<br>
<img src="https://cdn.ycyc.win/gh/miaoyanginfo/hexo-img/img/202409151450233.png" alt="image.png"></p>
<p>再次前往阿里云查看域名转出进度。点击立即转出，验证邮箱链接之后，可加快转出速度。一般转移需要等待的时间比新注册要长一点，最慢需要5-7天才能完成转移。<br>
<img src="https://cdn.ycyc.win/gh/miaoyanginfo/hexo-img/img/202409151458719.png" alt="image.png"></p>
<p>我这边等了5分钟左右，porkbun处显示域名状态已经正常了。如果超时没有完成，需要联系转入的域名注册商进行处理。<br>
等待转移成功之后就可以在新的域名注册商处进行域名管理和续费了。<br>
<img src="https://cdn.ycyc.win/gh/miaoyanginfo/hexo-img/img/202409151503200.png" alt="image.png"></p>
<h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2>
<p>域名转移其实很简单，在原注册商那里获取到转移码就成功了一大半了。关键在于如何选择新转入的域名注册商，除了续费价格因素外，还要尽量找一些业界口碑好的注册商。当然目前国内审查机制越来越严格，政策三天两头做调整，而且还强制实名和备案。所以建议有条件的朋友都尽量把域名转移到国外域名注册商去。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>阿里云</tag>
        <tag>转移</tag>
        <tag>porkbun</tag>
      </tags>
  </entry>
  <entry>
    <title>自己网络及设备服务分享</title>
    <url>/posts/2895.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/962005074.png" alt="微信截图_20220329163639.png"></p>
<h2 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h2>
<h4 id="上图是我家目前的网络拓扑示意图，及部分设备正在运行的服务，下面我将尽量对每个设备及所提供的服务来做详细的介绍，某些服务由于涉及到的知识点较多，以后可以能单独写文章来介绍。"><a class="header-anchor" href="#上图是我家目前的网络拓扑示意图，及部分设备正在运行的服务，下面我将尽量对每个设备及所提供的服务来做详细的介绍，某些服务由于涉及到的知识点较多，以后可以能单独写文章来介绍。">¶</a>上图是我家目前的网络拓扑示意图，及部分设备正在运行的服务，下面我将尽量对每个设备及所提供的服务来做详细的介绍，某些服务由于涉及到的知识点较多，以后可以能单独写文章来介绍。</h4>
<h2 id="联通光猫"><a class="header-anchor" href="#联通光猫">¶</a>联通光猫</h2>
<p>负责运营商光纤到户后的光电转换，并给固定电话和IPTV提供接入服务。<br>
网络方面，光猫使用桥接模式，不负责拨号，不负责提供WIFI服务，WIFI服务由华为AX3路由器及水星D191G路由器负责。</p>
<h2 id="华为AX3路由器"><a class="header-anchor" href="#华为AX3路由器">¶</a>华为AX3路由器</h2>
<p>负责宽带拨号，负责提供DHCP服务，负责提供WIFI覆盖服务，负责局域网内设备的端口转发服务及DMZ服务，为了方便远程管理内网设备，还在路由器上部署了花生壳的DDNS服务。WAN口与上级的联通光猫连接，LAN与需要提供网络服务的下级设备连接。<br>
##水星D191G路由器<br>
提供WIFI覆盖服务及普通交换机服务。LAN口与上级主路由的LAN口连接，LAN口IP设置为和上级路由器一个网段，方便管理，关闭DHCP,DHCP服务由上级路由统一管理。剩余的LAN口可作为交换机使用，连接设备后将自动从华为AX3路由器获取IP地址。</p>
<h2 id="N1盒子-OPENWRT"><a class="header-anchor" href="#N1盒子-OPENWRT">¶</a>N1盒子-OPENWRT</h2>
<p>N1盒子已刷F大的OPENWRT系统，目前作为旁路由使用，提供科学上网服务，里面内置Docker服务，由于N1是24小时全天候运行，所以使用Docker服务部署了HomeAssistant服务来管理家里智能设备的自动化运行，后来又部署了青龙面板JD签到服务。为了方便远程管理N1路由器和里面的Docker容器，所以在华为AX3主路由上将N1的80端口和Docker容器中用到的端口做了转发处理，这样在外网环境下使用DDNS域名+对应端口就可以了访问到内网的服务了。</p>
<h5 id="N1盒子及OPENWRT的其他使用分享我会再后续分功能来介绍"><a class="header-anchor" href="#N1盒子及OPENWRT的其他使用分享我会再后续分功能来介绍">¶</a>N1盒子及OPENWRT的其他使用分享我会再后续分功能来介绍</h5>
<p>##群晖NAS<br>
为局域网设备提供网络存储服务，目前我使用到的服务套件有Synology MailPlus Server，使用自己的域名搭建邮件服务器；Synology Photos，用于备份和管理移动端的相片等，DownloadStaion用来下载文件和电影，配合浏览器插件，用起来很方便。WebStaion用来搭建网站。还有Docker服务，目前我在群晖的Docker上部署了KMS激活服务、阿里云盘WEBDAV服务、和FRPC服务三个容器。KMS激活服务用于直接激活内网环境下VOL版本的Windows系统和Office办公软件，如果将端口映射出去，也可以用于外网的激活。阿里云盘WEBDAV服务是将阿里云盘转换为标准的WEBDAV协议，可以在各种客户端中使用WEBDAV协议来读写云盘里面的文件。最后一个FRPC服务是一个用于内网穿透的服务，可以在外网环境下直接使用域名访问到内网中的各种服务。另外我在群晖NAS里面部署了DNSPOD的DDNS服务，将自己的域名解析到了NAS，而且在华为AX3主路由上将群晖NAS的主机加到了DMZ服务，这样直接使用DDNS服务的域名加端口就可以直接访问到群晖里面的各种服务，不需要单独做转口转发服务，当然除了运营商已经封锁掉的80/443等端口。这也是我为什么要在Docker上再跑一个DRPC服务的原因了。</p>
<h5 id="群晖NAS的相关使用及经验分享可能后续会单独开个分类。"><a class="header-anchor" href="#群晖NAS的相关使用及经验分享可能后续会单独开个分类。">¶</a>群晖NAS的相关使用及经验分享可能后续会单独开个分类。</h5>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>路由器</tag>
        <tag>网络</tag>
        <tag>NAS</tag>
      </tags>
  </entry>
  <entry>
    <title>转载-openwrt最新版本passwall（帕斯沃）设置节点掉线时自动切换的方法</title>
    <url>/posts/39533.html</url>
    <content><![CDATA[<p>之前OpenWrt系统passwall（帕斯沃）插件里面有个“自动切换”的功能，就是系统检测当前选择的节点如果有故障，会自动切换到备选的节点，以保持网络畅通。然而在Openwrt最新的版本中，passwall的作者不知何故把这个功能给砍掉了，其实这个功能挺好用的，有不少小伙伴私下问我新版本没有了这个功能？于是博主趁着周末研究了一下，发现“自动切换”的功能在原来的菜单上没有了，但是在别处是可以设置的，一起来设置一下吧。</p>
<span id="more"></span>
<p>1、进入passwall菜单，找到“Socks设置”，把“Socks主开关”打勾，根据自己实际情况选择“Socks节点”，并设置“Socks监听端口”（这个端口号要记住，等下要用到）和“HTTP监听端口”，设置完成后点“保存&amp;应用”；</p>
<p><img src="https://img.ycyc.win/img/20240105095030.png" alt="20240105095030"></p>
<p>2、在下图的位置中点“修改”；</p>
<p><img src="https://img.ycyc.win/img/20240105095046.png" alt="20240105095046"></p>
<p>3、进入“Socks设置”，找到“自动切换”，打勾；</p>
<p><img src="https://img.ycyc.win/img/20240105095100.png" alt="20240105095100"></p>
<p>4、在备用节点的列表中，根据自己实际情况，选择备用节点，在“恢复切换”处打勾，设置完成点“保存&amp;应用”；</p>
<p><img src="https://img.ycyc.win/img/20240105095111.png" alt="20240105095111"></p>
<p>5、回到passwall主菜单上，点“节点列表”，添加；</p>
<p><img src="https://img.ycyc.win/img/20240105095125.png" alt="20240105095125"></p>
<p>6、节点名称自己写一下（我写的是：自动切换），类型为“Socks”，地址写“127.0.0.1”，端口写第1个步骤设置的“Socks监听端口”，点“保存&amp;应用”；</p>
<p><img src="https://img.ycyc.win/img/20240105095136.png" alt="20240105095136"></p>
<p>7、在passwall主界面，在“TCP节点”处改成上一个步骤我们自己添加的节点名称，点“保存&amp;应用”；</p>
<p><img src="https://img.ycyc.win/img/20240105095146.png" alt="20240105095146"></p>
<p>8、来测试一下网络，全部畅通，证明设置有效。</p>
<p><img src="https://img.ycyc.win/img/20240105095157.png" alt="20240105095157"></p>
<p>9、如果将来需要改变主用节点的话，只需要在“Socks配置”那里把“Socks节点”选择好，点“保存&amp;应用”就可以了。</p>
<p>原文链接： <a href="https://wp.gxnas.com/13924.html">https://wp.gxnas.com/13924.html</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>passwall</tag>
      </tags>
  </entry>
  <entry>
    <title>配置iStoreOS虚拟机</title>
    <url>/posts/26090.html</url>
    <content><![CDATA[<p>第一步，配置网络：<br>
<img src="https://img.ycyc.win/img/20240106094645.png" alt="20240106094645"><br>
出现上述图像后，单机 Enter 进入命令行</p>
<span id="more"></span>
<p>请您在 Shell 中输入如下命令，以便编辑文件</p>
<p>vi /etc/config/network<br>
Text<br>
image-20231011135937094</p>
<p>现在您进入了 vi 编辑器：</p>
<p>键盘按 i 进入输入模式（代表insert输入的意思）</p>
<p>找到 config interface ‘lan’下的 option ipaddr</p>
<p>默认配置为：</p>
<p>config interface ‘lan’<br>
…<br>
option ipaddr ‘192.168.1.1’<br>
Text<br>
此处需要您自行修改ipaddr，我用我的修改方法作为例子：</p>
<p>我们看到下面我的gateway（网关）为192.168.31.1，这是我的小米路由器的网关ip</p>
<p>所以我如果想在小米路由器的局域网内访问，我需要将ipaddr更改为192.168.31.x。</p>
<p>这里我将openwrt的局域网ip改为：192.168.31.91，这样就处于小米路由器所构建的局域网内，这样使用其他局域网内的设备就能通过这个ip来访问iStoreOS的Web界面。</p>
<p><img src="https://img.ycyc.win/img/20240106094729.png" alt="20240106094729"></p>
<p>修改完毕后，按下 Esc，输入 “:wq”(保存并退出)，退出 vi 编辑器。</p>
<p>输入以下命令，重启虚拟机。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>网络</tag>
        <tag>istoreOS</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub图床配置</title>
    <url>/posts/23057.html</url>
    <content><![CDATA[<p>自从部署了HEXO，就开始寻找一个靠谱的图床系统来用于托管网站的图片。<br>
之前在群晖NAS上使用Chevereto系统部署了一套私有的图床系统，但是如果用于网站图片的托管，需要24小时开机，不仅费电，而且还会加大硬盘的读写，增加坏盘的风险，所以还是放弃了这个想法。<br>
接着我在七牛云上部署了图床系统，想着他有10GB免费的额度，也够用了。但部署完成之后，第二天查看账单发现有了费用，名字叫做https-cdn-海外加速费用，咨询了客服工单之后说是因为我使用的域名没有备案，所以只能使用海外站点，如果你从国内访问的话就会产生费用。<br>
于是我想到了用GitHub来部署图床，网上也有大把的教程，操作起来也很简单，需要配合PicGo来使用。</p>
<h2 id="创建一个公开仓库"><a class="header-anchor" href="#创建一个公开仓库">¶</a>创建一个公开仓库</h2>
<h2 id="生成GitHub-Token"><a class="header-anchor" href="#生成GitHub-Token">¶</a>生成GitHub Token</h2>
<p>进入GitHub账户设置-开发者设置-私人Token，生成一个新的token并复制。<br>
<img src="https://img.ycyc.win/img/20220423091006.png" alt=""></p>
<span id="more"></span>
<h2 id="安装PicGo设置"><a class="header-anchor" href="#安装PicGo设置">¶</a>安装PicGo设置</h2>
<p>安装完成PicGo之之后按照下图进行设置。<br>
<img src="https://img.ycyc.win/img/20220423091233.png" alt=""><br>
如果感觉在国内访问GitHub速度慢的话，可以在设置自定义域名那里填入<a href="https://cdn.miaoyang.win/gh/GitHub%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.miaoyang.win/gh/GitHub用户名/仓库名</a><br>
来使用jsdeliver提供的免费cdn服务加速。<br>
这样设置就完成了，将图片用PicGo上传之后，图片地址就会自动复制到粘贴板，使用起来很方便</p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>GitHub</tag>
        <tag>PicGO</tag>
      </tags>
  </entry>
  <entry>
    <title>picgo422错误代码</title>
    <url>/posts/2192.html</url>
    <content><![CDATA[<p>刚刚在vscode中用picgo上传图片失败，提示检查网络或设置。起初真的以为是token到期了或是网络不通，确定了网络正常之后又检查了token，发现也在有效期。<br>
于是下载了picgo的windows客户端上传同样的图片，发现还是上传失败。好在windows客户端可以查看日志详情。</p>
<span id="more"></span>
<p><img src="https://img.ycyc.win/img/20230322145558.png" alt="20230322145558"><br>
报错日志如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023-03-22 14:45:49 [PicGo INFO] Before transform </span><br><span class="line">2023-03-22 14:45:49 [PicGo INFO] Transforming... Current transformer is [path] </span><br><span class="line">2023-03-22 14:45:49 [PicGo INFO] Before upload </span><br><span class="line">2023-03-22 14:45:49 [PicGo INFO] beforeUploadPlugins: renameFn running </span><br><span class="line">2023-03-22 14:45:49 [PicGo INFO] Uploading... Current uploader is [github] </span><br><span class="line">2023-03-22 14:45:50 [PicGo WARN] failed </span><br><span class="line">2023-03-22 14:45:50 [PicGo ERROR] &#123;</span><br><span class="line">  &quot;method&quot;: &quot;PUT&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;https://api.github.com/repos/miaoyanginfo/hexo-img/contents/img/aaa.png&quot;,</span><br><span class="line">  &quot;statusCode&quot;: 422,</span><br><span class="line">  &quot;message&quot;: &quot;Request failed with status code 422&quot;,</span><br><span class="line">  &quot;stack&quot;: &#123;&#125;,</span><br><span class="line">  &quot;response&quot;: &#123;</span><br><span class="line">    &quot;status&quot;: 422,</span><br><span class="line">    &quot;statusCode&quot;: 422,</span><br><span class="line">    &quot;body&quot;: &#123;</span><br><span class="line">      &quot;message&quot;: &quot;Invalid request.\n\n\&quot;sha\&quot; wasn&#x27;t supplied.&quot;,</span><br><span class="line">      &quot;documentation_url&quot;: &quot;https://docs.github.com/rest/reference/repos#create-or-update-file-contents&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>网上搜了一下422报错应该是上传的图片文件名和已有的图片重名了，然后修改了文件名之后windows客户端和vscode插件上传正常了。<br>
水一篇文章记录一下，分享给有相同报错的朋友。</p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>picgo</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo启用emoji表情支持</title>
    <url>/posts/41234.html</url>
    <content><![CDATA[<p>HEXO默认使用的MarkDown渲染器是不支持emoji表情的，即使是你在页面插入了例如‘😃’这样的emoji代码，也无法正常识别为😃表情图标。<br>
这样就需要替换HEXO默认的渲染器。运行下面的命令，首先卸载原来的渲染器，然后安装新的渲染器，最后安装支持emoji的渲染器插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save  </span><br><span class="line">npm i hexo-renderer-markdown-it --save  </span><br><span class="line">npm install markdown-it-emoji --save</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>插件安装之后，在站点配置文件_config.yml中添加关于markdown的配置字段即可，如果不懂相关配置参数，可无脑复制以下字段。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## markdown 渲染引擎配置，默认是hexo-renderer-marked，这个插件渲染速度更快，且有新特性  </span></span><br><span class="line"><span class="attr">markdown:</span>  </span><br><span class="line">  <span class="attr">render:</span>  </span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span>  </span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span>  </span><br><span class="line">  <span class="attr">plugins:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span>  </span><br><span class="line">  <span class="attr">anchors:</span>  </span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span>  </span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;v&#x27;</span>  </span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">true</span>  </span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">header-anchor</span>  </span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">¶</span></span><br></pre></td></tr></table></figure>
<p>在需要插入emoji的地方插入对应的代码，最后重新部署HEXO即可。😆<br>
我复制了一份常用的MarkDown emoji代码，可以参考复制。😃<br>
▶️ <a href="https://miaoyang.win/about/emoji">https://miaoyang.win/about/emoji</a></p>
<h2 id="Obsidian-使用emoji-toolbar来快速插入表情"><a class="header-anchor" href="#Obsidian-使用emoji-toolbar来快速插入表情">¶</a>Obsidian 使用emoji toolbar来快速插入表情</h2>
<p>😋👏😭<br>
📱🇨🇳🇲🇴</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://blog.kinboy.wang/2018/10/29/Hexo-NexT-%E5%BC%80%E5%90%AF-emoji/">Hexo NexT 开启 emoji | Kinboy’s note</a><br>
<a href="https://pkmer.cn/Pkmer-Docs/10-obsidian/obsidian%E7%A4%BE%E5%8C%BA%E6%8F%92%E4%BB%B6/obsidian-emoji-toolbar/#:~:text=Emoji%20Tool">PKMer_Obsidian 插件：Emoji Toolbar 快速插入 Emoji 符号</a></p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>表情</tag>
        <tag>emoji</tag>
        <tag>HEXO</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode安装Picgo扩展</title>
    <url>/posts/45151.html</url>
    <content><![CDATA[<p>picgo有用于vscode的扩展插件，配置方法类似于桌面版，把Github的开发token信息及仓库源信息填上就可以开始使用了。<br>
<img src="https://img.ycyc.win/img/20220423143041.png" alt="20220423143041"></p>
<p>部分快捷键</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ctrl + Alt + u  ##从剪贴板上传图像</span><br><span class="line"></span><br><span class="line">Ctrl + Alt + e  ##从资源管理器上传图像 </span><br><span class="line"></span><br><span class="line">Ctrl + Alt + o   ##从输入框上传图像</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>vscode</tag>
        <tag>PicGo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GitHub Action实现HEXO的自动编译和发布</title>
    <url>/posts/42824.html</url>
    <content><![CDATA[<p>经过上一篇的步骤之后，我们已经可以将我们的HEXO站点发布到GitHub上了，并且可以正常访问。但是我们每次更新文章以及站点配置的时候必须先在本地进行编译、然后再部署到GitHub上，也就是每进行一次修改，必须执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo clean</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>那有没有一种方法就是，系统检测到我们发布了新文章，然后自动进行程序的编译和发布呢？<br>
今天部署的这个GitHub Action服务就是解决这个问题的。在上一篇文章中我们在 GitHub上还新建了一个私人仓库，我们今天用这个私人仓库来进行操作。<br>
<img src="https://img.ycyc.win/img/20220422151624.png" alt=""></p>
<span id="more"></span>
<h2 id="1-修改本地文件"><a class="header-anchor" href="#1-修改本地文件">¶</a>1.修改本地文件</h2>
<h3 id="删除主题文件夹下隐藏的-git文件夹"><a class="header-anchor" href="#删除主题文件夹下隐藏的-git文件夹">¶</a>删除主题文件夹下隐藏的.git文件夹</h3>
<h3 id="删除hexo根目录下的-deploy-git文件夹"><a class="header-anchor" href="#删除hexo根目录下的-deploy-git文件夹">¶</a>删除hexo根目录下的.deploy_git文件夹</h3>
<p>这两个是我踩过的坑，因为主题文件和hexo deploy git工具是git clone到本地的，所以如果直接上传到GitHub仓库的话，只会上传一个空的指针文件夹，之后进行自动化编译的时候会报错，所以必须删除本地的.git相关信息。</p>
<h2 id="2-将本地HEXO源文件推送到私人仓库"><a class="header-anchor" href="#2-将本地HEXO源文件推送到私人仓库">¶</a>2.将本地HEXO源文件推送到私人仓库</h2>
<blockquote>
<p>在hexo文件夹中初始化hexo</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关联远程仓库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:miaoyanginfo/hexo-action.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>和远程仓库进行一个同步</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull --rebase origin main</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将本地文件添加到暂存库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<blockquote>
<p>添加注释</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;init repo&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>推送到GitHub私人仓库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<p>如果一切顺利的话，我们就会在GitHub的私人仓库中看到我们PUSH上去的HEXO文件夹和文件。</p>
<h2 id="3-生成并部署deploy公钥和密钥"><a class="header-anchor" href="#3-生成并部署deploy公钥和密钥">¶</a>3.生成并部署deploy公钥和密钥</h2>
<blockquote>
<blockquote>
<p>定位到本地hexo文件夹运行以下命令创建deploy key:</p>
</blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f github-deploy-key -C <span class="string">&quot;HEXO CD&quot;</span></span><br></pre></td></tr></table></figure>
<p>运行完成之后会在hexo根目录下生成github-deploy-key和github-deploy-key.pub两个文件，一个私钥，一个公钥。<br>
进入github我们创建的私人仓库，settings-secrets添加actions secrets。<br>
名字输入  SSH_PRIVATE<br>
value输入生成的github-deploy-key内容，也就是私钥的内容。<br>
<img src="https://img.ycyc.win/img/20220422151823.png" alt=""><br>
进入github我们创建的公开仓库，找到settings-deploy keys，<br>
名字输入  HEXO_DEPLOY_PUB<br>
内容输入github-deploy-key.pub文件内的所有内容，也就是公钥的内容。<br>
<img src="https://img.ycyc.win/img/20220422151927.png" alt=""></p>
<h2 id="4-创建GitHub-Action文件"><a class="header-anchor" href="#4-创建GitHub-Action文件">¶</a>4.创建GitHub Action文件</h2>
<p>进入GitHub私人仓库页面，切换到Actions选项，创建一个名为deploy.yml的文件，内容复制下面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: Deploy                      # Actions 显示的名字，随意设置</span><br><span class="line">on: [push]                        # 监听到 push 事件后触发</span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - name: Checkout              # 拉取当前执行 Actions 仓库的指定分支</span><br><span class="line">      uses: actions/checkout@v2</span><br><span class="line">      with:</span><br><span class="line">        ref: main                 # 注意选择私人仓库是main还是master分支</span><br><span class="line"></span><br><span class="line">    - name: Setup Node            # 使用node 14</span><br><span class="line">      uses: actions/setup-node@v2</span><br><span class="line">      with:</span><br><span class="line">        node-version: &quot;14&quot;</span><br><span class="line"></span><br><span class="line">    - name: NPM INSTALL           #安装依赖</span><br><span class="line">      run: |</span><br><span class="line">        npm install hexo-cli -g</span><br><span class="line">        npm install hexo-deployer-git  --save </span><br><span class="line">        npm install</span><br><span class="line"></span><br><span class="line">    - name: Add KEY               #这里需要提供一个ssh私钥，用你平时常用机器里的 ~/.ssh/id_rsa即可</span><br><span class="line">      env:</span><br><span class="line">        SSH_PRIVATE: $&#123;&#123; secrets.SSH_PRIVATE &#125;&#125;</span><br><span class="line">      run: |</span><br><span class="line">        mkdir -p ~/.ssh/</span><br><span class="line">        echo &quot;$SSH_PRIVATE&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">        chmod 700 -R ~/.ssh</span><br><span class="line">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">        git config --global user.email &quot;paulmiao@me.com&quot;</span><br><span class="line">        git config --global user.name &quot;miaoyanginfo&quot;</span><br><span class="line"></span><br><span class="line">    - name: Hexo Deploy           # hexo deploy 会自动build然后上传到github.io项目中</span><br><span class="line">      run: |</span><br><span class="line">        hexo clean</span><br><span class="line">        hexo deploy  </span><br></pre></td></tr></table></figure>
<h2 id="5-测试Action是否正常运行"><a class="header-anchor" href="#5-测试Action是否正常运行">¶</a>5.测试Action是否正常运行</h2>
<p>我们现在私人仓库/source/_posts文件夹下新建一个.md的日志文件，然后切换到Actions选项卡看下自动化执行过程是否有报错，如果运行正常的话，我们进入公开仓库，看下文件的最后修改时间是不是最近几秒钟内。<br>
然后我们再打开我们的github站点地址，看看是不是有新日志已经发布了。<br>
<img src="https://img.ycyc.win/img/20220422151723.png" alt=""></p>
<h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2>
<blockquote>
<p>经过两篇文章的操作，我们已经可以实现HEXO在GitHub上面的部署以及使用GitHub的Action功能来实现文章发布时自动编译和部署。如果在部署过程中遇到问题，欢迎和我交流。</p>
</blockquote>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>HEXO</tag>
        <tag>Action</tag>
        <tag>编译</tag>
        <tag>发布</tag>
      </tags>
  </entry>
  <entry>
    <title>使用VScode编辑Markdown文章</title>
    <url>/posts/59730.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/20220423144012.png" alt=""></p>
<h2 id="下载安装Microsoft-Visual-Studio-Code安装包（以下简称VScode）"><a class="header-anchor" href="#下载安装Microsoft-Visual-Studio-Code安装包（以下简称VScode）">¶</a>下载安装Microsoft Visual Studio Code安装包（以下简称VScode）</h2>
<p>下载地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://code.visualstudio.com/</span><br></pre></td></tr></table></figure>
<h2 id="设置显示语言为中文"><a class="header-anchor" href="#设置显示语言为中文">¶</a>设置显示语言为中文</h2>
<p>软件安装完成之后默认语言是英文，我们在主界面同时按下ctrl+shift+P三个按键，输入configure display language，点击安装其他语言，然后下载安装简体中文包，安装完成之后即可启用切换到中文界面。</p>
<h2 id="新建MarkDown格式文件"><a class="header-anchor" href="#新建MarkDown格式文件">¶</a>新建MarkDown格式文件</h2>
<p>新建文件，格式选择MarkDwon即可创建MarkDwon格式的文件。</p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Valine来给HEXO添加评论系统</title>
    <url>/posts/35875.html</url>
    <content><![CDATA[<p>HEXO默认是不带评论系统的，但后台支持调用许多第三方的评论系统，我们这里以Valine为例来给HEXO站点配置第三方评论系统</p>
<h2 id="1-注册LeanCloud账户并创建应用"><a class="header-anchor" href="#1-注册LeanCloud账户并创建应用">¶</a>1.注册LeanCloud账户并创建应用</h2>
<p>进入LeanCloud网站注册账户，进行实名认证，然后创建一个应用，命名为hexo。</p>
<h2 id="2-获取应用的APP-KEY"><a class="header-anchor" href="#2-获取应用的APP-KEY">¶</a>2.获取应用的APP KEY</h2>
<p>进入创建好的应用，点击&quot;设置&quot;，然后&quot;应用凭证&quot;，获取APPID和APPKEY。</p>
<h2 id="3-编辑主题配置文件"><a class="header-anchor" href="#3-编辑主题配置文件">¶</a>3.编辑主题配置文件</h2>
<p>编辑主题的_config.yml配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">comments:</span><br><span class="line">  use: Valine</span><br><span class="line">valine:</span><br><span class="line">  appId: </span><br><span class="line">  appKey: </span><br><span class="line">  avatar: monsterid # gravatar style https://valine.js.org/#/avatar</span><br><span class="line">  serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span><br><span class="line">  bg: # valine background</span><br><span class="line">  visitor: false</span><br><span class="line">  option:</span><br></pre></td></tr></table></figure>
<p>use字段填入&quot;Valine&quot;<br>
appid和appkey字段填入获取到的信息，然后保存文件。</p>
<h2 id="3-添加安全域名"><a class="header-anchor" href="#3-添加安全域名">¶</a>3.添加安全域名</h2>
<p>进入应用&quot;设置&quot;-“安全中心”，填入你的HEXO站点地址，然后保存。</p>
<h2 id="4-编译站点并发布"><a class="header-anchor" href="#4-编译站点并发布">¶</a>4.编译站点并发布</h2>
<p>经过上面步骤之后对站点进行重新编译和发布，就可以在文章结尾看到评论窗口了。</p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>valine</tag>
      </tags>
  </entry>
  <entry>
    <title>在GitHub上部署HEXO</title>
    <url>/posts/31120.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/20220422151137.png" alt=""><br>
经过三天的不断网上趴文和自我修炼，参考了众多网上大神的教程和文章，自己又填了无数个坑之后，终于成功在GitHub上部署了HEXO系统发布文章，使用GitHub Action功能自动编译HEXO程序并发布静态页面。我将用两个篇幅来记录部署过程。<br>
第一部分介绍如何在本地部署HEXO程序，安装主题，本地预览，然后发布到Github Page。<br>
第二部分介绍如何使用GitHub Action功能实现HEXO程序的自动编译和发布。</p>
<h2 id="1-GitHub上新建仓库"><a class="header-anchor" href="#1-GitHub上新建仓库">¶</a>1.GitHub上新建仓库</h2>
<p>登录你的Github，新建两个仓库：<br>
一个仓库用于发布我们的HEXO站点，为了便于区分，我们在这里叫它公开仓库，新建的时候选在类型为Public，网址那里填入***.github.io，确保你可以使用域名https://***.github.com 访问到你的页面，这篇文章我们主要在这个仓库中进行操作；<br>
另一个站点用于存放我们的HEXO程序源文件，用于和主仓库实现自动化编译和发布的联动，我们叫它私人仓库，类型选择Pravite，名称随便起，我们这里叫做hexo-action。<br>
<img src="https://img.ycyc.win/img/20220422151313.png" alt=""></p>
<span id="more"></span>
<h2 id="2-本地安装配置环境"><a class="header-anchor" href="#2-本地安装配置环境">¶</a>2.本地安装配置环境</h2>
<p>需要安装的工具有git和node两个环境，安装包已经上传到了阿里云，大家可以自行下载。<br>
git x64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.aliyundrive.com/s/eWkiy8beBEj</span><br></pre></td></tr></table></figure>
<p>node x64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.aliyundrive.com/s/A6iLQPNecXt</span><br></pre></td></tr></table></figure>
<p>安装完成之后在cmd窗口运行git --version及node -v 命令确保安装正确。</p>
<h2 id="3-部署Github通讯密钥"><a class="header-anchor" href="#3-部署Github通讯密钥">¶</a>3.部署Github通讯密钥</h2>
<blockquote>
<p>我们在本地运行git bash命令窗，</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>生成ssh密钥文件:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<p>连续回车，直到命令运行结束。<br>
在本地用户名文件夹下会看到一个.ssh命名的文件夹，用记事本或是notepad++打开里面的id_rsa.pub文件并复制全部内容。<br>
打开GitHub_Settings_keys 页面，新建new SSH Key，Title随便填，Key那里把刚才复制的公钥粘贴过去，然后点击Add SSH Key。<br>
<img src="https://img.ycyc.win/img/20220422151443.png" alt=""></p>
<blockquote>
<p>我们可以输入下面命令来测试一下密钥是否配置正确：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>
<h2 id="3-运行安装命令进行HEXO的安装"><a class="header-anchor" href="#3-运行安装命令进行HEXO的安装">¶</a>3.运行安装命令进行HEXO的安装</h2>
<p>在本地选择一个文件夹，作为你的hexo主目录，在这个文件夹下右键，选择git bash here打开git命令窗口。</p>
<blockquote>
<p>运行命令安装hexo：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行命令在此文件夹新建站点：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>如果命令没有报错的话，在你选定的文件夹下应该会下载到hexo的文件。</p>
<blockquote>
<p>我们可以编辑根目录下的_config.yml来配置HEXO站点的相关信息。<br>
编辑完相关信息之后运行以下命令重新生成站点文件：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<h2 id="4-打开本地演示模式"><a class="header-anchor" href="#4-打开本地演示模式">¶</a>4.打开本地演示模式</h2>
<blockquote>
<p>输入下面命令打开本地演示模式：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>打开之后在浏览器输入<a href="http://localhost:400">http://localhost:400</a> 就可以访问到网站了。</p>
<h2 id="5-安装主题butterfly"><a class="header-anchor" href="#5-安装主题butterfly">¶</a>5.安装主题butterfly</h2>
<p>我们接下来安装一个主题，这里以butterfly这个主题为例，其他主题的安装也类似。</p>
<blockquote>
<p>在hexo文件下下运行以下命令：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<p>运行完成之后我们编辑主题文件夹下的_config.yml文件来对主题进行配置。<br>
编辑完成之后复制一份这个yml文件到hexo根目录，并命名为_config.butterfly.yml。<br>
接着编辑根目录下面的站点配置文件_config.yml来更改主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改完成之后重新运行下面命令编译HEXO：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后本地预览新安装的主题：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h2 id="6-将站点发布到Github上"><a class="header-anchor" href="#6-将站点发布到Github上">¶</a>6.将站点发布到Github上</h2>
<p>如果在本地演示没有报错，我们就可以将站点发布到Github上面了。<br>
首先我们需要编辑根目录下的_config.yml文件，拉到文件最底部填入你的github地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: git@github.com:miaoyanginfo/miaoyanginfo.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后运行下面的命令：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git  --save</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>发布完成之后我们直接用域名https://***.github.io<br>
就可以访问到我们搭建的HEXO站点了。</p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>HEXO</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>利用青龙面板激活唤醒leancloud自动休眠</title>
    <url>/posts/39304.html</url>
    <content><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2>
<p>上篇文章写了如何在装有NEXT主题的HEXO站点上接入valine评论系统，valine是基于leancloud服务的，而Leancloud免费版有两个休眠机制，一个是每天6个小时强制休眠，另一个机制是如果半个小时内没有检测到访问，实例会自动进入休眠状态，等到下次有评论的时候才会触发，但是从触发到正常运行有一定的时间间隔，如果使用了valine-admin的话会导致邮件发送失败。网上也有许多应对leancloud休眠机制的方法，比如在leancloud中添加定时任务，或者是使用github action来定时访问管理面板等等。</p>
<h2 id="操作"><a class="header-anchor" href="#操作">¶</a>操作</h2>
<p>之前我写了一篇文章介绍如何使用青龙面板来定时启动serv00的进程，链接如下：<br>
<a href="https://ycyc.win/posts/1316">靠谱的serv00保活办法-利用青龙定时启动PM2 | 渊澄</a></p>
<p>这次也是用到类似的方法，只不过脚本更简单，我们只需要定时访问valine的后台页面，无需登录和其他操作就可以激活实例，所以只需要用到curl就可以了。其他操作按照链接中的步骤操作就可以了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://yourdomian.com</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将网址替换为你的valine-admin后台地址即可。</p>
</blockquote>
<span id="more"></span>
<p>运行时间可以设置为*/29 7-23 * * * ，也就是每天7-23点的每小时29分钟执行一次脚本。<br>
试着运行一下脚本，查看运行日志是否正常。然后登录leancloud管理后台查看实例是否已被激活。<br>
<img src="https://img.ycyc.win/img/202412041448103.png" alt="image.png"></p>
<h2 id="测试"><a class="header-anchor" href="#测试">¶</a>测试</h2>
<p>实测在没用使用其他唤醒服务的前提下，此唤醒方法目前可稳定运行。<br>
<img src="https://img.ycyc.win/img/202412050831188.png" alt="image.png"></p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://www.aimtao.net/slef-wake-leancloud/">Gtihub Action｜一行命令解决 LeanCloud 流控问题 - AimTao</a></p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>valine</tag>
        <tag>青龙面板</tag>
        <tag>定时</tag>
        <tag>激活</tag>
        <tag>leancloud</tag>
        <tag>valine-admin</tag>
      </tags>
  </entry>
  <entry>
    <title>在VScode中使用snippets来简化hexo头部matter</title>
    <url>/posts/61790.html</url>
    <content><![CDATA[<p>每次写hexo文章的时候都需要手动敲入文章头部的front-matter字段，而且有时候可能会敲错，导致发布失败，那有没有一种简单的方法，输入某个字符就能带出这些内容呢？<br>
你别说还真有，在vscode中有一个snippets的功能就可以实现上面的需求，下面跟我来操作吧。</p>
<h3 id="编辑markdown-json文件"><a class="header-anchor" href="#编辑markdown-json文件">¶</a>编辑markdown.json文件</h3>
<p>ctrl+shift+P打开配置搜索框搜索snippets。<br>
<img src="https://img.ycyc.win/img/20220525134538.png" alt="20220525134538"><br>
然后搜索markdown编辑markdown.json文件<br>
<img src="https://img.ycyc.win/img/20220525134725.png" alt="20220525134725"><br>
在文件中插入以下字段并保存。<br>
这里prefix后面的title可以随意替换，之后输入这个词就会带出相应的内容。body里面的字段也可以随意增减。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Generate Hexo blog header&quot;: &#123;</span><br><span class="line">		&quot;prefix&quot;: &quot;title&quot;,</span><br><span class="line">		&quot;body&quot;: [</span><br><span class="line">			&quot;---&quot;,</span><br><span class="line">			&quot;title: &quot;,</span><br><span class="line">			&quot;date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;,</span><br><span class="line">			&quot;categories: &quot;,</span><br><span class="line">			&quot;tags:&quot;,</span><br><span class="line">			&quot;cover: &quot;,</span><br><span class="line">			&quot;sticky: &quot;,</span><br><span class="line">			&quot;---&quot;,</span><br><span class="line">		],</span><br><span class="line">		&quot;description&quot;: &quot;hexo header&quot;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img.ycyc.win/img/20220525134901.png" alt="20220525134901"></p>
<h3 id="编辑settings-json文件"><a class="header-anchor" href="#编辑settings-json文件">¶</a>编辑settings.json文件</h3>
<p>在vscode中搜索settings.json文件进行编辑。<br>
<img src="https://img.ycyc.win/img/20220525135009.png" alt="20220525135009"><br>
插入下面的字段并报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[markdown]&quot;: &#123;</span><br><span class="line">        &quot;editor.wordWrap&quot;: &quot;on&quot;,</span><br><span class="line">        &quot;editor.quickSuggestions&quot;: true</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="大功告成"><a class="header-anchor" href="#大功告成">¶</a>大功告成</h3>
<p>完成上面设置步骤之后在markdown文件中输入title就可以带出hexo所需的头部matter字段了。<br>
<img src="https://img.ycyc.win/img/20220525135235.png" alt="20220525135235"></p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
  </entry>
  <entry>
    <title>多台电脑协作更新HEXO</title>
    <url>/posts/7251.html</url>
    <content><![CDATA[<p>家里一台电脑，单位一台电脑，如何用两台电脑同时对HEXO进行更新呢？</p>
<h2 id="生成密钥并部署到GitHub"><a class="header-anchor" href="#生成密钥并部署到GitHub">¶</a>生成密钥并部署到GitHub</h2>
<p>我们需要在另一台电脑上安装git、node等必要环境，然后选取一个文件夹作为工作文件夹，在这个文件夹下运行git bash命令窗口。</p>
<blockquote>
<p>创建一个新的密钥：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>在本地用户名文件夹下找到.ssh文件夹，复制里面的id_rsa.pub内容，然后前往GitHub的settings页面，添加一个SSH key，title最好取名为你的电脑名称，然后粘贴刚才复制的公钥的内容。<br>
<a href="https://img.ycyc.win/img/20220422151443.png"></a></p>
<span id="more"></span>
<h2 id="克隆远程仓库文件"><a class="header-anchor" href="#克隆远程仓库文件">¶</a>克隆远程仓库文件</h2>
<blockquote>
<p>运行下面的命令来克隆GitHub仓库里面的文件：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:miaoyanginfo/hexo-action.git</span><br></pre></td></tr></table></figure>
<p>命令完成之后我们进入文件夹内会看到有一个名为“hexo-action”的文件夹，这个文件夹里面包括我们远程仓库里的所有文件，我们可以在这个文件夹里面更新文件。</p>
<h2 id="推送到GitHub"><a class="header-anchor" href="#推送到GitHub">¶</a>推送到GitHub</h2>
<blockquote>
<p>当我们做完相应的更新之后，运行常规push命令就能直接将更新推送到GitHub了。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<h3 id="另一台电脑如何操作"><a class="header-anchor" href="#另一台电脑如何操作">¶</a>另一台电脑如何操作</h3>
<p>当我们在原先那台电脑上工作时，本地代码和远程的代码发生了不一致，为了保持同步，所以需要将GitHub仓库中的代码同步到电脑上。</p>
<blockquote>
<p>从远程的origin的main主分支下载最新的版本到origin/master分支上：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin main</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后比较本地的master分支和origin/master分支的差别:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p master..origin/master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后进行合并:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next国内IP使用leancloud国际版添加Valine评论设置邮件通知功能</title>
    <url>/posts/21191.html</url>
    <content><![CDATA[<h2 id="楔子"><a class="header-anchor" href="#楔子">¶</a>楔子</h2>
<p>之前我的Hexo使用的评论系统是Gitalk，调用的是Github的服务，但是github在国内经常无法正常使用，所以决定换一个评论系统，虽然也没啥人来评论😅。Valine是一款简洁快速的无后端评论系统，依赖于leancloud服务。Leancloud分为国际版和国内版，国内版域名必须绑定自定义域名才可以使用，而且域名必须备案。而国际版目前对国内的IP进行了屏蔽，使用国内的IP无法正常使用Leancloud国际版的服务，具体表现为评论框无法加载，留言点击发送后无任何反应等等，也就无法正常通过valine进行评论。这篇文章的目的是使用国内IP可以正常访问国际版的Leancloud，从而使用valine进行评论，另外通过在Leancloud部署Valine-Admin服务来实现新留言和评论邮件提醒功能。</p>
<h2 id="环境"><a class="header-anchor" href="#环境">¶</a>环境</h2>
<p>Hexo 7.3.0<br>
Next主题版本：8.21.0<br>
部署：Github+Cloudflare Pages<br>
另外还需要准备两个二级域名来绑定Leancloud的相关服务，一个用于设置自定义API地址，另一个用于访问valine-admin面板。</p>
<h2 id="Valine插件安装"><a class="header-anchor" href="#Valine插件安装">¶</a>Valine插件安装</h2>
<p>目前最新的Next主题虽然已经移除了对Valine的原生支持，但是可以通过插件来启用Valine功能。<br>
<a href="https://github.com/next-theme/hexo-next-valine">GitHub - next-theme/hexo-next-valine: Valine comment system for NexT.</a></p>
<p>在hexo目录下面执行命令进行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install next-theme/hexo-next-valine</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="Leancloud账号设置"><a class="header-anchor" href="#Leancloud账号设置">¶</a>Leancloud账号设置</h2>
<p>登录到Leancloud国际站<a href="https://leancloud.app/">LeanCloud</a>创建应用并获取对应的AppID和AppKey。</p>
<p>进入设置-域名绑定，根据提示绑定API访问域名。直到提示如下图所示已绑定。<br>
<img src="https://img.ycyc.win/img/202412040916569.png" alt="image.png"></p>
<h2 id="Valine插件设置"><a class="header-anchor" href="#Valine插件设置">¶</a>Valine插件设置</h2>
<p>在hexo 的_config.yml文件中插入以下字段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Valine</span><br><span class="line"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span><br><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appId:  # your leancloud application appid</span><br><span class="line">  appKey:  # your leancloud application appkey</span><br><span class="line">  serverURLs: # When the custom domain name is enabled, fill it in here</span><br><span class="line">  placeholder: Just go go # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  meta: [nick, mail, link] # Custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br><span class="line">  visitor: false # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span><br><span class="line">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span><br><span class="line">  recordIP: false # Whether to record the commenter IP</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将字段中的appid以及appkey替换为自己的信息，serverURLs处填写上一步设置的API访问域名。其他设置根据自己实际情况参阅插件Github进行设置<a href="https://github.com/next-theme/hexo-next-valine">GitHub - next-theme/hexo-next-valine: Valine comment system for NexT.</a></p>
</blockquote>
<p>设置完成之后重新部署hexo即可。经过上面设置之后 我们现在就可以用国内IP使用Leancloud国际版的服务了。如果你还需要在收到新留言或是留言被回复的时候给自己或是留言者发送邮件提醒的话可以接着往下看。</p>
<h2 id="部署Valine-Admin服务"><a class="header-anchor" href="#部署Valine-Admin服务">¶</a>部署Valine-Admin服务</h2>
<p>Valine-Admin是用于管理valine的简单面板，可以在Leancloud中进行部署。项目Github主页：<a href="https://github.com/DesertsP/Valine-Admin">GitHub - DesertsP/Valine-Admin: 🔥A simple comment system based on LeanCloud and Valine.</a></p>
<p>按下图所示，进入云引擎-管理部署，新建一个分组，类型选择免费版。<br>
<img src="https://img.ycyc.win/img/202412040928077.png" alt="image.png"></p>
<p>部署选择git部署，目标环境为生产环境。git URL输入<a href="https://github.com/DesertsP/Valine-Admin.git%EF%BC%8C%E5%88%86%E6%94%AF%E5%A1%AB%E5%85%A5master%EF%BC%8C%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BB%E9%83%A8%E7%BD%B2%E3%80%82">https://github.com/DesertsP/Valine-Admin.git，分支填入master，然后点击部署。</a></p>
<p><img src="https://img.ycyc.win/img/202412040931433.png" alt="image.png"></p>
<p>接着按照下图设置环境变量<br>
<img src="https://img.ycyc.win/img/202412040935826.png" alt="image.png"></p>
<blockquote>
<p>ADMIN_URL 输入我们设置的第二个二级自定义域名，用于访问留言面板。</p>
</blockquote>
<p>参数详细说明如下：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>SITE_NAME</td>
<td>Deserts</td>
<td>[必填]博客名称</td>
</tr>
<tr>
<td>SITE_URL</td>
<td><a href="https://panjunwen.com/">https://panjunwen.com</a></td>
<td>[必填]首页地址</td>
</tr>
<tr>
<td><strong>SMTP_SERVICE</strong></td>
<td>QQ</td>
<td>[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href="https://nodemailer.com/smtp/well-known/#supported-services">更多</a></td>
</tr>
<tr>
<td>SMTP_USER</td>
<td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td>
<td>[必填]SMTP登录用户</td>
</tr>
<tr>
<td>SMTP_PASS</td>
<td>ccxxxxxxxxch</td>
<td>[必填]SMTP登录密码（QQ邮箱需要获取独立密码）</td>
</tr>
<tr>
<td>SENDER_NAME</td>
<td>Deserts</td>
<td>[必填]发件人</td>
</tr>
<tr>
<td>SENDER_EMAIL</td>
<td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td>
<td>[必填]发件邮箱</td>
</tr>
<tr>
<td>ADMIN_URL</td>
<td><a href="https://xxx.leanapp.cn/">https://xxx.leanapp.cn/</a></td>
<td>[建议]Web主机二级域名（云引擎域名），用于自动唤醒</td>
</tr>
<tr>
<td>BLOGGER_EMAIL</td>
<td><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td>
<td>[可选]博主通知收件地址，默认使用SENDER_EMAIL</td>
</tr>
<tr>
<td>AKISMET_KEY</td>
<td>xxxxxxxx</td>
<td>[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td>
</tr>
</tbody>
</table>
<p>下载该页面设置自定义域名，这里设置的域名要与你在变量中填入的ADMIN_URL一致，直到提示已绑定。<br>
<img src="https://img.ycyc.win/img/202412040939299.png" alt="image.png"></p>
<p>变量设置并保存之后重新部署该项目，然后访问自定义域名/sign-up，注册管理员信息之后就可以登录面板了。如果你的相关变量设置无误，在有新留言或是留言被回复的时候，相应的邮箱就会收到提醒邮件了。如果接收不到邮件，可以查阅日志，根据报错提示查找问题所在。<br>
<img src="https://img.ycyc.win/img/202412040943756.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>valine</tag>
        <tag>leancloud</tag>
        <tag>valine-admin</tag>
        <tag>next</tag>
        <tag>国际</tag>
        <tag>国内</tag>
        <tag>邮件</tag>
        <tag>提醒</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian格式化插件-Linter</title>
    <url>/posts/13016.html</url>
    <content><![CDATA[<p>今天介绍一款Obsidian神级插件-Linter。<br>
项目主页<a href="https://github.com/platers/obsidian-linter">platers/obsidian-linter: An Obsidian plugin that formats and styles your notes with a focus on configurability and extensibility. (github.com)</a><br>
Linter是一款可以让你的Obsidian文件更加整齐统一美观的插件，而我得知到它的途径是我想要实现如何在Obsidian的文章中可以自动更新文章的修改时间。<br>
Hexo日志的Front-matter有date和updated两个参数，date是文章的创建时间，updated是最后修改时间。之前用vscode通过github action部署之后这两个时间默认是一样的，都是项目最后部署的时间，除非你手动在每篇文章都指定这两个字段。<br>
转到Obsidian之后，我用templater插件创建了Front-matter模板，虽然可以简化手动输入的操作，但是updated字段在你首次插入模板之后就固定下来了，不会随着你修改的时间而变化，除非你手动去修正。<br>
然后就是一通搜索，看看有没有办法能获取到每次文章真正修改的时间，并写入到文章的Front-matter中去。<br>
然后就是有人推荐一款名为Linter的插件。看上去设置比较繁琐，但实际安装调整完之后感觉还好。只要设置正确，都能按照你的预期来执行。</p>
<span id="more"></span>
<p>如何搜索安装就不说了。着重写一下我目前实现的功能和相关的设置。还有就是如果设置得当的话，完全可以弃用templater来导入front-matter模板了。</p>
<h4 id="自动将文件名设置为title并写入front-matter。"><a class="header-anchor" href="#自动将文件名设置为title并写入front-matter。">¶</a>自动将文件名设置为title并写入front-matter。</h4>
<p>在插件的YAML选项卡找到下图所示的选项设置保存。</p>
<p><img src="https://img.ycyc.win/img/202409261513814.png" alt="image.png"></p>
<h4 id="自动将标签和分类字段添加到front-matter"><a class="header-anchor" href="#自动将标签和分类字段添加到front-matter">¶</a>自动将标签和分类字段添加到front-matter</h4>
<p>在插件的YAML选项卡找到下图所示的选项设置保存。<br>
<img src="https://img.ycyc.win/img/202409261515814.png" alt="image.png"></p>
<p>如果你还希望插入其他字段，可以一并在这里输入</p>
<h4 id="自动将创建时间和最后修改时间写入front-matter"><a class="header-anchor" href="#自动将创建时间和最后修改时间写入front-matter">¶</a>自动将创建时间和最后修改时间写入front-matter</h4>
<p>在YAML选项卡找到YAML时间戳。<br>
<img src="https://img.ycyc.win/img/202409261517432.png" alt="image.png"></p>
<p><img src="https://img.ycyc.win/img/202409261517493.png" alt="image.png"></p>
<p>日期格式按照图中所示填写。</p>
<h4 id="设置完成之后在基础选项卡参照下图按需设置"><a class="header-anchor" href="#设置完成之后在基础选项卡参照下图按需设置">¶</a>设置完成之后在基础选项卡参照下图按需设置</h4>
<p><img src="https://img.ycyc.win/img/202409261519055.png" alt="image.png"></p>
<h4 id="测试"><a class="header-anchor" href="#测试">¶</a>测试</h4>
<p>一切就绪之后可以新建一篇文章进行测试。<br>
手动保存之后会自动添加front-matter内容，并且会更新当前时间修改updated字段的时间。<br>
目前发现一个问题，如果我打开之前的文章，没有做任何修改，直接保存后，updated时间会更新到当前时间。<br>
<img src="https://img.ycyc.win/img/202409261529874.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>obsidian</tag>
        <tag>linter</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>让HEXO“动起来”-体验Qexo静态博客管理面板</title>
    <url>/posts/23533.html</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>对于习惯了使用WordPress等传统CMS程序的用户来说，使用纯静态的hexo更新网站或多或少还是有些不太适应。缺少了管理后台，无法直观的管理站点的日志和页面，只能通过一个个静态文件来更新。并且想要发布还需要去向github提交更改。</p>
<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2>
<p><img src="https://img.ycyc.win/img/202409251349501.png" alt="qexo01.png"></p>
<p>Github上有个开源项目名为Qexo，这是一个为静态站点而生的项目，官方介绍为“Qexo 是一个快速、强大、美观的在线 静态博客编辑器。使用 GPL3.0 开源协议。支持包括且不限于在 Vercel 等平台部署, 为您的静态博客添加动态的元素”。程序方面目前支持Hexo、Hugo和Valaxy。如果你正在使用这些程序，可以尝试一下。这个项目支持在Vercel平台一键部署，免去了额外的花销。而且官方也有较为详细的配置文档，新手也很容易上手。<a href="https://www.oplog.cn/qexo/start.html">Qexo 文档 (oplog.cn)</a><br>
部署前需要确认你的hexo已经通过github action设置了自动化部署，如何设置github action可以参阅我之前的文章<a href="https://ycyc.win/posts/42824">使用GitHub Action实现HEXO的自动编译和发布 | 渊澄|YCYC.WIN</a><br>
还需要注意的是如果你是在vercel部署的，需要在项目设置那里将node.js版本降级为18.x。这一点文档里面也着重强调了。</p>
<span id="more"></span>
<p>部署完成之后就可以进入站点页面进行配置了。（当然你也可以在vercel设置自定义域名，只需将域名cname解析到vercel即可）。根据页面提示和文档获取相关的github和vercel密钥，然后创建管理员账户之后就可以登录了。<br>
<img src="https://img.ycyc.win/img/202409251036113.png" alt="qexo00.png"></p>
<p><s>Qexo同样支持图床的配置，但是我配置完Github图床之后有系统报错，看报错代码像是仓库中有同名文件，<a href="https://ycyc.win/posts/2192?highlight=picgo">picgo422错误代码 | 渊澄|YCYC.WIN</a>，但已排除。不知何故，已经在项目issues提问了。</s>—</p>
<p>经过排查，问题为设置界面的“保存路径”输入有误，需要按照Qexo的格式来填写，和其他图床插件不一样。<a href="https://www.oplog.cn/qexo/configs/upload.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D-2">Qexo 文档 (oplog.cn)</a></p>
<p><img src="https://img.ycyc.win/Qexo/24/9/image_547c7788639701b124967757991368f9.png" alt="https://img.ycyc.win/Qexo/24/9/image_547c7788639701b124967757991368f9.png"></p>
<p>界面上的日志新增、编辑、删除都会push到Github仓库。<br>
虽然面板上还无法像wordpress那样对种主题和插件进行可视化设置，但是可以从配置选项卡直接编辑对应的配置文件，也算是弥补了一些遗憾。<br>
<img src="https://img.ycyc.win/img/202409251041205.png" alt="image.png"></p>
<p>另外Qexo还提供了一个说说和友情链接的模块可供选用，部署也简单，只需新建相关页面，然后插入代码对应即可。另外说说的编辑是不会产生仓库push的。实际测试该模块在国内的网络环境下好像加载不出来，可能与Qexo部署在vercel有关。<br>
<img src="https://img.ycyc.win/img/202409251143690.png" alt="image.png"></p>
<h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2>
<p>整体体验下来还算可以，界面设计和布局都比较容易上手。只是响应速度有点慢，可能与vercel访问速度慢有关。<s>还有一个问题我发现站点实际的文章总数与Qexo界面显示的文章总数不一致，可能是我新发的两篇文章是在安装了Qexo之后用Obsidian发布的，没有统计进去。</s>（这个问题在界面刷新界面清除缓存或者设置webhook可解决）。<a href="https://www.oplog.cn/qexo/start/questions.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%96%B0%E5%BB%BA%E7%9A%84%E6%96%87%E7%AB%A0%E6%B2%A1%E6%9C%89%E6%98%BE%E7%A4%BA-qexo-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%96%87%E4%BB%B6%E6%9C%80%E6%96%B0">常见问题 | Qexo 文档 (oplog.cn)</a></p>
<p><img src="https://img.ycyc.win/Qexo/24/9/image_636f76ab9a82fe2264b49d3f2e4a0d66.png" alt="https://img.ycyc.win/Qexo/24/9/image_636f76ab9a82fe2264b49d3f2e4a0d66.png"></p>
<p>另外我目前已经习惯了在Obsidian编写hexo，大部分情况可能不会去用Qexo编写，但是如果在移动端等其他不方便部署环境的地方，会选择用Qexo来进行站点的更新。可以作为一个备选方案。</p>
<p><img src="https://img.ycyc.win/img/202409251049070.png" alt="f5c3d9a5b0a822be70c754af795b6c7.jpg"></p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://www.oplog.cn/qexo/start.html">Qexo 文档 (oplog.cn)</a><br>
<a href="https://github.com/Qexo/Qexo">Qexo/Qexo: A fast, powerful and beautiful online manager for all static blog frameworks. (github.com)</a></p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>QEXO</tag>
        <tag>vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Alist来同步Obsidian项目</title>
    <url>/posts/60919.html</url>
    <content><![CDATA[<p>想要多终端同时处理Obisdian怎么搞，可以借助三方插件remotely save配合alist的webdav协议来将文件存到接入Alist的各种网盘。<br>
Alist是一个可以任意接入主流网盘的平台，并且可以通过alist来同步网盘间的文件，并且部署起来也很简单，只需要一条docker命令即可完成。详细的介绍可以直达官网了解<a href="https://alist.nn.ci/zh/">Home | AList文档 (nn.ci)</a></p>
<h2 id="安装配置插件"><a class="header-anchor" href="#安装配置插件">¶</a>安装配置插件</h2>
<p>搜索安装并启用三方插件Remotely Save。这个插件支持多种包括亚马逊S3、微软OneDrive等主流网盘，也支持WEBDAV传输协议。我们今天就是要使用webdav协议来同步obisdian项目中的文件。<br>
<img src="https://img.ycyc.win/img/20240911150712.png" alt="image.png"></p>
<span id="more"></span>
<p>你需要在你家里的NAS或是软路由上搭建了Alist，我的alist是搭建在家里istoreOS路由器上的，并且在公网做了端口转发，这里要确保你的alist可以在外网环境下访问。在如下图的地方填入你的alist地址和用户名密码。<br>
<img src="https://img.ycyc.win/img/20240911150543.png" alt="image.png"></p>
<h2 id="需要注意的几点"><a class="header-anchor" href="#需要注意的几点">¶</a>需要注意的几点</h2>
<p>这里需要注意几点，一个是服务器地址需要https协议，也就是你需要申请并部署SSL证书。如果你只是在电脑客户端使用，http也是可以的，但是在iOS移动端使用，就必须使用https协议。如何申请并部署SSL可自行搜索相关教程，这里不做详细介绍。<br>
另一点需要注意的是服务器地址的路径，格式为ip或域名+alist的端口号/dav/同步的文件夹名。例如（<a href="https://yourdomain.com:4567/dav/yourfold%EF%BC%89">https://yourdomain.com:4567/dav/yourfold）</a>  。<br>
插件设置里面还有一个地方需要注意的是“修改远端基文件夹”这个选项，你可以每个终端都设置成不同的，也可以统一设置为一个文件夹，如果你是为了多终端同步，每个终端都要修改成一直的名称。全部设置完成之后，点击下面的检查按钮来确认webdav是否可以正常连接。</p>
<p><img src="https://img.ycyc.win/img/20240911151421.png" alt="image.png"></p>
<p>插件设置完成之后，左侧菜单栏会出现同步按钮，点击等待同步完成之后可以查看alist的相应文件内是否有同步的文件。<br>
<img src="https://img.ycyc.win/img/20240911151840.png" alt="image.png"><br>
在插件基本设置里面也可以设置自动同步时间间隔等等。<br>
<img src="https://img.ycyc.win/img/20240911152337.png" alt="image.png"></p>
<p>其他客户端的设置都类似，先搜索安装插件，然后进行webdav服务器配置即可。还有一种简便的方法就是在电脑端导出配置链接，然后再导入到其他客户端。<br>
<img src="https://img.ycyc.win/img/202409131050293.png" alt=""></p>
<p><img src="https://img.ycyc.win/img/202409131053216.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>obsidian</tag>
        <tag>alist</tag>
        <tag>同步</tag>
        <tag>webdav</tag>
      </tags>
  </entry>
  <entry>
    <title>测试使用Obsidian同步github</title>
    <url>/posts/45920.html</url>
    <content><![CDATA[<p>最近发现了一款使用体验不错的MarkDown编辑器，Obsidian。之前在电脑端一直使用微软的VScode来更新hexo和同步Github。试用了两天之后，感觉与vscode相比，obsidian轻量不少，启动和反应速度更快，界面更加适于写作。安装了三方插件之后，我觉得是可以取代vscode来作为日常hexo更新工具使用了。<br>
<img src="https://img.ycyc.win/img/20240911101502.png" alt="image.png"></p>
<p>目前我安装了三个插件，第一个是Templater，创建相应的模板之后可以直接在文章中调用，用于编辑文章的front-matter。这个插件设置比较简单，只要指定模板存放的文件夹，然后在该文件夹新建模板文件即可。使用的是由在界面左侧有快速插入按钮，选择相应模板即可。</p>
<span id="more"></span>
<p><img src="https://img.ycyc.win/img/20240911100636.png" alt="image.png"></p>
<p>第二个是Git插件，用于和Github同步，更新文章之后可以很方便的push和pull，可以设置每隔多长时间自动push，前提是你本地安装了git并且账户信息配置无误。<br>
<img src="https://img.ycyc.win/img/20240911134436.png" alt="image.png"></p>
<p>最后一个是Image auto upload plugin图片上传插件，与vscode不同的是这个插件需要配合picgo的桌面客户端来使用，而且需要客户端常驻后台。还有就是插件只支持剪切板粘贴上传，如果再加入一个浏览上传按钮就更好了。<br>
<img src="https://img.ycyc.win/img/20240911101056.png" alt="image.png"></p>
<p>大概看了一下，Obisdian不仅有丰富的插件库，还支持三方主题，另外付费用户还可以多终端同步文件项目。更多的功能静待以后慢慢探索分享。</p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>markdown</tag>
        <tag>obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>N1重装OPENWRT升级Homeassistant版本</title>
    <url>/posts/7119.html</url>
    <content><![CDATA[<p>现在我使用的HomeAssistant是用Docker跑在OPENWRT系统上的，目前版本是2021.12.5，之前尝试过直接拉取Dcoker镜像来升级，但是提示空间不足报错，后来就一直没有理他，运行了大半年还算稳定。今天打开HA官网看到最新版本已经更新到了2022.5.5版本了，所以是时候来一次升级操作了。<br>
本周末的任务就是升级我的HomeAssistant系统到最新的2022.5.5版本。<br>
如果不能直接升级，就只能备份现有的配置，然后删除容器，重新部署了。<br>
2022-5-22更新：<br>
今天抽时间试着做了更新操作，不出意外，还是由于空间不足，在拉取最新docker镜像的时候报错了。<br>
所以只能重新安装openwrt，然后再拉取镜像操作。<br>
下载了F大5月9日编译的最新openwrt固件，写入U盘镜像。<br>
<img src="https://img.ycyc.win/img/202205221452091.png" alt=""><br>
从U盘启动openwrt系统，执行命令将系统安装到N1的emmc上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /root   &amp;&amp;   ./install-to-emmc.sh</span><br></pre></td></tr></table></figure>
<p>将N1盒子用网线和电脑直连，电脑设置为192.168.1的网段，进入openwrt的WEB界面修改LAN口地址为你网络环境的网段，保存设置之后将设备接入你的网络中。<br>
<img src="https://img.ycyc.win/img/202205221452385.png" alt=""><br>
如果和我一样作为旁路由来使用，还需要关闭LAN口的DHCP功能。<br>
<img src="https://img.ycyc.win/img/202205221453148.png" alt=""><br>
用putty登录到openwrt系统，执行下面的命令来拉取镜像和运行容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull homeassistant/aarch64-homeassistant:latest</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -v /mnt/mmcblk2p4/docker/homeassisatant/config:/config -v /etc/localtime:/etc/localtime:ro --net=host homeassistant/aarch64-homeassistant:latest</span><br></pre></td></tr></table></figure>
<p>一切顺利的话，访问openwrt的地址:8123就会看到最新版本的HomeAssistant系统界面了<br>
<img src="https://img.ycyc.win/img/202205221453617.png" alt=""></p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>HomeAssistant</tag>
        <tag>docker</tag>
        <tag>智能家居</tag>
        <tag>N1</tag>
      </tags>
  </entry>
  <entry>
    <title>docker运行appdaemon容器创建UI触控界面</title>
    <url>/posts/41924.html</url>
    <content><![CDATA[<p>Appdaemon是一个可以让HomeAssistant界面更适合触控操作的三方UI面板，可以通过docker容器来运行。<br>
HA_URL字段是你的homeassistant地址，别忘了加端口号；<br>
TOKEN字段填入你的homeassistant长期访问令牌token；<br>
-v后面填入本地映射的appdaemon文件夹，需要提前创建好；<br>
访问端口使用默认的5050，当然你也可以改成其他。</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name=appdaemon -d -p 5050:5050 \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -e HA_URL=&quot;&lt;your HA_URL value&gt;&quot; \</span><br><span class="line">  -e TOKEN=&quot;&lt;your TOKEN value&gt;&quot; \</span><br><span class="line">  -e DASH_URL=&quot;http://$HOSTNAME:5050&quot; \</span><br><span class="line">  -v &lt;your_conf_folder&gt;:/conf \</span><br><span class="line">  acockburn/appdaemon:latest</span><br></pre></td></tr></table></figure>
<p>之后运行上面的命令就可以创建docker容器了。<br>
运行下面的命令查看docker容器运行日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs appdaemon </span><br></pre></td></tr></table></figure>
<p><img src="https://img.ycyc.win/img/20230215140309.png" alt="20230215140309"><br>
首次运行日志如果和上面显示的一样，则说明容器已经正常运行了。成功运行之后会在你映射的文件夹内自动生成默认配置文件，你可以编辑这些文件来打造属于你自己的控制界面。<br>
最后的效果可以访问ip:5050看到。<br>
<img src="https://img.ycyc.win/img/20230215111207.png" alt="20230215111207"><br>
其实这个面板的作用很简单，你可以在在家里面墙上镶嵌一个ipad之类的平板电脑，用浏览器打开这个界面，就可以得到一个界面优美的家庭智能控制中枢了。<br>
像这样:<br>
<img src="https://img.ycyc.win/img/20230215113057.png" alt="20230215113057"></p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>HomeAssistant</tag>
        <tag>docker</tag>
        <tag>appdaemon</tag>
        <tag>UI</tag>
      </tags>
  </entry>
  <entry>
    <title>使用openwrt的docker容器来运行mqtt服务</title>
    <url>/posts/64809.html</url>
    <content><![CDATA[<p>putty登录主机<br>
拉取镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull eclipse-mosquitto</span><br></pre></td></tr></table></figure>
<p>新建配置文件夹<br>
下面的文件夹路径根据你自己设备的实际情况做相应的更改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /mnt/mmcblk2p4/docker/mqtt/config</span><br><span class="line">mkdir -p /mnt/mmcblk2p4/docker/mqtt/data</span><br><span class="line">mkdir -p /mnt/mmcblk2p4/docker/mqtt/log</span><br></pre></td></tr></table></figure>
<p>新建配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /mnt/mmcblk2p4/docker/mqtt/config/mosquitto.conf</span><br></pre></td></tr></table></figure>
<p>复制下面的内容，然后保存。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">persistence true</span><br><span class="line">persistence_location /mosquitto/data</span><br><span class="line">log_dest file /mosquitto/log/mosquitto.log</span><br><span class="line">listener 1883</span><br><span class="line">allow_anonymous true</span><br></pre></td></tr></table></figure>
<p>文件夹赋予权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R 755 /mnt/mmcblk2p4/docker/mqtt</span><br><span class="line">chmod -R 777 /mnt/mmcblk2p4/docker/mqtt/log </span><br></pre></td></tr></table></figure>
<p>运行容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --name=mosquitto --privileged  -p 1883:1883 -p 9001:9001 -v /mnt/mmcblk2p4/docker/mqtt/config/mosquitto.conf:/mosquitto/config/mosquitto.conf  -v /mnt/mmcblk2p4/docker/mqtt/data:/mosquitto/data -v /mnt/mmcblk2p4/docker/mqtt/log:/mosquitto/log -d  eclipse-mosquitto </span><br></pre></td></tr></table></figure>
<p>目前可以使用IP加1883端口直接连接mqtt服务器，无需使用用户名密码登录。<br>
如果需要设置用户名密码，则需要在mosquitto.conf文件中将allow_anonymous true字段改成fasle，然后声明密码文件保存路径。详细配置参考下面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">persistence true</span><br><span class="line">persistence_location /mosquitto/data</span><br><span class="line">log_dest file /mosquitto/log/mosquitto.log</span><br><span class="line">listener 1883</span><br><span class="line">allow_anonymous false</span><br><span class="line">password_file /mosquitto/config/pwfile.conf</span><br></pre></td></tr></table></figure>
<p>找到容器的id并将下面命令行中的id字段进行替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps </span><br></pre></td></tr></table></figure>
<p>进入到容器中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it id sh </span><br></pre></td></tr></table></figure>
<p>运行下面的命令创建用户和密码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mosquitto_passwd /mosquitto/config/pwfile.conf mqtt</span><br></pre></td></tr></table></figure>
<p>完成之后ctrl+p ctrl+q保存退出。<br>
重启docker容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart id</span><br></pre></td></tr></table></figure>
<p>之后就可以使用设置的用户名和密码连接mqtt服务器了。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>HomeAssistant</tag>
        <tag>docker</tag>
        <tag>智能家居</tag>
        <tag>mqtt</tag>
      </tags>
  </entry>
  <entry>
    <title>华为AX3 WS7100路由器接入HomeAssistant</title>
    <url>/posts/65048.html</url>
    <content><![CDATA[<p>使用华为的AX3路由器已经快三年的时间了，一直没有适合的插件将其接入HomeAssistant当中，中间还用了一段时间的小米路由器。<br>
最近在github上闲逛的时候发现有大神已经开发出了相应的插件，接入到HA之后不仅可以实现device_tracker设备跟踪，还可以实现一键重启路由的功能。废话不多，直接放出作者的github地址<br>
<a href="https://github.com/vmakeev/huawei_mesh_router">https://github.com/vmakeev/huawei_mesh_router</a><br>
下载下来放到ha的custom_compents文件夹中，之后在界面中搜索Huawei Mesh Router即可进行配置。如果你装了HACS商店，在里面直接搜索安装更方便。<br>
<img src="https://img.ycyc.win/img/20230213103412.png" alt="20230213103412"><br>
填入路由器地址、密码即可完成配置，配置完成之后就可以看到相关设备实体了。<br>
<img src="https://img.ycyc.win/img/20230213103507.png" alt="20230213103507"><br>
下面是插件自带的可供使用的开关和传感器<br>
<img src="https://img.ycyc.win/img/20230213103600.png" alt="20230213103600"><br>
我用了一段时间，插件运行很稳定。如果你在使用中发现bug可以在作者的github主页提交issues。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>路由器</tag>
        <tag>HomeAssistant</tag>
        <tag>华为</tag>
      </tags>
  </entry>
  <entry>
    <title>多模网关升级最新版后接入homeassistant 出现telnet报错的解决方法</title>
    <url>/posts/7421.html</url>
    <content><![CDATA[<p>在用的小米多模网关2在升级到最新的v1.0.7_0019后，在homeassistant使用XiaomiGateway3接入时会有telnet_wrong的报错信息，导致接入网关的设备无法正常在homeassistant正常使用。原因是小米在最新的固件里封堵了telnet入口，导致插件无法正常获取到网关的key字段。</p>
<span id="more"></span>
<p>在插件作者的Github里面找到了暂时解决方法如下：<br>
如果你之前已经将网关接入过homeassistant，会在~/config/.storage/xiaomi_gateway3文件夹内生成一个key.json文件，该文件内存储着我们需要用到的key字段，将该字段复制出来。在homessistant前端按照之前的步骤添加网关，然后在下图的位置将key粘贴过来就可以完成接入了。<br>
<img src="https://img.ycyc.win/img/20231114151859.png" alt="20231114151859"><br>
还需要注意的是，需要将XiaomiGateway插件版本升级到最新的v3.3.4。<br>
Github插件主页：<a href="https://github.com/AlexxIT/XiaomiGateway3">https://github.com/AlexxIT/XiaomiGateway3</a></p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>HomeAssistant</tag>
        <tag>小米</tag>
        <tag>网关</tag>
      </tags>
  </entry>
  <entry>
    <title>解决HomeAssistant设置反向代理时出现400报错</title>
    <url>/posts/61463.html</url>
    <content><![CDATA[<p>之前在外网访问HomeAssistant的时候一直使用的是端口映射的方法，也就是把本地的8123直接映射到外网，然后通过ddns+端口的方式进行访问，一直都很正常。<br>
今天试着用Lucky中的反向代理方法进行了设置，其他诸如Alist、小雅等其他服务，用常规方法设置之后均能实现外网的访问，唯独在访问HomeAssistant的时候浏览器返回400: Bad Request错误。<br>
经查该报错是由于HomeAssistant默认是不允许在外网进行访问的，需要在configuration.yaml中进行单独配置才可以。<br>
将下面配置增加到到HomeAssistant配置文件夹的configuration.yaml文件中，记得将配置中的192.168.1.0换成你本地的网段。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">use_x_forwarded_for:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted_proxies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span><span class="string">/24</span></span><br></pre></td></tr></table></figure>
<p>然后重启HomeAssistant实例即可解决400报错问题。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>homeassistant</tag>
        <tag>反向代理</tag>
        <tag>lucky</tag>
      </tags>
  </entry>
  <entry>
    <title>HomeAssistant配置备份到OneDrive操作指引</title>
    <url>/posts/60784.html</url>
    <content><![CDATA[<p>进入HomeAssistant 设置-设备与服务，点击页面右下角的添加集成按钮，搜索onedrive，会出来Microsoft。<br>
<img src="https://img.ycyc.win/img/20250410100830526.png" alt="image.png"></p>
<p>然后在二级菜单中选择OneDrive跳转到登录和授权页面。</p>
<p><img src="https://img.ycyc.win/img/20250410100856978.png" alt="image.png"></p>
<span id="more"></span>
<p>授权完成，出现下图提示后可将页面关闭，返回到HomeAssistant继续操作。<br>
<img src="https://img.ycyc.win/img/20250410100918364.png" alt="image.png"><br>
然后进入设置-系统-备份。<br>
<img src="https://img.ycyc.win/img/20250410101107361.png" alt="image.png"><br>
下面开始设置备份。<br>
<img src="https://img.ycyc.win/img/20250410101134288.png" alt="image.png"><br>
首次设置会出现加密密钥，HomeAssistant默认的备份都是经过加密的，还原备份的时候需要输入此密钥进行二次认证，当然如果你不需要加密也可以在之后将其关闭。<br>
<img src="https://img.ycyc.win/img/20250410101205392.png" alt="image.png"><br>
默认使用推荐的自动备份即可。<br>
<img src="https://img.ycyc.win/img/20250410101223078.png" alt="image.png"><br>
在位置设置中将Onedrive开关打开。<br>
<img src="https://img.ycyc.win/img/20250410101301158.png" alt="image.png"><br>
如果你需要关闭加密，可以点击齿轮按钮将其关闭，这样以后还原配置的时候无需输入加密密钥，只要上传tar文件就可以。<br>
<img src="https://img.ycyc.win/img/20250410101330872.png" alt="image.png"><br>
OneDrive会将备份存放在应用文件夹下的HomeAssistant文件夹内。需要还原的时候可以从此位置下载到备份文件。<br>
HomeAssistant除了支持备份到OneDrive之外，还支持Google Drive，群晖NAS ，甚至还有WEBDAV协议的网盘。等有了时间研究下WEBDAV备份方式。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>homeassistant</tag>
        <tag>备份</tag>
        <tag>OneDrive</tag>
      </tags>
  </entry>
  <entry>
    <title>2018-10-27hassbian镜像下载</title>
    <url>/posts/33186.html</url>
    <content><![CDATA[<p>Homeassistant在2018年10月27日编译了最新的hassbian镜像，将镜像直接写入树莓派的TF卡即可自动安装Homeassistant，并支持hassbian-config脚本来安装其他组件，适合手头有树莓派的朋友快速安装Homeassistant系统。</p>
<p>该镜像有1.86GB，下载后无需解压，可用win32diskimager等软件直接将img文件写入TF卡，然后树莓派连接网线，通电启动，整个安装过程视网速而定，大约需要10-20分钟不等。如需设置WIFI等信息，可用Putty登入（默认用户为pi，密码为raspberry），然后执行sudo rasp-config来进行设置。</p>
<p>Github下载地址：<a href="https://github.com/home-assistant/pi-gen/releases/latest">https://github.com/home-assistant/pi-gen/releases/latest</a></p>
<p>稍后我会将镜像上传到百度盘，方便国内朋友下载。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
        <tag>hassbian</tag>
        <tag>LINUX</tag>
        <tag>安装</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>Hassbian-scrpits脚本的安装和应用</title>
    <url>/posts/53352.html</url>
    <content><![CDATA[<p>最新的Hassbian镜像会集成hassbian-scripts脚本服务，使用该脚本可以方便的安装、升级homeassistant的各项服务。</p>
<p>我们先来升级一下</p>
<pre><code>sudo hassbian-config upgrade hassbian-script
</code></pre>
<p><img src="https://img.ycyc.win/img/202411021315358.png" alt="TIM截图20180131113607.png"></p>
<p>输入下面的命令可以看到当前可用的hassbian-scrpits脚本命令</p>
<pre><code>sudo hassbian-config show
</code></pre>
<p><img src="https://img.ycyc.win/img/202411021315316.png" alt="TIM截图20180131113643.png"></p>
<p>如果我们要安装samba服务，只需要输入</p>
<pre><code>sudo hassbian-config install samba
</code></pre>
<p>即可一键完成samba的服务。</p>
<p>如果我们要升级Home-Assistant的版本，只需输入</p>
<pre><code>sudo hassbian-config upgrade home-assistant
</code></pre>
<p>即可一键完成Home-Assistant的升级。</p>
<p>更多的使用方法请参阅Hassbian-scripts GitHub项目地址：<a href="https://github.com/home-assistant/hassbian-scripts">https://github.com/home-assistant/hassbian-scripts</a></p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>HomeAssistant0.83版本中小米无线开关等设备无法使用解决办法</title>
    <url>/posts/40252.html</url>
    <content><![CDATA[<p>在最新的HomeAssistant0.83版本中，对小米无线开关、Aqara墙壁无线开关及魔方的自动化触发语句做了修改，大家可以按照下面的示例来进行相应的修改。</p>
<p>小米无线开关</p>
<pre><code>- alias: Toggle dining light on single press
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.switch_158d000xxxxxc2
      click_type: single
  action:
    service: switch.toggle
    entity_id: switch.wall_switch_left_158d000xxxxx01
- alias: Toggle couch light on double click
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.switch_158d000xxxxxc2
      click_type: double
  action:
    service: switch.toggle
    entity_id: switch.wall_switch_right_158d000xxxxx01
- alias: Let a dog bark on long press
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.switch_158d000xxxxxc2
      click_type: long_click_press
  action:
    service: xiaomi_aqara.play_ringtone
    data:
      gw_mac: xxxxxxxxxxxx
      ringtone_id: 8
      ringtone_vol: 8
</code></pre>
<p>Aqara墙壁无线开关</p>
<pre><code>- alias: Decrease brightness of the gateway light
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.wall_switch_left_158xxxxxxxxx12
      click_type: single
  action:
    service: light.turn_on
    entity_id: light.gateway_light_34xxxxxxxx13
    data_template:
      brightness: &gt;-
        &#123;% if states.light.gateway_light_34xxxxxxxx13.attributes.brightness %&#125;
              &#123;% if states.light.gateway_light_34xxxxxxxx13.attributes.brightness - 60 >= 10 %&#125;
                &#123;&#123;states.light.gateway_light_34xxxxxxxx13.attributes.brightness - 60&#125;&#125;
              &#123;% else %&#125;
                &#123;&#123;states.light.gateway_light_34xxxxxxxx13.attributes.brightness&#125;&#125;
              &#123;% endif %&#125;
        &#123;% else %&#125;
          10
        &#123;% endif %&#125;

- alias: Increase brightness of the gateway light
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.wall_switch_right_158xxxxxxxxx12
      click_type: single
  action:
    service: light.turn_on
    entity_id: light.gateway_light_34xxxxxxxx13
    data_template:
      brightness: &gt;-
        &#123;% if states.light.gateway_light_34xxxxxxxx13.attributes.brightness %&#125;
              &#123;% if states.light.gateway_light_34xxxxxxxx13.attributes.brightness + 60 <= 255 %&#125;
                &#123;&#123;states.light.gateway_light_34xxxxxxxx13.attributes.brightness + 60&#125;&#125;
              &#123;% else %&#125;
                &#123;&#123;states.light.gateway_light_34xxxxxxxx13.attributes.brightness&#125;&#125;
              &#123;% endif %&#125;
        &#123;% else %&#125;
          10
        &#123;% endif %&#125;

- alias: Turn off the gateway light
  trigger:
    platform: event
    event_type: xiaomi_aqara.click
    event_data:
      entity_id: binary_sensor.wall_switch_both_158xxxxxxxxx12
      click_type: both
  action:
    service: light.turn_off
    entity_id: light.gateway_light_34xxxxxxxx13
</code></pre>
<p>小米魔方</p>
<pre><code>- alias: Cube event flip90
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_15xxxxxxxxxxxx
      action_type: flip90
  action:
    - service: light.turn_on
      entity_id: light.gateway_light_28xxxxxxxxxx
      data:
        color_name: &quot;springgreen&quot;
- alias: Cube event flip180
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_15xxxxxxxxxxxx
      action_type: flip180
  action:
    - service: light.turn_on
      entity_id: light.gateway_light_28xxxxxxxxxx
      data:
        color_name: &quot;darkviolet&quot;
- alias: Cube event move
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_15xxxxxxxxxxxx
      action_type: move
  action:
    - service: light.turn_on
      entity_id: light.gateway_light_28xxxxxxxxxx
      data:
        color_name: &quot;gold&quot;
- alias: Cube event tap_twice
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_15xxxxxxxxxxxx
      action_type: tap_twice
  action:
    - service: light.turn_on
      entity_id: light.gateway_light_28xxxxxxxxxx
      data:
        color_name: &quot;deepskyblue&quot;
- alias: Cube event shake_air
  trigger:
    platform: event
    event_type: xiaomi_aqara.cube_action
    event_data:
      entity_id: binary_sensor.cube_15xxxxxxxxxxxx
      action_type: shake_air
  action:
    - service: light.turn_on
      entity_id: light.gateway_light_28xxxxxxxxxx
      data:
        color_name: &quot;blue&quot;
</code></pre>
<p>Aqara震动传感器</p>
<pre><code>- alias: Turn on Living Room Lamp on vibration
  trigger:
    platform: event
    event_type: xiaomi_aqara.movement
    event_data:
      entity_id: binary_sensor.vibration_xxxx000000
      movement_type: vibrate
  action:
    service: light.toggle
    data:
      entity_id: light.living_room_lamp
- alias: Turn on Living Room Lamp on tilt
  trigger:
    platform: event
    event_type: xiaomi_aqara.movement
    event_data:
      entity_id: binary_sensor.vibration_xxxx000000
      movement_type: tilt
  action:
    service: light.toggle
    data:
      entity_id: light.living_room_lamp
</code></pre>
<p> </p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
        <tag>小米</tag>
        <tag>homeassistant</tag>
        <tag>aqara</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>HomeAssistant0.84版本的Lovelace又更新了</title>
    <url>/posts/45210.html</url>
    <content><![CDATA[<p>没错，最新版的HomeAssistant0.84版本中再次更新了Lovelace的配置方式，如果你之前配置并使用过Lovelace模式，下面我将演示一下如何在0.84版本中导入之前的Lovelace配置并启用全新的&quot;半可视化&quot;Lovelace配置模式。</p>
<p>请确保你的HomeAssistant已经升级到了0.84版本以上，确保你的配置文件夹根目录下有之前配置过的lovelace.yaml文件。</p>
<p>切换到Lovelace模式下，在右上角的下拉菜单中选中&quot;配置UI&quot;，然后在弹出的对话框中选择&quot;自己配置&quot;。</p>
<p><img src="https://img.ycyc.win/img/202411021316877.jpg" alt="TIM截图20181228094315.jpg"></p>
<p>接着我们能在之前的下拉菜单中找到&quot;Raw config editor&quot;</p>
<p><img src="https://img.ycyc.win/img/202411021316231.jpg" alt="TIM截图20181228094129.jpg"></p>
<p>然后我们把之前配置过的lovelace.yaml文件中的所有内容复制到当前页面，并在右上角点&quot;SAVE&quot;保存。</p>
<p><img src="https://img.ycyc.win/img/202411021316829.jpg" alt="TIM截图20181228094047.jpg"></p>
<p>现在我们已经把之前配置过的Lovelace导入到新版本中了。</p>
<p>这样你可以再次点击&quot;配置UI&quot;来使用全新的可视化模式来配置Lovelace界面了。</p>
<p>如果你还是喜欢用yaml文件的方式来配置Lovelace界面，只需要将下面的字段插入到主配置文件中。</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>lovelace:
  mode: yaml
</code></pre>
<!-- /wp:code -->
<!-- wp:paragraph -->
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>HomeAssistant利用WOL及shell_command添加群晖NAS开关无坑版</title>
    <url>/posts/27341.html</url>
    <content><![CDATA[<p>记过了近两天的各种尝试，终于搞定了群晖NAS在HomeAssistant的开关机操作，废话不多说，直接切入正题。</p>
<p>先说一下我这边的设备。</p>
<p>树莓派安装hassbian镜像运行HomeAssistant。</p>
<p>X86架构的黑群晖一台，内网IP为192.168.1.111。</p>
<p>我在HomeAssistant中用到的是WOL组件，利用网卡的MAC地址来唤醒NAS。首先将群晖的MAC地址和IP地址在路由器中进行绑定操作，并记录下MAC及IP地址。</p>
<p>然后在HomeAssistant系统中添加WOL组件。</p>
<pre><code>- platform: wake_on_lan
  mac_address: &quot;B8-97-5A-F5-5B-CA&quot; ####群晖的实际MAC地址####
  host: 192.168.1.111  ####群晖在内网中的IP地址####
  name: MY-NAS   ####给这个开关起个名字####
  turn_off:
    service: shell_command.nasoff
</code></pre>
<p>重点来了，看到turn_off命令了吗？这里用到的是shell_command组件，所以我们需要添加一个shell_command脚本，直接在configuration.yaml中添加就可以。</p>
<pre><code>shell_command:
  nasoff: &quot;ssh root@192.168.1.111 'shutdown -h now'&quot;  ####将这里的IP替换为你群晖的IP####
</code></pre>
<p>接下来，我们用putty登录到NAS，修改下root用户的密码，步骤可以参考我的上一篇文章。</p>
<pre><code>https://miaoyang.win/%E7%BE%A4%E6%99%96dsm%E8%8E%B7%E5%8F%96root%E5%AF%86%E7%A0%81%E7%9A%84%E6%96%B9%E6%B3%95.html
</code></pre>
<p>之后我们用putty登录到树莓派，运行下面的命令，切换到homeassistant用户。</p>
<pre><code>sudo su -s /bin/bash homeassistant

cd
</code></pre>
<p>此时请确保你的NAS是开机状态。</p>
<pre><code>ssh-keygen

ssh-copy-id root@192.168.1.111
</code></pre>
<p>接着按照提示输入群晖NAS的root账户及密码，然后创建rsa秘钥，rsa生成之后我们就可以直接用 ssh <a href="mailto:root@192.168.1.111">root@192.168.1.111</a> 这个命令来登录群晖NAS了，不用再输入密码。</p>
<p>最后我们重启一下树莓派就可以了。</p>
<p>NAS开关机的状态反馈会有30秒左右，在界面里面点了开关之后不要着急，等30s左右系统就会接收到返回的状态。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>智能家居</tag>
        <tag>home</tag>
        <tag>Synology群晖</tag>
        <tag>synology群晖</tag>
        <tag>WOL</tag>
      </tags>
  </entry>
  <entry>
    <title>HomeAssistant基础设置笔记</title>
    <url>/posts/36865.html</url>
    <content><![CDATA[<p>现在，HomeAssistant系统虽然已经安装完成，但我们还需进行一些基础的设置，才能正常使用。</p>
<p>我们以下的操作，如无特殊说明，均在Windows10 X64操作系统下完成。</p>
<p>我们在之后的操作中会经常用到三个软件，请下载安装：</p>
<ol>
<li>PUTTY：用于远程登录主机，运行操作命令；</li>
<li>WINSCP：用于远程登录主机，对文件进行操作；</li>
<li>Notepad++：用于编辑.yaml等文本文件。<br>
首先，我们打开PUTTY软件，在Hostname处输入主机的ip地址，端口保持22不变，连接类型选择SSH，然后点击OPEN。<br>
<img src="https://img.ycyc.win/img/202411021317104.png" alt="TIM截图20180131083738.png"></li>
</ol>
<p>在弹出的终端窗口中我们用树莓派默认的用户名（pi）和密码（raspberry），然后回车来登录主机，注意输入密码的时候界面不会显示。</p>
<p><img src="https://img.ycyc.win/img/202411021317929.png" alt="TIM截图20180131083840.png"></p>
<p>登录成功之后会出现如下界面，如果登录失败，请检查输入的用户名和密码是否有误。</p>
<p><img src="https://img.ycyc.win/img/202411021318905.png" alt="TIM截图20180131112150.png"></p>
<p>我们可以运行以下命令来设置树莓派的网络、时区、输入输出设备等，类似于WINDOWS下的控制面板。</p>
<pre><code>sudo raspi-config
</code></pre>
<p><img src="https://img.ycyc.win/img/202411021318880.png" alt="TIM截图20180131112237.png"></p>
<p>我们先来修改时区，依次进入Localisation Options-Change Timezone，选择Asia-Chongqing。</p>
<p><img src="https://img.ycyc.win/img/202411021318253.png" alt="TIM截图20180131112628.png"></p>
<p>当然如果只是修改时区的话，直接输入</p>
<pre><code>sudo dpkg-reconfigure tzdata
</code></pre>
<p>即可直接进入。</p>
<p> </p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
        <tag>putty</tag>
        <tag>winscp</tag>
      </tags>
  </entry>
  <entry>
    <title>docker环境中安装mqtt服务器</title>
    <url>/posts/64780.html</url>
    <content><![CDATA[<p>和上次一样，用putty登录NAS。</p>
<pre><code>sudo -i
</code></pre>
<p>切换到root账户，然后拉取mqtt镜像</p>
<pre><code>docker pull cb59j9ia.mirror.aliyuncs.com/ncarlier/mqtt
</code></pre>
<p>然后进入docker中的映像，选择刚刚下载好的mqtt映像，点击启动。</p>
<p><img src="https://img.ycyc.win/img/202411021312276.png" alt="TIM截图20180422215859.png"></p>
<p>容器名称随便写。<br>
<img src="https://img.ycyc.win/img/202411021312067.png" alt="TIM截图20180422214120.png"></p>
<p>在弹出的窗口中选择&quot;高级选项&quot;，然后选择&quot;网络&quot;，在&quot;使用与docker host相同的网络&quot;前打钩，</p>
<p><img src="https://img.ycyc.win/img/202411021313510.png" alt="TIM截图20180422214341.png"></p>
<p>之后切换到&quot;环境&quot;选项卡，添加两个变量：</p>
<p>可变：<span style="color: #ff0000;">PATH</span>    值：<span style="color: #ff0000;">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br>
可变：<span style="color: #ff0000;">DEBIAN_FRONTEND</span>    值：<span style="color: #ff0000;">noninteractive </span></p>
<p><img src="https://img.ycyc.win/img/202411021313247.png" alt="TIM截图20180422214711.png"></p>
<p>之后点击应用，一路完成。</p>
<p>接着我们来创建mqtt的用户名和密码。</p>
<p>转到容器选项卡，并启动刚创建的容器，切换到&quot;终端机&quot;。</p>
<p>如下图所示，新建一个命令。</p>
<p><img src="https://img.ycyc.win/img/202411021313069.png" alt="TIM截图20180422215103.png"></p>
<p>然后输入mosquitto_passwd -c pwfile.example pi （此处将pi改为你想创建的用户名）<br>
<img src="https://img.ycyc.win/img/202411021314619.png" alt="TIM截图20180422215153.png"></p>
<p>点击确认之后，在左边切换到mosquitto_passwd，输入两次密码。</p>
<p><img src="https://img.ycyc.win/img/202411021314598.png" alt="TIM截图20180422215242.png"></p>
<p>这样，我们就创建了一个名为pi的mqtt用户，并为其设置了密码。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>智能家居</tag>
        <tag>mqtt</tag>
        <tag>Synology群晖</tag>
        <tag>synology群晖</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>homeassistant报404错误手动安装 frontend组件</title>
    <url>/posts/49575.html</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>昨天将HomeAssistant升级到最新的0.89.2版本之后，网页页面打不开，提示404错误，查看log日志发现有如下报错信息：</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>019-03-14 21:54:55 ERROR (SyncWorker_13) [homeassistant.util.package] Unable to install package home-assistant-frontend==20190305.1: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ProtocolError('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))': /packages/bc/99/d91230141eb6838f9daa18e04bcbc206a40c8c14bb2edde7f75ba264f4b5/home-assistant-frontend-20190305.1.tar.gz
</code></pre>
<!-- /wp:code -->
<!-- wp:paragraph -->
<p>主要报错信息是Unable to install package home-assistant-frontend==20190305.1，也就是无法安装版本为20190305.1的home-assistant-frontend组件，解决办法就是手动安装。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>Putty登陆到你的Hass主机，然后依次运行以下命令：</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>sudo su -s /bin/bash homeassistant
source /srv/homeassistant/bin/activate
pip3 install  home-assistant-frontend==20191025.1
等到安装完之后之后
exit
</code></pre>
<!-- /wp:code -->
<!-- wp:paragraph -->
<p>** 目前最新的frontend版本为20191025.1 ，所以这里我们安装最新版。**</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>最后重启homeassistant就可以了。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>如果系统log中有其他缺失组件的报错，也可以用此方法来试着修复，但此方法只适用于基于命令安装的home-assistant，不适用于hassio等其他系统。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>homeassistant</tag>
        <tag>LINUX</tag>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>【3-21更新】Padavan路由器使用HomeAssistant自带的Asuswrt组件来追踪设备</title>
    <url>/posts/38617.html</url>
    <content><![CDATA[<p>想要将Padavan固件的路由器接入HomeAssistant系统中用来追踪设备，除了使用第三方插件还能怎么办？HomeAssistant官方给出了解决办法，只需要路由器上稍作修改，即可使用HA官方的ASUSWRT组件。话不多说，跟我一起来做吧。</p>
<p>首先确保路由器打开了SSH功能，高级设置—系统管理–服务–启用SSH服务。</p>
<p><img src="https://img.ycyc.win/img/202411021305982.jpg" alt="ss.jpg"></p>
<p>接下来我们用Putty登陆路由器来进行操作，登陆地址就是你的路由器地址，端口默认是22，用户名和密码就是你登陆路由器管理界面的用户名和密码。</p>
<p>登陆成功之后依次运行以下命令行：</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>find / -name &quot;dnsmasq.leases&quot;
####寻找dnsmasq.leases文件的位置，并记录下来####
mkdir -p /var/lib/misc
####创建目录####
echo &quot;/bin/ln -s /tmp/dnsmasq.leases /var/lib/misc/dnsmasq.leases&quot; &gt;&gt; /etc/storage/started_script.sh
####将脚本添加到启动项（将路径/tmp/dnsmasq.leases替换为第一步找到的路径）####
/bin/ln -s /tmp/dnsmasq.leases /var/lib/misc/dnsmasq.leases
####将dnsmasq.leases文件进行位置链接（将路径/tmp/dnsmasq.leases替换为第一步找到的路径）####
</code></pre>
<p><img src="https://img.ycyc.win/img/202411021305190.png" alt="TIM截图20190314105322.png"></p>
<p>完成以上设置之后，我们前往HomeAssistant的主配置文件<br>
configuration.yaml 中添加以下代码：</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>asuswrt:
  host: ####路由器IP地址####
  username: ####路由器登陆名####
  password: ####路由器登陆密码####
</code></pre>
<!-- /wp:code -->
<!-- wp:paragraph -->
<p>添加完之后就大功告成了，更详细的配置说明请查阅HomeAssistant官网<a href="https://www.home-assistant.io/components/asuswrt/">https://www.home-assistant.io/components/asuswrt/</a></p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>3/21更新：</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>asuswrt插件下的sensor无法获取到数值，我在正文中已经删除；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>另外因为asuswrt没有了 track_new_device参数，所以加入WIFI的新设备会自动被追踪，目前的解决方法是将下面的代码直接添加到configuration.yaml文件中。</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>device_tracker:
  - platform: asuswrt
    consider_home: 180
    new_device_defaults:
      track_new_devices: false
      hide_if_away: false
</code></pre>
<!-- /wp:code -->]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
        <tag>homeassistant</tag>
        <tag>device_tracker</tag>
        <tag>padavan</tag>
      </tags>
  </entry>
  <entry>
    <title>【3-29更新】如何将鸿雁8340插排接入HomeAssistant</title>
    <url>/posts/6049.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/202411021306648.jpg" alt="timg-1-1.jpg"></p>
<p>鸿雁的8340系列插排（包括8340B及8340J）是一款WIFI四孔位智能插排，有一个实体按键，可控制总开总关。使用APP绑定之后四个孔位可以独立控制开关。</p>
<p>将其接入HomeAssistant系统之后，不仅可以分控四个孔位，还可以实现更多的自动化。话不多说，一起跟我来设置。</p>
<p>首先请确保插排已根据说明接入到了WIFI，并记录下插排的IP地址及MAC地址备用。</p>
<p><del>由于官方暂时没有收录该插排，我们需要手动上传插件，将broadlink_mp1.py上传到HomeAssistant配置文件夹下的/cutom_components/switch目录下。如果没有请手动创建。</del></p>
<p><del>截止我们在configuration.yaml文件中加入以下配置文件</del></p>
<pre class="pure-highlightjs"><del>`switch:
  - platform: broadlink_mp1  ####不可更改####
    host: 192.168.1.195  ####插排的IP地址####
    mac: '34:EA:34:C7:19:15'   ####插排的MAC地址####
    friendly_name: "Broadlink MP1"   ####填写你喜欢的名字####
    alias:
      s1: device1   ####给每一个插孔起个名字####
      s2: device2
      s3: device3
      s4: device4 `</del></pre>
<p><del>添加完成之后重启系统即可。</del></p>
<p><del><img src="TIM%E6%88%AA%E5%9B%BE20180202135943.png" alt=""></del></p>
<p><del>插件下载地址：</del></p>
<!-- wp:paragraph -->
<p>目前官方已正式支持该设备，直接在configuration.yaml添加以下字段即可。</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>switch:
  - platform: broadlink
    host: !secret hongyan1
    mac: '34:EA:34:C7:19:15'
    type: mp1
    friendly_name: &quot;Broadlink MP1&quot;
    slots:
      slot_1: 'device1'
      slot_2: 'device2'
      slot_3: 'device3'
      slot_4: 'device4' 
</code></pre>
<!-- /wp:code -->]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
        <tag>插排</tag>
        <tag>鸿雁</tag>
      </tags>
  </entry>
  <entry>
    <title>使用include语句重建HomeAssistant结构</title>
    <url>/posts/5098.html</url>
    <content><![CDATA[<p>添加的设备越来越多，configuration.yaml文件越来越长，而且修改和查找起来起来很不方便，肿么办？</p>
<p>我们可以使用include语句来将不同类型的设备分成单独的yaml文件，方法很简单，在configuration.yaml文件夹添加</p>
<pre><code>switch: !include switch.yaml
</code></pre>
<p>然后在配置文件夹新建一个switch.yaml文件，即可将switch类型独立成一个单独的yaml文件。</p>
<p>同理，我们也可以将常用的sensor、device_tracker、media_player、light、automation等类型统统分开，类似这样</p>
<pre><code>###配置指向###
group: !include groups.yaml
automation: !include automations.yaml
switch: !include switch.yaml
binary_sensor: !include binary.yaml
sensor: !include sensors.yaml
light: !include lights.yaml
device_tracker: !include device_trackers.yaml
input_select: !include input_select.yaml
input_boolean: !include input_boolean.yaml
media_player: !include media_player.yaml
</code></pre>
<p>独立之后的yaml文件配置代码直接以platform开头即可，类似这样</p>
<pre><code>- platform: broadlink
  host: xx.xx.xx.xx
  mac: 'xx:xx:xx:xx:xx'
  type: spmini2
  friendly_name: 'spmini' 
</code></pre>
<p>不必再声明类型。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>在orange pi上安装homeassistant</title>
    <url>/posts/26009.html</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>我使用的是orange pi zero 512M的版本，其他版本的orange pi 类似。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>首先前往armbian网站下载最新版的Debian_stretch镜像并写入TF卡，将机器接入网线然后通电开机。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>登录路由器或手机下载Fing软件，找到orange pi的IP地址，然后用Putty登录root账户，默认密码是1234。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>首次登录系统会要求修改root密码以及创建一个新用户（下面以pi用户名为例进行演示），我们根据提示进行操作就可以了。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>接下来我们输入armbian-config命令来进行连接WIFI，修改时区，修改网络名称，禁用IPV6等操作，根据菜单提示一步一步进行即可。设置完之后我们reboot一次机器。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>等机器重启完之后我们用root登录，然后进行以下操作：</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>apt update
apt upgrade -y
apt install sudo net-tools -y
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>将我们创建的用户加入到sudo组</p>
<pre><code>nano /etc/sudoers
</code></pre>
<p>将pi ALL=NOPASSWD: ALL插入到相应位置。</p>
<p>然后我们切换到之前创建的pi用户来进行下面的操作</p>
<pre><code>su pi
sudo apt install wget screen git curl -y
sudo wget https://github.com/home-assistant/hassbian-scripts/releases/download/v0.6/hassbian-scripts_0.6.deb
sudo apt install bluetooth avahi-daemon python3-venv  python3-pip python3-dev libbluetooth-dev build-essential libssl-dev libffi-dev  python-dev libudev-dev -y
sudo dpkg -i  hassbian-scripts_0.6.deb;
sudo hassbian-config show;
sudo mv /opt/hassbian/suites/install_homeassistant.sh /opt/hassbian/suites/install_homeassistant.sh.bak
sudo nano /opt/hassbian/suites/install_homeassistant.sh
</code></pre>
<p>然后复制以下内容并保存退出：</p>
<pre><code>#!/bin/bash
function homeassistant-show-short-info {
    echo &quot;Home Assistant install script for Hassbian&quot;
}
function homeassistant-show-long-info {
    echo &quot;Installs the base homeassistant package onto this system.&quot;
}
function homeassistant-show-copyright-info {
    echo &quot;Copyright(c) 2017 Fredrik Lindqvist &lt;https://github.com/Landrash&gt;&quot;;
}
function homeassistant-install-package {
homeassistant-show-short-info
homeassistant-show-copyright-info
echo &quot;Changing to the homeassistant user&quot;
sudo adduser --system homeassistant
sudo addgroup homeassistant
sudo chown -R homeassistant:homeassistant /srv/homeassistant
sudo su -s /bin/bash homeassistant
echo &quot;Creating Home Assistant venv&quot;
python3 -m venv /srv/homeassistant
echo &quot;Changing to Home Assistant venv&quot;
source /srv/homeassistant/bin/activate
echo &quot;Installing latest version of Home Assistant&quot;
pip3 install pip==18.1 netdisco setuptools wheel
pip3 install homeassistant
echo &quot;Deactivating virtualenv&quot;
deactivate
EOF
echo &quot;Enabling Home Assistant service&quot;
systemctl enable home-assistant@homeassistant.service
sync
echo &quot;Disabling the Home Assistant install script&quot;
systemctl disable install_homeassistant
systemctl daemon-reload
echo &quot;Starting Home Assistant&quot;
systemctl start home-assistant@homeassistant.service
cd
ip_address=$(ifconfig ' awk -F':' '/inet addr/&amp;&amp;!/127.0.0.1/{split($2,_,&quot; &quot;);print _[1]}')
echo
echo &quot;Installation done.&quot;
echo
echo &quot;Your Home Assistant installation is running at $ip_address:8123 or if prefered http://hassbian.local:8123&quot;;
echo
echo &quot;To continue have a look at https://home-assistant.io/getting-started/configuration/&quot;;
echo
echo &quot;If this script failed then this Raspberry Pi most likely did not have a fully functioning internet connection.&quot;
echo &quot;If you have issues with this script, please say something in the #Hassbian channel on Discord.&quot;
echo
return 0
}
# Make this script function as it always has if run standalone, rather than issue a warning and do nothing.
[[ $0 == &quot;$BASH_SOURCE&quot; ]] &amp;&amp; homeassistant-install-package
</code></pre>
<p>接下来运行</p>
<pre><code>sudo hassbian-config install homeassistant
</code></pre>
<p>等停止之后输入</p>
<pre><code>exit
</code></pre>
<p>安装会继续进行。</p>
<p>等到安装结束之后运行下面命令：</p>
<pre><code>sudo chown -R homeassistant:homeassistant /srv/homeassistant;
sudo systemctl stop home-assistant@homeassistant.service;
sudo su -s /bin/bash homeassistant;
source /srv/homeassistant/bin/activate;
hass
</code></pre>
<p>直到我们能正常打开orange pi ip:8123看到网页，整个安装过程结束。</p>
<p>之后我们可以使用sudo hassbian-config show来安装samba、mqtt等服务。</p>
<p> </p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
        <tag>homeassistant</tag>
        <tag>LINUX</tag>
        <tag>orangepi</tag>
      </tags>
  </entry>
  <entry>
    <title>在群晖NAS的Docker下安装appdaemon</title>
    <url>/posts/5754.html</url>
    <content><![CDATA[<p>Appdaemon是用来干嘛的？</p>
<p>appdaemon是用python编写并在其环境下运行的一套程序。</p>
<p>HAdashboard和Appdaemon是什么关系？</p>
<p>HAdashboard是一种图形界面化的程序，是appdaemon下的一个子系统。想要安装HAdashboard必须先安装Appdaemon，然后在Appdaemon下再安装HAdashboard。</p>
<p><img src="https://img.ycyc.win/img/202411021309125.png" alt=""><br>
用putty登录NAS，并切换到root权限</p>
<pre><code>sudo -i
</code></pre>
<p>从阿里云拉取appdaemon镜像</p>
<pre><code>docker pull cb59j9ia.mirror.aliyuncs.com/acockburn/appdaemon
</code></pre>
<p>打开FileStation，在docker目录下新建一个名为&quot;appdaemon&quot;的文件夹，然后在appdaemon文件夹下新建</p>
<div align="left">compiled/Javascript 及compiled/css 文件夹。</div>
<div align="left">![](TIM截图20180424093953.png)</div>
回到docker中的映像，启动刚刚获取到的appdaemon镜像，然后点击高级设置。
<p><img src="https://img.ycyc.win/img/202411021309248.png" alt="TIM截图20180424093813.png"></p>
<p>切换到&quot;卷&quot;选项卡，添加文件夹，输入  docker/appdaemon，对应的装载路径输入/conf。</p>
<p><img src="https://img.ycyc.win/img/202411021310196.png" alt="TIM截图20180424110151.png"></p>
<p>然后切换到&quot;网络&quot;选项卡，选择&quot;使用与docker host 相同的网络&quot;。</p>
<p><img src="https://img.ycyc.win/img/202411021310175.png" alt="TIM截图20180424094229.png"></p>
<p>最后切换到&quot;环境&quot;选项卡，添加如下变量：</p>
<p>1.可变：HA_URL    值： <a href="http://nasip:8123">http://nasip:8123</a>  # homeassistant的地址。</p>
<p>2.可变：HA_KEY  值：password  #homeassistant的登陆密码。</p>
<p>3.可变：DASH_URL 值： <a href="http://nasip:5050">http://nasip:5050</a> #appdaemon的登陆的网址。</p>
<p>4.可变：DASH_PASSWORD  值：password  #登录appdaemon的密码，可以不设置。</p>
<p><img src="https://img.ycyc.win/img/202411021310449.png" alt="TIM截图20180424094456.png"></p>
<p> </p>
<p>设置完成之后启动容器。</p>
<p>查看容器的运行日志，如果出现下图字样，说明appdaemon已经安装完成。</p>
<p><img src="https://img.ycyc.win/img/202411021311834.png" alt="TIM截图20180424105908.png"></p>
<p>我们输入http://nasip:5050就能看到appdaemon的界面了。</p>
<p><img src="https://img.ycyc.win/img/202411021311413.png" alt="TIM截图20180426095025.png"></p>
<p>如果打不开网页，请检查一下docker/appdaemon/appdaemon.yaml文件，是否有</p>
<pre><code>hadashboard:
  dash_url: http://nasip:5050
</code></pre>
<p>如果没有请添加后重启容器。</p>
<p><strong><span style="color: #ff0000;">注意：HA的密码要设置的复杂一点，不能纯数字，否则会报错！！！</span></strong></p>
<p>appdaemon的详细使用和设置，请参考网站<a href="http://appdaemon.readthedocs.io/en/latest/index.html">http://appdaemon.readthedocs.io/en/latest/index.html</a></p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>智能家居</tag>
        <tag>appdaemon</tag>
        <tag>homeassistant</tag>
        <tag>Synology群晖</tag>
        <tag>synology群晖</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>在群晖NAS中用docker安装homeassistant</title>
    <url>/posts/54954.html</url>
    <content><![CDATA[<p>首先在群晖套件中心安装Docker应用并打开，打开FileStation，在docker文件夹中新建一个名为&quot;home-assistant&quot;的文件夹。</p>
<p>然后进入DSM的控制面板，选择&quot;终端机和SNMP&quot;，然后启动Telnet和SSH。</p>
<p>接下来我们去阿里云来获取docker加速地址，我获取到的地址是<a href="https://cb59j9ia.mirror.aliyuncs.com">https://cb59j9ia.mirror.aliyuncs.com</a>。</p>
<p>接着我们用putty软件登录到NAS，用户名为admin，密码为admin的登录密码，然后依次运行以下命令：</p>
<pre><code>sudo -i
</code></pre>
<p>输入密码切换到root权限；</p>
<pre><code>docker pull cb59j9ia.mirror.aliyuncs.com/homeassistant/home-assistant
</code></pre>
<p>拉取homeassistant的docker镜像；</p>
<p>等到下载完成之后运行</p>
<pre><code>docker run -d --name=&quot;home-assistant&quot; -v /volume1/docker/home-assistant:/config -v /etc/localtime:/etc/localtime:ro --net=host homeassistant/home-assistant
</code></pre>
<p>注意将命令中的volume1替换为你实际的地址；</p>
<p>等到命令执行完之后，我们打开http://nasip:8123就可以看到homeassistant的界面了，至此，homeassistant在docker中已安装完成。</p>
<p>如何配置homeassistant呢？我们可以通过网上邻居，打开NAS中docker目录下的home-assistant文件夹来配置。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>智能家居</tag>
        <tag>homeassistant</tag>
        <tag>Synology群晖</tag>
        <tag>synology群晖</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>小米米家设备接入HomeAssistant</title>
    <url>/posts/28746.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/202411021308093.png" alt="TIM截图20180202134007.png"></p>
<p>小米的HA插件已被官方正式收录，现在只要在configuration.yaml文件中直接添加配置即可完成小米米家设备的接入。</p>
<p>如果局域网中只有一个小米网关，无需添加MAC地址，只需在米家APP中获取局域网通讯协议，填入即可，配置代码如下：</p>
<pre><code>xiaomi_aqara:
  discovery_retry: 5
  gateways:
    - key: xxxxxxxxxxxxxxxx
</code></pre>
<p>如果局域网中有多个网关，需要获取到各自的MAC地址及局域网通讯协议，配置代码如下：</p>
<pre><code>xiaomi_aqara:
  gateways:
    - mac: xxxxxxxxxxxx
      key: xxxxxxxxxxxxxxxx
    - mac: xxxxxxxxxxxx
      key: xxxxxxxxxxxxxxxx
</code></pre>
<p>目前可以接入HA的设备有：</p>
<ul>
<li>温湿度传感器</li>
<li>移动传感器</li>
<li>门窗传感器</li>
<li>小米无线开关</li>
<li>小米ZIGBEE智能插座</li>
<li>墙面插座</li>
<li>AQARA单双键面板（单火及零火）</li>
<li>AQARA单双键无线开关</li>
<li>小米魔方</li>
<li>天然气传感器</li>
<li>烟雾传感器</li>
<li>网关夜、亮度、铃声</li>
<li>智能窗帘</li>
<li>溢水传感器</li>
<li>电量传感器<br>
详情请参阅HA官方文档<a href="https://home-assistant.io/components/xiaomi_aqara/">https://home-assistant.io/components/xiaomi_aqara/</a></li>
</ul>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>智能家居的精髓-人性化的自动化</title>
    <url>/posts/10394.html</url>
    <content><![CDATA[<p>个人认为，智能家居的核心是自动化，而智能家居的精髓所在，是人性化的自动化。所有设备根据设定好的条件自动运行，有条不紊，而不是掏出手机，点开APP来控制。</p>
<p>HomeAssistant系统提供了强大的自动化平台，利用各式各样的传感器来自动化控制各类设备。</p>
<p>举个例子，每天都有太阳升起和降落的时间，我们可以设置，每天太阳升起时关闭卧室的吊灯，太阳降落时打开卧室的吊灯。</p>
<p>当然这只是最简单的一个自动化，我们可以在其中添加更多的条件，让它越来越人性化。</p>
<p>太阳降落时，如果我不在家，就不用开灯，我在家的时候才打开卧室的吊灯。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装HomeAssistant笔记</title>
    <url>/posts/58386.html</url>
    <content><![CDATA[<p>树莓派安装HomeAssistantyou很多方法，比如HA强推的HASSIO、ALL IN ONE脚本安装以及通过Docker安装等方法，相比而言，我更推荐使用Hassbian镜像来安装HomeAssistant，相比较而言，Hassbian镜像安装使用时间更短，组件相对完整，比HASSIO及DOCKER有更开放的系统。下面我会详细记录树莓派3B使用Hassbian镜像来安装HomeAssistant的过程。</p>
<p>我们需要准备一台目前最新的树莓派3B主机，为了保证树莓派稳定运行，最好选用5V2.5A的电源，准备一张8GB以上的高速TF卡，推荐闪迪16GB A1速的TF卡，另外我们还需要提供稳定高速的下载环境，<a href="http://xn--GithubHomeassistant-9w14aga086ycyaf84hrblth6exl2fwxsedzvc.io">最好可以稳定访问Github以及Homeassistant.io</a>、Google等国外网站。</p>
<p>硬件方面基本上准备就绪了，下面我们来准备需要用到的软件。</p>
<p>首先是hassbian镜像，下载地址</p>
<pre><code>https://github.com/home-assistant/pi-gen/releases
</code></pre>
<p>目前最新的hassbian镜像版本为1.31，我们点击页面上的下载链接将.zip文件下载到电脑，文件大小为400MB左右，如果网络对国外网站的访问速度慢的话，会需要较长的时间，耐心等待下载完成。下载完成之后解压得到.img文件备用。</p>
<p>接下来我们需要将.img文件写到准备好的TF卡中，需要两个软件，SD FOMATTER和WIN32DISKIMAGER，下载地址请自行搜索。用稳定的读卡器将TF卡和电脑连接，打开SD FOMATTER软件将卡格式化，格式化完毕之后用WIN32DISKIMAGER软件浏览到.img镜像，选择TF卡的盘符，点击&quot;WRITE&quot;将.img文件写入TF卡。</p>
<p>写入完成之后将TF卡插入树莓派卡槽，插上网线，通电开机。</p>
<p>如果网速稳定的话，预计在10分钟之内，HomeAssistant系统会自动安装完毕，此时我们需要在手机上下载一个名为&quot;Fing&quot;的APP来查看树莓派的IP地址，当然也可以在路由器的DHCP列表中查看。找到主机名为&quot;Hassbian&quot;的设备并记录下该IP地址，用浏览器访问http://ip:8123即可进入安装好的HomeAssistant界面。</p>
<p>到此为止，安装过程结束，之后我们会对安装好的HomeAssistant系统进行初步的配置。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
        <tag>homeassistant</tag>
        <tag>安装</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>简化操作安装hassctl命令</title>
    <url>/posts/11416.html</url>
    <content><![CDATA[<p>现在我们安装HASSCTL脚本，使用该脚本可以很方便的开启、停止、重启、升级HomeAssistant以及检查HomeAssistant配置文件是否有误。</p>
<pre><code>sudo curl -o /usr/local/bin/hassctl https://raw.githubusercontent.com/dale3h/hassctl/master/hassctl &amp;&amp; sudo chmod +x /usr/local/bin/hassctl
</code></pre>
<p>安装完成之后，我们可以使用以下命令：</p>
<pre><code>hassctl start   ###快速启动homeassistant服务###
hassctl stop   ###快速停止homeassistant服务### 
hassctl restart   ###快速重启homeassistant服务### 
hassctl config   ###检查homeassistant配置文件是否有误###
hassctl update-hass  ###升级homeassistant到最新版本###
</code></pre>
<p>更详细的使用说明可以参照作者的GitHub项目主页：<a href="https://github.com/dale3h/hassctl">https://github.com/dale3h/hassctl</a></p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>获取token将米家PM2.5传感器接入HomeAssistant</title>
    <url>/posts/28478.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/202411021307416.jpg" alt="TIM图片20180518150305.jpg"></p>
<p>由于HomeAssistant官方并没有发布米家PM2.5传感器的组件，所以我们这里需要用到第三方组件才能将其顺利接入HomeAssistant。</p>
<p>这个是bit3725大神制作的<a href="https://github.com/bit3725/homeassistant-mi-air-quality-monitor">插件页面，</a>下载之后放入/custom_components/sensor路径下，然后在配置文件中加入下面的配置即可。</p>
<pre><code>sensor:
  - platform: mi_air_quality_monitor
    host: YOUR_SENSOR_IP
    token: YOUR_SENSOR_TOKEN
    name: YOUT_SENSOR_NAME
</code></pre>
<p>这里我们遇到一个问题，因为米家的这个传感器不是通过多功能网关连接，而是直接通过WIFI连接的，所以我们需要想办法获取到设备的token。</p>
<p>HA官方在<a href="https://www.home-assistant.io/components/vacuum.xiaomi_miio/">这个页面</a>介绍了几种方法，我试过mitoolkit工具这个方法，不清楚是米家APP版本的问题还是电脑端JAVA环境的问题，始终无法正常获取，所以我用了直接在树莓派上安装miio的方法来获取米家PM2.5传感器token的方法。具体操作如下</p>
<p>首先putty登录到树莓派，输入下面命令来安装miio</p>
<pre><code>sudo npm install -g miio
</code></pre>
<p>安装完成之后我们输入下面的命令来查看设备的token</p>
<pre><code>miio discover
</code></pre>
<p>如下图会出现传感器的token，我们将token填入插件即可完成配置。</p>
<p><img src="https://img.ycyc.win/img/202411021307623.png" alt="TIM截图20180518144528.png"></p>
<p>如果你的系统里面没有安装nmp命令，可以参阅我的<a href="https://miaoyang.win/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85nodejs%E5%8F%8Anpm%E7%8E%AF%E5%A2%83.html">另一篇文章</a>来进行安装。</p>
<p>此方法同样适用于需要获取token才能接入HomeAssistant的其他米家设备。</p>
]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
        <tag>homeassistant</tag>
        <tag>LINUX</tag>
        <tag>token</tag>
        <tag>米家</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/29347.html</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>今天将hass升级到最新的0.86.3.之后，系统提示自动化有错误，具体报错信息如下：</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>Invalid config for [automation]: [minutes] is an invalid option for [automation].
</code></pre>
<!-- /wp:code -->
<!-- wp:paragraph -->
<p>查阅官方更新日志后得知，最新版本的hass新增了名为&quot;<code>time_pattern</code>&quot;的platform，而之前版本中的自动化一律使用的是名为&quot;time&quot;的platform。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>那么什么时候用&quot;time&quot;，什么时候用&quot;<code>time_pattern</code>&quot;呢？</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>如果你的自动化使用的是具体的绝对时间，也就是有详细的时分秒的时候，使用&quot;time&quot;，比如：</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>automation:
  trigger:
    platform: time
    # Military time format. This trigger will fire at 3:32 PM
    at: '15:32:00'
</code></pre>
<!-- /wp:code -->
<!-- wp:paragraph -->
<p>如果你的自动化使用的是相对时间，那么就应该使用&quot;time_pattern&quot;，比如：</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>automation 2:
  trigger:
    platform: time_pattern
    # Trigger once per minute during the hour of 3
    hours: '3'
    minutes: '*'
</code></pre>
<!-- /wp:code -->
<!-- wp:paragraph -->
<p>然后把自动化中使用相对时间的platform改为&quot;time_pattern&quot;之后，之前的报错就消失了。</p>
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>HomeAssistant</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>HomeAssistant升级到了2024.10.4</title>
    <url>/posts/63727.html</url>
    <content><![CDATA[<p>没错，2024年11月4日，我将家里HomeAssistant的版本升级到了2024.10.4-截止到目前的最新版本。<br>
目前在用的是2024.9.1的版本，使用了近两个月的时间，很稳定，很少重启。时隔一个月才升级到新版本，主要还是觉得智能家居系统这一块，稳定是最重要的，如果没有特别大的功能改动或异常BUG，我现在是不会在第一时间升级到新版本的。<br>
我的HA是在docker环境下运行的，跑在刷了iStoreOS的N1盒子上，由于盒子是arm架构的，所以拉取镜像的时候需要选择homeassistant/aarch64-homeassistant这个镜像，而这个镜像的latest有问题，所以每次拉取镜像的时候需要手动加上版本号，例如homeassistant/aarch64-homeassistant:2024.10.4。<br>
该版本具体更新了哪些可以参与HA官网文档<a href="https://www.home-assistant.io/blog/2024/10/02/release-202410/">2024.10: Heading in the right direction - Home Assistant</a></p>
<p>简单说一下我的更新步骤：<br>
1.拉取新版本docker镜像；<br>
2.复制旧版本容器，然后选择新版本的docker镜像，创建新容器，其他设置保持不变；<br>
<img src="https://img.ycyc.win/img/202411041608620.png" alt="image.png"><br>
3.停止旧版本容器，启动新版本容器。<br>
<img src="https://img.ycyc.win/img/202411041609074.png" alt="image.png"><br>
4.确认新容器启动正常无报错。<br>
通常我会保留旧版容器3-5天，确认新版本一切正常之后再手动删除。如果期间新容器有异常，还可以随时退回到旧版本。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>homeassistant</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac加量不加价-全线产品16+256起步，维持原价</title>
    <url>/posts/64365.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/202410311631243.png" alt="image.png"></p>
<p>随着昨晚新款Macbook Pro的发布，苹果已经调整了全系Mac系列内存的起步容量，由原先的最低8GB起步升级为16GB起步，包括在售搭载M2和M3处理器的Macbook Air和Pro，最低配置已经升级到了16GB+256GB的配置，而且售价还维持原来的不变。官网也大方暗示，内存升级到16GB起步是为即将到来的苹果AI智能做准备。<br>
<img src="https://img.ycyc.win/img/202410311627258.png" alt="image.png"><br>
最近有购买Mac需求的小伙伴可以入手了，旧款Macbook的性价比瞬间拉满。😊</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>苹果</tag>
        <tag>Macbook</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac加量不加价-全线产品16+256起步，维持原价</title>
    <url>/posts/64365.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/202410311631243.png" alt="image.png"></p>
<p>随着昨晚新款Macbook Pro的发布，苹果已经调整了全系Mac系列内存的起步容量，由原先的最低8GB起步升级为16GB起步，包括在售搭载M2和M3处理器的Macbook Air和Pro，最低配置已经升级到了16GB+256GB的配置，而且售价还维持原来的不变。官网也大方暗示，内存升级到16GB起步是为即将到来的苹果AI智能做准备。<br>
<img src="https://img.ycyc.win/img/202410311627258.png" alt="image.png"><br>
最近有购买Mac需求的小伙伴可以入手了，旧款Macbook的性价比瞬间拉满。😊</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>苹果</tag>
        <tag>Macbook</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>TESLA，WE ROBOT!</title>
    <url>/posts/55722.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/202410121053665.png" alt="image.png"></p>
<p>北京时间10月11日，埃隆马斯克用一场名为“WE,ROBOT”的发布会，向世人展示了基于特斯拉最新全自动驾驶（FSD）的Robotaxi，客货两用车Robovan。另外还有人形机器人Tesla Bot。</p>
<h2 id="Robotaxi"><a class="header-anchor" href="#Robotaxi">¶</a>Robotaxi</h2>
<p><img src="https://img.ycyc.win/img/202410121101826.png" alt="微信截图_20241012105529.png"></p>
<p>据马斯克透露，Robotaxi预计2026年在美国上市。没有传统意义上的方向盘及刹车油门踏板，妥妥的L5。不再使用传统的充电插头，而是通过感应充电垫进行无线充电。</p>
<span id="more"></span>
<h2 id="Robovan"><a class="header-anchor" href="#Robovan">¶</a>Robovan</h2>
<p><img src="https://img.ycyc.win/img/202410121103725.png" alt="微信截图_20241012110310.png"></p>
<p>Robovan 既能作为客运车辆承载 20 名乘客，也可转换为货运车辆满足不同运输需求，同样没有方向盘及踏板。整体造型就像从科幻片中出来一样。这种高灵活性的设计为城市交通和物流运输提供了新的解决方案，提高了车辆的使用效率和经济性。</p>
<h2 id="Tesla-Bot"><a class="header-anchor" href="#Tesla-Bot">¶</a>Tesla Bot</h2>
<p><img src="https://img.ycyc.win/img/202410121102650.png" alt="微信截图_20241012105540.png"></p>
<p>Tesla Bot人形机器人可以实现如照顾孩子、遛狗、修剪草坪、去超市买东西、端咖啡等各种日常事务，具有高度的灵活性和实用性，为未来的家庭服务和个人助理机器人发展提供了新的可能性。未来按规模生产的机器人成本将在 2 万 - 3 万美元之间，相比之前的机器人技术，成本大幅降低，使得人形机器人更有可能走进普通家庭，具有广泛的市场应用前景。</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p>图片引用自tesla官网。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>特斯拉</tag>
        <tag>Robotaxi</tag>
        <tag>Tesla</tag>
        <tag>Robovan</tag>
      </tags>
  </entry>
  <entry>
    <title>在Follow订阅渊澄最新动态</title>
    <url>/posts/49200.html</url>
    <content><![CDATA[<p>Follow是最近很热门的一款RSS订阅器，虽说是热门，但也仅限于所谓的极客圈吧。目前RSS已经被人忘却很多年了，新兴一代好像都不清楚RSS是什么东西。似乎只有在十几年前写博客的元老们才了解RSS为何物。还记得最后一次使用的RSS订阅器还是Google Reader那时还是上高中或大学的时候，06-10年左右吧。可惜谷歌早已放弃了这个项目，之后随着微博等自媒体的兴起，也就没有再用其他RSS订阅器的机会了，虽然也有一些类RSS订阅器做的还不错，比如flipboard，但终究RSS已经成了一个小众领域。<br>
<img src="https://img.ycyc.win/img/202410281249483.png" alt="image.png"></p>
<p>Follow官网<a href="https://follow.is/">Follow</a></p>
<span id="more"></span>
<p>目前处于公测阶段，有web版和电脑客户端两个版本，暂时还没有移动端应用。注册无需邀请码，可关联Github或是Google账户登录，但一些功能还是需要邀请码才能使用的，比如内置的自动化功能。因为没有邀请码，无法测试这个自动化究竟是个什么功能。还有目前没有邀请码的用户最多只能订阅5个更新源。<br>
<img src="https://img.ycyc.win/img/202410281230256.png" alt="image.png"></p>
<p>Follow除了支持传统的RSS文章订阅之外，还支持B站、油管、电报、小红书等账号的订阅，而这些功能是基于Follow作者之前名为RSShub的项目。该项目可以将三方自媒体平台更新数据转化为可供RSS订阅的地址，通过一个客户端就可以关注到你在不同平台上所关注的用户的更新动态了，而这个客户端就类似于现在提到的Follow。只是Follow对所关注的内容做了细化分类，分为普通文章、社交媒体，图片、视频、音频及通知，可根据平台的类型划分到不同的分类下面，以获取更好的阅读体验。比如可以把普通的博客划分到文章，B站和油管的更新划分到视频，微博或是X划分到社交媒体，Instagram的更新划分到图片，而类似于什么值得买之类的更新可划分到通知类。<br>
<img src="https://img.ycyc.win/img/202410281244724.png" alt="image.png"><br>
目前有一点需要吐槽一下，如果我想要在Follow关注我在三方平台关注的用户，只能一个一个手动搜索然后添加关注，很是不便。如果Folllow能够一键读取我三方平台内关注的用户并同步过来，应该会极大的改善用户的体验，但这需要Follow和各平台进行数据对接，而平台应该是会反对了，因为通过Follow浏览更新之后，几乎没有平台什么事了。</p>
<p>Follow的另一个亮点是支持打赏功能，你可以给你喜欢的文章进行打赏，当然前提是这个文章所有者进行了Follow认证，打赏的金额才能进入到他的账户中去。Follow使用的打赏货币名为power，是一种区块链货币，按照官方的说法会根据在Follow上的活跃度和贡献值来获取power。而目前似乎没有更为详细的获取规则。<br>
<img src="https://img.ycyc.win/img/202410281240389.png" alt="image.png"></p>
<p>以下是Follow认证信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This message is used to verify that this feed (feedId:73561881581939712) belongs to me (userId:73561590031793152). Join me in enjoying the next generation information browser https://follow.is.</span><br></pre></td></tr></table></figure>
<p>目前渊澄站点已经过认证，在搜索框中直接输入【渊澄】可直接订阅我们的更新动态。或者直接填入渊澄的RSS地址也是可以的 <a href="https://ycyc.win/atom.xml">atom.xml</a><br>
<img src="https://img.ycyc.win/img/202410281233866.png" alt="image.png"><br>
如果你有需要认证的RSS源，可以参照指引将认证信息填入更新文章内，Follow读取到包含认证信息的更新后就成功了。站点右上角就会出现认证图标。<br>
更多的其他功能估计要等到正式版发布才能体验到。<br>
最后还是希望Follow能把RSS再次带回到大众视野，虽然RSS已经注定了是个小众领域了，但至少可以让当下的年轻人知道还有一种跨平台订阅更新的方式叫做RSS。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>Follow</tag>
        <tag>订阅</tag>
      </tags>
  </entry>
  <entry>
    <title>导入WordPress备份的历史文章</title>
    <url>/posts/56316.html</url>
    <content><![CDATA[<p>今天终于把我尘封多年的之前在WordPress写的日志导入到了Hexo。由于之前在WP导出的是xml，而hexo使用的是markdown格式，在往上搜了几个转化的工具都是一堆报错。最后按照下列文章的指引成功将wordpress备份出来的xml转换成了单个md文件。<s>但是文章引用的图片和其他附件就没了。之后我翻一下NAS里面看有没有备份，有的话修复一下</s>。（好在文章数量不是很多，目前大部分能找到备份的引用图片已经重新上传修复）。大部分是18年到20年左右写的，主要是一些关于HomeAssistant早期的文章，现在大部分都已经可以界面可视化操作了，还有一些提到的教程或脚本或许已经失效了，仅供参考。<br>
有wordpress转换markdown需求的朋友可以 参阅以下链接教程。实际测试后基本可用，只是wordpress不像Markdown要求那么严格，如果标题中有特殊符号，部署Hexo的时候可能会报错，需要手动修改剔除，还有一些WordPress专有的格式和布局需要重新设置。</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://gapdh.com/jzzl/wtomd/">小白-使用wordpress-to-markdown的方法 – 听水观沙</a></p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>markdown</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>地表最快四门量产车来了-小米SU7 Ultra发布</title>
    <url>/posts/49729.html</url>
    <content><![CDATA[<p>昨晚科技圈有点热闹，苹果和小米都发布了各自的新品，苹果最近一段时间新品频发，iPad mini 7，M4芯片的新款iMac，还有昨晚发布的更小尺寸的基于M4芯片的Mac mini，其中除了Mac mini外观和尺寸有明显变化外，其他升级都只能算是挤牙膏式的常规升级，苹果估计也觉得没必要单独开发布会的必要了。<br>
<img src="https://img.ycyc.win/img/202410301013751.png" alt="image.png"></p>
<p>转到小米这边，昨晚一口气发布了澎湃OS2操作系统、小米15系列手机以及小米SU7 Ultra高性能四门超跑汽车。当然其中最引人关注的还是小米SU7 Ultra，官方给出的数据百米加速2秒内，号称是地表最快的四门量产车。小米SU7 Ultra预售价格为81.49万元，明年3月份正式开售。虽然咱们普通人看上去80W很贵，但是看了参数及外观图片之后，还是觉得小米SU7 Ultra性价比是很高的。然后早上翻看小米官网介绍的时候发现，小米居然在车身配备了40W的外置扬声器，内置三种音效，可模拟超跑加速音浪。👍看来小米还是最懂年轻人的。不知道小米会不会在后续的OTA升级中加入更多的音效呢？😛<br>
<img src="https://img.ycyc.win/img/202410301017409.png" alt="image.png"></p>
<p>详细的参数及精美图片视频移步SU7官网查看<a href="https://www.xiaomiev.com/ultra">小米汽车</a><br>
那如果你有80W预算买车，会选择小米SU7 Ultra吗？🤑<br>
另外忘了说了，两个厂家昨天还有一次隔空互动😍。新的澎拜OS2支持小米手机在苹果的Mac OS上投屏，并支持操控，就像小米笔记本那样，也支持与iPhone间共享图片和文件，实现这些功能的前提是需要在Mac或是iPhone上安装名为小米互联服务的APP。<br>
<img src="https://img.ycyc.win/img/202410301257890.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>小米</tag>
        <tag>SU7</tag>
        <tag>SU7Ultra</tag>
        <tag>汽车</tag>
      </tags>
  </entry>
  <entry>
    <title>影视飓风被下架视频《清晰度不如4年前！视频变糊是你的错觉吗？》</title>
    <url>/posts/33470.html</url>
    <content><![CDATA[<p>最近全网知名千万级up主影视飓风上架了一部关于视频清晰度的视频，随后却被全网集体下架。视频中详细分析了各视频平台如何利用最新的编码算法欺骗用户的眼睛，标称4k、8k分辨率的视频清晰度甚至不如几年前的1080p。有些平台甚至根据播放量调整视频编码方式，节约带宽流量。随着视频的下架以及在海外平台的转载，网友评论出奇一致，解决不了问题，就解决提出问题的人。</p>
<blockquote>
<p>该视频分享自油管，如果打不开请挂梯子。</p>
</blockquote>
<span id="more"></span>
<iframe width="560" height="315" src="https://www.youtube.com/embed/dKxDxSuZ8hc?si=hOTHgoDBt5VTUE68" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>影视飓风</tag>
        <tag>视频</tag>
        <tag>下架</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果又发新iPhone了</title>
    <url>/posts/20537.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/20240910152713.png" alt="20240910152713"><br>
昨儿个凌晨，苹果召开了一年一度的秋季新品发布会，不知道从什么时候开始被誉为了科技界的春晚。<br>
早上起来看苹果的公众号大概了解了一下发布的新品，依旧是没有什么亮点可言，都是一些常规升级：iPhone16系列，包括pro Max机型，Apple Watch 10代，还有Airpods第四代，包括一款支持主动降噪的型号。<br>
没有期待中的新款Apple TV。<br>
但是iPhone16系列会搭载最新的iOS18操作系统，在苹果iOS18的页面(<a href="https://www.apple.com/ios/ios-18/">https://www.apple.com/ios/ios-18/</a>) 增强了AI（Apple Intelligence）功能，期待在iPhone上有惊艳表现，但据介绍最低只支持到iPhone 15Pro。</p>
<span id="more"></span> 
<p>今天不对新品做什么评论，只是想单纯吐槽一下苹果的创新已经大不如前了，虽然这是众所周知、无可奈何的事实。近年来发布的新品除了Apple vision pro之外，很难再找到一款类似于当年iPhone4那么跨时代、让人兴奋的产品了，而这个vision pro 居然还需要用一根线外接一个充电宝才能用。<br>
<img src="https://img.ycyc.win/img/20240910155144.png" alt="20240910155144"><br>
第一次用苹果的手机就是iPhone4，经典的设计，玻璃背板，金属机框，retina高清屏，还有流畅的iOS系统；然后是iPhone4S，在外形与上一代保持一致的情况下，首次搭载了siri语音助手；iphone5是更大的屏幕，更薄的机身；iPhone5s首次在home键上融入了TouchID,让解锁更方便，并且首次使用了土豪金配色。。。<br>
接下来的每代iPhone就没什么值得记忆的亮点了，无非是更快的处理器，更高的摄像头像素，还有更大的屏幕。就算是这些毫无亮点毫无新意的换代，也让国内友商竞相模仿，最不能忍受的是为了降低机身厚度，居然砍掉了3.5mm耳机孔，发展到现在市面上主流的手机，都不带耳机孔了。。。还有机身左侧的静音按钮，也在最新款的iphone上被砍掉了。。<br>
但不可否认苹果依然是当今最具影响力的手机公司，而且iPhone的市场占有率好像也越来越高了（是不是得益于国产手机的售价也不便宜？），其他地方不周到，我周边平均每10个人至少有3-4个是用苹果手机的。当年iphone4-iphoneX时代应该没有这么高的占有率，毕竟当时苹果的售价是遥遥领先的。<br>
当然作为一名三流果粉，还是希望苹果越来越好，发布更多改变时代的好产品。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>苹果</tag>
        <tag>Apple</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>iycyc.com域名上线，欢迎访问</title>
    <url>/posts/39632.html</url>
    <content><![CDATA[<p>今天注册了一个.com域名：<a href="http://iycyc.com">iycyc.com</a> 。用于渊澄网站的访问。<br>
目前可通过以下三个域名访问到本站点：</p>
<blockquote>
<p><a href="https://iycyc.com">https://iycyc.com</a><br>
<a href="https://ycyc.win">https://ycyc.win</a><br>
<a href="https://miaoyang.win">https://miaoyang.win</a></p>
</blockquote>
<p>建议通过iycyc.com这个域名进行访问。稍后会将其他一系列服务都指向这个域名，但是另外两个域名作为备用也会继续提供正常服务。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>本站已接入Google Adsense广告联盟</title>
    <url>/posts/49402.html</url>
    <content><![CDATA[<p>本站已于昨日通过了Google Adsense审核，正式部署了GoogleAdsense代码，投放广告。就我这点可怜的流量，压根赚不了钱，也没指望赚钱，就是玩玩儿。</p>
<p>为了最大限度降低广告对访问者的浏览体验，如果你使用的是桌面版浏览器访问本站点，基本上不会看到广告，如果使用手机等移动端访问的本站，是有可能会在首页或是文章详情页看到谷歌投放的广告，当然前提是你的身处的网络环境可以访问到谷歌服务。<br>
下面我大致记录一下接入Google Adsense的流程，如果有兴趣接入Google Adsense的朋友，可以参考。</p>
<h3 id="注册Google-Adsense账户。"><a class="header-anchor" href="#注册Google-Adsense账户。">¶</a>注册Google Adsense账户。</h3>
<p><a href="https://adsense.google.com/start/">Google AdSense - 利用网站创收</a></p>
<h3 id="添加站点信息，然后认证网站。"><a class="header-anchor" href="#添加站点信息，然后认证网站。">¶</a>添加站点信息，然后认证网站。</h3>
<p>在左侧网站选项卡，添加站点信息，然后将相关认证代码部署到你的站点，直到谷歌可以检测到。<br>
<img src="https://img.ycyc.win/img/202502111645622.png" alt="image.png"><br>
然后就是等待审批，直到状态变为绿色的准备就绪。</p>
<span id="more"></span>
<h3 id="添加广告位，部署代码。"><a class="header-anchor" href="#添加广告位，部署代码。">¶</a>添加广告位，部署代码。</h3>
<p>在广告选项卡中根据你站点的实际情况选择广告位类型。然后将广告代码插入到你站点相应的位置。<br>
<img src="https://img.ycyc.win/img/202502111647731.png" alt="image.png"></p>
<h3 id="在站点根目录部署ads-txt文件。"><a class="header-anchor" href="#在站点根目录部署ads-txt文件。">¶</a>在站点根目录部署ads.txt文件。</h3>
<p>最后我们需要在站点的根目录部署一个ads.txt文件，内容参考以下链接：<br>
<a href="https://support.google.com/adsense/answer/12171612?sjid=16306355872242802495-NC#create">ads.txt 指南 - Google AdSense帮助</a><br>
一切就绪之后部署工作就完成了。<br>
然后就可以在Google Adsense网站看到你的收益情况了。<br>
如果在部署过程中遇到其他问题请参阅更为详细的GOOGLE相关帮助文档。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>广告</tag>
        <tag>GOOGLE</tag>
        <tag>Adsense</tag>
      </tags>
  </entry>
  <entry>
    <title>祝大家新春快乐</title>
    <url>/posts/2924.html</url>
    <content><![CDATA[<p>今天是大年初五了，转眼春节假期已经快接近尾声了。<br>
今年是蛇年，也是我的本命年，不敢想自己已经37了。🤣<br>
祝大家新春快乐，蛇年大吉，身体健康，巳巳顺意。。🎇</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
  </entry>
  <entry>
    <title>pornhub推出免费VPN软件VPNHUB【APK下载】</title>
    <url>/posts/26860.html</url>
    <content><![CDATA[<p>**目前该APP已无法在给国内使用了，如需访问跨境网络，请前往SS之家注册账户 **<a href="https://sshome.win"><strong>https://sshome.win</strong></a></p>
<p>世界知名的成人网站PORNHUB近日推出了一款免费的VPN软件，名为vpnhub。支持iOS及Android系统，现已在谷歌的PLAY商店以及苹果appstore上架，苹果iOS用户切换到美国地区的AppleID应该可以下载，而安卓用户可以在本文的结尾获取到APK下载地址。</p>
<p>下面以Android手机来演示一下怎么使用。安装之后我们点开APP，首次进入会有提示升级到高级用户，我们点击SKIP跳过，然后进入主界面，点击中间的图标进行连接，连接成功之后会变绿，顶部状态栏会有VPN图标。然后我们就可以愉快的玩耍了。</p>
<p><img src="" alt="Uploading file...omc9y"></p>
<p><img src="https://img.ycyc.win/img/202411021146947.png" alt="Screenshot_2018-05-31-13-42-06-125_VPNhub.png"></p>
<p><img src="https://img.ycyc.win/img/202411021147861.png" alt="Screenshot_2018-05-31-13-42-42-938_VPNhub.png"></p>
<p>如果升级到高级用户，可以选择其他国家或地区的节点，而免费的节点目前只有美国一个。</p>
<p><img src="https://img.ycyc.win/img/202411021147046.png" alt="Screenshot_2018-05-31-13-57-15-164_VPNhub.png"></p>
<p>高级用户的收费标准为月付11.99美金，年付的话6.25*12美金，高级用户可以享受更多的节点，更快的连接以及去广告服务。</p>
<p>不过还是建议大家用用就OK，没必要付费，一旦用的人多了，服务器都有随时被墙的危险。</p>
<p><img src="https://img.ycyc.win/img/202411021148463.png" alt="Screenshot_2018-05-31-13-57-27-562_VPNhub.png"></p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>Network网络</tag>
        <tag>PORNHUB</tag>
        <tag>VPN</tag>
        <tag>VPNHUB</tag>
        <tag>免费</tag>
      </tags>
  </entry>
  <entry>
    <title>关于</title>
    <url>/posts/23630.html</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>89年双子座理工男，坐标山西太原。目前已结婚生子，有压力，但很幸福。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>2000年左右接触互联网；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p><a href="http://xn--cctv-k84fui92o41u0vle7hx4kmm3c80le7a1z3b.com">打开的第一个网站好像是cctv.com</a>，当时只记得这一个网址；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>第一个QQ号是在小卖铺的公用电话打168申请的，现在已经忘记了；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>第一个邮箱是xxxxxxxx.student@sina.com结尾的，现在已经忘记了，还记得当时死活不会输入@；</p>
<p>玩的第一个游戏应该是暴力摩托，现在基本上不玩游戏；</p>
<p><a href="http://xn--joyo-k84f4b7ml50bqx6bjtzaipjl6mz4ar83bda6787clkb.com">上的第一个购物网站是卓越网joyo.com</a>，也就是现在的亚马逊；</p>
<p>第一次建网站好像是在一个名为zjtop.com的网站上建的论坛；</p>
<p>第一次自己租虚拟空间是在常来网，这个网站已经倒闭很多年了；</p>
<p>自建博客用的第一个系统是pjblog，现在好像已经不更新了；</p>
<p>自己买的第一部手机是从淘宝买的西门子的S65；</p>
<p>喜欢的偶像是BEYOND，五月天，孙燕姿；</p>
<p>喜欢的运动品牌是美津浓；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>喜欢的互联网公司是Google，Apple；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>目前持有的设备：</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>ThinkPad X230</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>MacBook Pro 2015</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p><s>锤子坚果Pro</s></p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>iPad mini2</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>iPhone7</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>AirPods 2</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p><del>树莓派3</del></p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p><del>Orange Pi Zero</del></p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>X86架构的黑群晖</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>小米智能家庭套装</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p><del>NEWIFI Y1路由器</del></p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>小爱AI音箱</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>天猫精灵方糖</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p><s>小米手环2</s></p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>斐讯N1盒子</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p><s>斐讯T1盒子</s></p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p><del>Lenovo Y1S路由器（Padavan）</del></p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p><s>Lenovo NEWIFI3 路由器</s></p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>HUAWEI AX3 路由器</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p><s>TP-LINK 886 千兆版路由器</s></p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>水星D191G路由器</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>版权说明：本站的内容若无转载说明均为作者原创，未经许可请勿随意转载，如需转载请征得本人同意并注明出处，谢谢合作。</p>
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
  </entry>
  <entry>
    <title>推荐好友使用OneDrive，免费获得扩容奖励</title>
    <url>/posts/60877.html</url>
    <content><![CDATA[<p>OneDrive是微软推出得一款免费云盘服务，之前叫做Skydrive。不同于Google Drive以及百度云盘，OneDrive可以和最新得Windows10操作系统深度集成，只需在Windows10系统中登陆你得微软账户，即可实时同步，非常适合Windows用户来同步和备份一些重要的数据，而且OneDrive的各项功能目前在国内可以正常使用。</p>
<p>微软提供为OneDrive免费账户提供15GB得存储空间，如果你觉得空间不够用微软也推出了收费扩容服务，价格如下：</p>
<p><img src="https://img.ycyc.win/img/202411021139142.jpg" alt="TIM截图20181204140905.jpg"></p>
<p>除了与office打包，单独购买50GB的空间每月需要15块钱。</p>
<p>如果你和我一样，舍不得花钱，但又觉得15GB不够用，那你可以邀请好友来注册激活OneDrive服务，成功邀请一位好友，你和你的好友都可获得0.5GB的扩容，最多可获得10GB的扩容空间，也就是说，你成功邀请了20位好友注册激活OneDrive，你的存储空间就会升级到25GB。<br>
<img src="https://img.ycyc.win/img/202411021140904.jpg" alt="TIM截图20181204141234.jpg"></p>
<p>下面是我的邀请链接，还没有注册OneDrive的的朋友点击一下链接，你和我都会另外获得0.5GB的扩容哦！</p>
<p><a href="https://onedrive.live.com?invref=2201fc6079f823f2&amp;invscr=90">https://onedrive.live.com?invref=2201fc6079f823f2&amp;invscr=90</a></p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>OneDrive</tag>
        <tag>Network网络</tag>
        <tag>微软</tag>
      </tags>
  </entry>
  <entry>
    <title>更换服务器</title>
    <url>/posts/11923.html</url>
    <content><![CDATA[<p>仔细一看，距离上次更新已经有大半年之久了，真是惭愧，一直没有时间静下心来更新。</p>
<p>期间很长时间是因为原先的服务器被墙了，暂时没有找到合适和服务器来替换。而就在昨天，在Godaddy上无意间搜索，竟然发现我之前被盗的域名miaoyang.info可以注册了，所以我立即下手注册了，接着在Vultr上购买了VPS，安装了宝塔面板，把被墙服务器的数据又倒了过来，这才暂时算是正常了。<br>
<a href="http://xn--miaoyang-5g0m894a3yekxn700ck19bnkbt37aw2r.info">目前网站的主域名是miaoyang.info</a>，将miaoyang.win以及miaoziyuan.com两个域名做了跳转，现在上述三个域名都可以直达本站。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>Daily我的日常</tag>
      </tags>
  </entry>
  <entry>
    <title>本站启用新域名miaoziyuan.com</title>
    <url>/posts/55749.html</url>
    <content><![CDATA[<p><a href="http://xn--miaoziyuan-g93py3wi6gw9bsoi10c7h1dg1ap1p3u5fc8ya4u9f.com">本站从即日起启用全新域名miaoziyuan.com</a>，旧域名miaoyang.win依然可以正常访问，但是会跳转到新域名。目前大家可以通过以下网址访问本站</p>
<p><a href="https://miaoziyuan.com">https://miaoziyuan.com</a></p>
<p><a href="https://www.miaoziyuan.com">https://www.miaoziyuan.com</a></p>
<p><a href="https://miaoyang.win">https://miaoyang.win</a></p>
<p><a href="https://www.miaoyang.win">https://www.miaoyang.win</a></p>
<p>新域名没有什么特殊的含义，是我儿子的名字全拼。自打他出生的时候注册的，一直没有什么用，现在拿来做我网站的主域名，等他长大的时候交给他，哈哈。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>Daily我的日常</tag>
      </tags>
  </entry>
  <entry>
    <title>来宜家网购吧</title>
    <url>/posts/16783.html</url>
    <content><![CDATA[<p>目前宜家官网（<a href="https://www.ikea.cn/cn/zh/">https://www.ikea.cn/cn/zh/</a>)已开通网上商城服务，可配送的城市已由之前的34个扩展到149个，覆盖国内大部分一二三线城市，而我所在的太原也赫然在列。（<a href="https://www.ikea.cn/ms/zh_CN/campaigns/2019_ecl/east_china_launch.html?icid=iba'cn'eclaunch'201810160415210312_1">具体覆盖城市点这里查看</a>）</p>
<p><img src="https://img.ycyc.win/img/202411021136975.jpg" alt="management-theory-and-IKEA.jpg"></p>
<p>其实自己也算是半个宜家粉，因为所在城市没有宜家家居，之前购买宜家的东西都是通过淘宝代购。</p>
<p>我试着在宜家网上商城下了两个订单，如果只是小件物品的话，运费只需要9.9元/单，大件家具的话只能通过货车运送，运费应该是最低69元。配送时限方面，小件物品一般会在3天内送达，大件物品需要7个工作日左右。</p>
<p>具体的购物流程我就不写了，和大部分网上商城一样，先注册账户，然后商品加入购物车，最后结账付款。需要注意的是订货之前必须查到你的收货地址的邮编，因为宜家是按照邮编来计算运费的，付款方面支持微信及支付宝。</p>
<p>购物的时候记得加入会员俱乐部，会员不仅能享受部分商品的会员价，退货时限延长到365天，凭会员卡好像还可以在宜家商场喝免费咖啡哈。</p>
<p>PS:刚刚接到京东物流的电话，说快递分发错站点了，明天就会送过来。<br>
所以推断宜家的快递用的应该是京东物流，至少山西太原是用京东物流来配送，昨天中午下的单今天就送来了，给京东物流点个赞。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>Daily我的日常</tag>
        <tag>IKEA</tag>
        <tag>宜家</tag>
      </tags>
  </entry>
  <entry>
    <title>目前群晖搭建WordPress存在的问题</title>
    <url>/posts/13021.html</url>
    <content><![CDATA[<p>现在在群晖上将域名进行了DDNS解析，目前实现了使用域名+端口的方式来访问站点。由于电信运营商封锁了80和443端口，所以现在使用8012端口来替代443访问。</p>
<p>目前存在的主要问题是，必须手动输入https://miaoyang:8012才可以访问，不输入https直接访问会有报错。</p>
<p>尝试使用默认的443端口采用反向代理的方法来跳转到8012端口，但是现在群晖系统内设置了反向代理也没有生效，暂时不知道是哪里的问题。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>Synology群晖</tag>
        <tag>wordpress</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>网站升级到了WordPress5.0</title>
    <url>/posts/52498.html</url>
    <content><![CDATA[<p>刚刚收到了Wordpress推送的5.0版本更新。</p>
<p>不出意外，这次WordPress强推了全新的古腾堡编辑器，经过几次版本更新，现在的古腾堡编辑器已经可以让使用者愉快的编辑文字了。</p>
<pre><code>而且无须插件可以较为方便的插入代码。
</code></pre>
<p>目前编辑器的汉化工作还不是很完善，可以说是基本上没有汉化，英文不是很好的朋友上收起来还是有点困难的，好像现在Wordpress官方的汉化工作也迟迟没有推进，除了古腾堡编辑器，WordPress主程序也有好几处没有汉化到位。</p>
<p>####12月11日更新####</p>
<p>就在刚刚收到了5.0的中文汉化更新，之前WordPress主程序未汉化的部分也得到了汉化，赞一个。</p>
<p><img src="https://img.ycyc.win/img/202411021142155.jpg" alt="TIM截图20181211173924.jpg"></p>
<p>想退回使用原来的编辑器怎么办？后台搜索插件classic-editor安装应用，就可以回到原先的经典编辑器了，据官方介绍说该经典编辑器仅支持到2021年。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
        <tag>Daily我的日常</tag>
      </tags>
  </entry>
  <entry>
    <title>网站对文章部分内容及网盘提取密码启用回复可见功能</title>
    <url>/posts/40322.html</url>
    <content><![CDATA[<p>好吧，为了增加点网站人气，从即日起决定对所发布文章的相关部分以及附件的提取密码进行&quot;回复可见&quot;功能设置，只有对相应的文章进行评论回复，才能看到相关内容。</p>
<p>目前该功能已初步测试完成，大家在有附件下载的文章底部会看到下载链接按钮，对该文章进行回复之后，刷新页面，就会出现百度网盘的提取密码了。</p>
<p><img src="https://img.ycyc.win/img/202411021141167.png" alt="sss.png"></p>
<p>如果在使用过程中发现有bug，欢迎反馈。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>Daily我的日常</tag>
        <tag>Android安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>苹果2019年初正式发售国行版HomePod 售价2799</title>
    <url>/posts/12103.html</url>
    <content><![CDATA[<p>近日，苹果升级了智能音箱HomePod的固件，使其终于能够支持中文了，同步支持的语言还包括广东话。</p>
<p>而苹果中国官网也随即挂出了<a href="https://www.apple.com/cn/homepod/">国行HomePod的页面</a>，有白色和深空灰两种配色，售价均为2799元人民币，预计会在2019年初开放购买。</p>
<p><img src="https://img.ycyc.win/img/202411021137997.jpg" alt="TIM截图20181206135234.jpg"></p>
<p>HomePod是苹果公司发布的一款互联网智能音箱，内置自家的Siri语音助手，配合iPhone手机及Apple Music账户可以实现信息查询、播放音乐、接打电话、AirPlay等功能，配合家庭APP及HomeKit配件，可以实现智能家庭的语音控制。</p>
<p>HomePod同时也支持多台HomePod串联，组成多声道音响系统，也支持多个HomePod播放不同的内容，组成家庭背景音乐系统。</p>
<p>目前国内的各品牌智能音箱，无论从外观、功能及音质方面，都无法和HomePod直接竞争，当然也包括价格，而随着HomePod国行版的正式发售，苹果在国内的智能音箱及智能家居领域，必会有所斩获，毕竟苹果的用户体验是有目共睹的。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
        <tag>苹果</tag>
        <tag>HomePod</tag>
        <tag>智能音箱</tag>
      </tags>
  </entry>
  <entry>
    <title>闲鱼710块大洋入手暴风播酷云NAS主机</title>
    <url>/posts/10203.html</url>
    <content><![CDATA[<p>前几天在闲鱼出掉了之前使用的NAS主板，因为在使用过程中发现，安装黑群晖之后在进行图片转码和播放影片时，CPU占用率很高，所以想着换一块性能更好一些的主板，然后这次再次把目光锁定在了网红NAS专用主板-华擎J3455ITX。</p>
<p>今天在闲鱼上搜索J3455的时候，找到一个卖家在出售回收回来的暴风播酷云，自带J3455ITX主板，8GB笔记本内存，16GB SSD硬盘加电源，关键是还有万由代工的双盘位机箱，加运费算下来一共710块大洋。</p>
<p><img src="https://img.ycyc.win/img/202411021143118.jpg" alt="TIM截图20181221162058.jpg"></p>
<p>因为买的人比较多，所以卖家在付款两天后才会发货，等收到货之后我会写一篇文章简单介绍一下这个主机，以及安装黑群晖系统的步骤。</p>
<p>因为家里下个月宽带会升到300M，所以我最近也买了新路由3还有千兆网线、水晶头，等到时候所有设备都准备就绪之后，我再来测试一下家庭千兆网络环境下的网速究竟能有多快。</p>
]]></content>
      <categories>
        <category>叨叨</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Synology群晖</tag>
        <tag>群晖</tag>
        <tag>播酷云</tag>
      </tags>
  </entry>
  <entry>
    <title>Github+Cloudflare Pages图床部署</title>
    <url>/posts/20185.html</url>
    <content><![CDATA[<p>将Github的图床部署到Cloudflare的Pages，可以享受cloudflare的加速服务，速度虽然比不上国内，但比起github原生的速度还是要强上不少。过程很简单，在Cloudflare新建一个Pages项目，链接到Github账户，选择图床源，一路下一步，完成部署。<br>
然后设置自定义域名，例如img.ycyc.win，使用cname协议解析到Cloudflare分配的默认项目地址。<br>
<img src="https://img.ycyc.win//img/202409191630571.png" alt="image.png"></p>
<p>例如原来在Github的图片地址为’<a href="https://raw.githubusercontent.com/miaoyanginfo/hexo-img/main/img/202409131248235.png">https://raw.githubusercontent.com/miaoyanginfo/hexo-img/main/img/202409131248235.png</a>’<br>
现在替换为‘<a href="https://img.ycyc.win/img/202409131248235.png">https://img.ycyc.win/img/202409131248235.png</a> ’即可。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
  </entry>
  <entry>
    <title>Github+Cloudflare Pages图床部署</title>
    <url>/posts/20185.html</url>
    <content><![CDATA[<p>将Github的图床部署到Cloudflare的Pages，可以享受cloudflare的加速服务，速度虽然比不上国内，但比起github原生的速度还是要强上不少。过程很简单，在Cloudflare新建一个Pages项目，链接到Github账户，选择图床源，一路下一步，完成部署。<br>
然后设置自定义域名，例如img.ycyc.win，使用cname协议解析到Cloudflare分配的默认项目地址。<br>
<img src="https://img.ycyc.win//img/202409191630571.png" alt="image.png"></p>
<p>例如原来在Github的图片地址为’<a href="https://raw.githubusercontent.com/miaoyanginfo/hexo-img/main/img/202409131248235.png">https://raw.githubusercontent.com/miaoyanginfo/hexo-img/main/img/202409131248235.png</a>’<br>
现在替换为‘<a href="https://img.ycyc.win/img/202409131248235.png">https://img.ycyc.win/img/202409131248235.png</a> ’即可。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
  </entry>
  <entry>
    <title>crontab 定时任务规则收藏</title>
    <url>/posts/18367.html</url>
    <content><![CDATA[<p>定时规则由六位组成，分辨是分、时、天、月、星期。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure>
<p>引用来源：<a href="https://www.runoob.com/linux/linux-comm-crontab.html">Runoob</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
  </entry>
  <entry>
    <title>iOS端收发163域名邮箱邮件IMAP</title>
    <url>/posts/37524.html</url>
    <content><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2>
<p>随着移动互联网的普及，现在电子邮箱的用处已经没有原先那么大了，但是有些网站注册和敏感的操作还是需要邮箱验证码。常用的类似于163、QQ、微软的主流邮箱服务的配置已经在手机邮件客户端内置了，只要输入邮箱地址和密码就可以很方便的接入手机邮件客户端。但是诸如一些非主流的企业邮箱想要接入手机端邮件APP就有些繁琐了，除了需要邮箱地址密码等基础信息外，还需要获取邮件服务器的地址和端口、加密方式等额外信息。下面记录一下如何将基于163服务的企业邮箱接入到iOS的邮件APP来进行邮件的收发。<br>
<img src="https://cdn.ycyc.win/gh/miaoyanginfo/hexo-img/img/202409141606361.png" alt="image.png"></p>
<h2 id="相关协议"><a class="header-anchor" href="#相关协议">¶</a>相关协议</h2>
<p>之前想要在三方客户端收发邮件是需要开通邮箱的POP3和SMTP协议的，然后在三方客户端输入pop3和smtp地址以及邮箱和密码就可以接入三方客户端了。而现在越来越多的邮箱已经取消的对POP3协议的支持，改用IMAP协议。其实原理差不多，只是IMAP输入的不是邮箱的登录密码，而是随机生成的授权码。</p>
<span id="more"></span>
<p>下面是往上关于IMAP、POP、SMTP三者的介绍：<br>
SMTP相对于其他两者协议，更多的侧重点在于发送与中继，与POP、IMAP太多不同；正常情况下只需去考虑POP和IMAP的情况进行解析，因为POP和IMAP对客户是进行实实在在的接收；唯一比较特殊的是SMTP是注重于”推送“而不是”拉取“这是区别于其他两种协议的方式之一，此外，SMTP是明确的在TCP/IP协议簇里，其他两者只是通过TCP/IP协议进行传输。<br>
POP与IMAP主要区别就在于POP是单一的离线模式对邮件进行传输，IMAP是在线和离线两种模式对邮件进行传输，上述对离线和在线有解释，就不做过多解释，简单来说，离线就得下载之后对邮件进行查看、删除等一系列操作，且客户端与服务端消息不互通；在线就是无需下载就能进行查看、删除等操作，且他们之间的消息处于互通。</p>
<h2 id="授权码获取"><a class="header-anchor" href="#授权码获取">¶</a>授权码获取</h2>
<p>我的邮箱地址是以ycyc.win结尾的企业邮箱，使用网易企业邮免费版。接入步骤很简单，在域名DNS那里修改相关的TXT及MX记录到网易指定的地址，等待解析生效就可以了。<a href="https://qy.163.com/login/?from=ym">网易企业邮箱 - 登录入口 (163.com)</a><br>
其实我现在使用的这个并不是真正意义上的企业邮箱，只是将域名接入到网易使用其邮箱服务。而真正意义上的企业邮箱是需要自己搭建单独的邮件服务器的。当然如果你有群晖NAS，可以使用群晖的套件来搭建自己的邮件服务。<br>
其实不管什么邮箱，要接入第三方邮件收发客户端，所需要的信息都类似，首先需要邮箱地址和密码，或是上面说到的授权码，其次就是邮箱服务器的POP3地址、IMAP地址、SMTP地址以及端口。<br>
获取163企业邮箱的授权码根据下图所示操作：</p>
<p><img src="https://cdn.ycyc.win/gh/miaoyanginfo/hexo-img/img/202409141550390.png" alt="qiyeyou.png"></p>
<p>这里的协议类型可以选POP或是IMAP协议，推荐IMAP协议。<br>
<img src="https://cdn.ycyc.win/gh/miaoyanginfo/hexo-img/img/202409141551881.png" alt="qiyeyou2.png"></p>
<p>将授权码复制到手机上备用。</p>
<h2 id="iOS端添加邮箱服务"><a class="header-anchor" href="#iOS端添加邮箱服务">¶</a>iOS端添加邮箱服务</h2>
<p>iOS进入设置-邮件-账户，添加账户，选择其他。</p>
<p><img src="https://cdn.ycyc.win/gh/miaoyanginfo/hexo-img/img/202409141556932.png" alt="image.png|200"></p>
<p>选择添加邮件账户<br>
<img src="https://cdn.ycyc.win/gh/miaoyanginfo/hexo-img/img/202409141557901.png" alt="image.png|200"></p>
<p>然后根据类型选择POP协议还是IMAP协议，输入邮箱地址，IMAP地址，SMTP地址及端口，用户名处输入邮箱地址，密码处输入授权码，等待授权完成。<br>
<img src="https://cdn.ycyc.win/gh/miaoyanginfo/hexo-img/img/202409141559720.png" alt="image.png|200"></p>
<p>设置完成之后就可以通过邮件APP来收发邮件了。<br>
以下为163企业邮箱IMAP地址及端口：</p>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>推荐</strong></th>
<th><strong>备用（尽量别用）</strong></th>
<th><strong>SSL端口</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>收信服务器</td>
<td><a href="http://hwhzimap.qiye.163.com">hwhzimap.qiye.163.com</a></td>
<td><a href="http://imap.qiye.163.com">imap.qiye.163.com</a></td>
<td>993</td>
</tr>
<tr>
<td>发信服务器</td>
<td><a href="http://hwhzsmtp.qiye.163.com">hwhzsmtp.qiye.163.com</a></td>
<td><a href="http://smtp.qiye.163.com">smtp.qiye.163.com</a></td>
<td>465</td>
</tr>
<tr>
<td><strong><em>说明</em></strong></td>
<td>推荐使用这个服务器配置</td>
<td>推荐服务器不可用，可用备用替代</td>
<td>​</td>
</tr>
</tbody>
</table>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://www.laifa.email/youxiang/204-wangyi-qiyeyouxiang-netease-enterprise-mailbox.html#%E4%B8%80%E3%80%81%E6%94%B6%E5%8F%91%E5%8F%82%E6%95%B0">网易企业邮箱：授权码登录 | 来发信 (laifa.email)</a></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>邮箱</tag>
        <tag>企业邮箱</tag>
        <tag>网易</tag>
      </tags>
  </entry>
  <entry>
    <title>mac os 配置图床上传工具picgo</title>
    <url>/posts/58482.html</url>
    <content><![CDATA[<p>如果电脑没有安装homebrew，需要先安装homebrew。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>之前我在安装git的时候已经安装过了所以这里跳过。执行下面命令安装picgo。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install picgo --cask</span><br></pre></td></tr></table></figure>
<p><img src="https://img.ycyc.win/img/202409221641180.png" alt="截屏2024-09-21 21.44.41.png|300"></p>
<p>安装完成之后在启动台就可以看到picgo的图标了，不出意外的话是无法直接打开的。这里我们需要设置一下mac的安全性策略，将允许从以下位置下载的app更改为“任何来源”。<br>
<img src="https://img.ycyc.win/img/20240922111802.png" alt="image.png|475"></p>
<span id="more"></span>
<p>如果你没有这个选项，需要在终端中执行下面的命令来打开。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> spctl --master-disable</span><br></pre></td></tr></table></figure>
<p>打开picgo之后就可以像windows平台那样进行图床设置了。<br>
<img src="https://img.ycyc.win/img/20240922112121.png" alt="image.png|475"><br>
Obsidian安装 image auto upload plugin插件之后就可以正常上传图片了。<br>
<img src="https://img.ycyc.win/img/20240922112245.png" alt="image.png|475"></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>GitHub</tag>
        <tag>PicGO</tag>
        <tag>macos</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>win11系统恢复右键菜单</title>
    <url>/posts/56765.html</url>
    <content><![CDATA[<p>win+r运行cmd命令提示窗，键入以下命令在注册表中添加相应字段即可还原鼠标右键菜单。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot; /f /ve</span><br></pre></td></tr></table></figure>
<p>如果想回复win11默认右键菜单，只需要运行下面命令，将添加的字段删除即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg delete &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;&quot; /f</span><br></pre></td></tr></table></figure>
<p>重启资源管理器生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taskkill /f /im explorer.exe &amp; start explorer.exe</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>win11</tag>
      </tags>
  </entry>
  <entry>
    <title>体验Windows store版腾讯应用宝-套壳的电脑版</title>
    <url>/posts/40842.html</url>
    <content><![CDATA[<p>昨天加入到了WIN11的开发预览版本，想要体验一下Windows store内置的腾讯应用宝–在windows系统下安装并运行应用宝里面的安卓应用。<br>
微软给出的体验腾讯应用宝的前提条件是<br>
1.加入开发者预览体验计划，需要是Canary渠道或是开发者频道；<br>
2.电脑地区设置为中国；<br>
3.windows store版本为22410.1402.100.0或以上。</p>
<p>经过漫长的更新下载、安装以及重启之后，终于升级到了Windows预览体验计划。</p>
<p><img src="https://img.ycyc.win/img/202411150928850.png" alt="image.png"><br>
接下来就是查看Windows store的版本，如果你的windows store版本低于22410.1402.100.0，需要检查安装更新。如果你的版本满足要求就可以在Windows store侧栏看到腾讯应用宝的图标了。（如果仍看不到图标，请尝试重进windows store或重启电脑）</p>
<p><img src="https://img.ycyc.win/img/202411150920360.png" alt="微信截图_20241115090927.png">我试着下载安装了几个应用，但是提示电脑不满足运行条件。查看详情之后是应为系统开启了Hyper-V功能。</p>
<span id="more"></span>
<p><img src="https://img.ycyc.win/img/202411150935111.png" alt="微信截图_20241115091043.png"><br>
在安装应用的过程中会提示关闭Hyper-V，然后期间电脑需要重启才会生效。<br>
再次进入Windows store的下载的时候一直是正在检查依赖项的状态，没有下载进度。</p>
<p><img src="https://img.ycyc.win/img/202411150921331.png" alt="image.png"><br>
反复退出商店重进尝试后终于有了进度。安装完成之后就可以运行了。<br>
<img src="https://img.ycyc.win/img/202411150941887.png" alt="image.png"><br>
大概体验了一下，和安装了模拟器运行APK并没有什么两样。转完腾讯应用宝之后我打开图片，居然提示我安装看图王打开图片🤣<br>
<img src="https://img.ycyc.win/img/202411150948948.png" alt="image.png"><br>
最后我又下载安装了腾讯应用宝电脑端软件，因为我之前桌面端模拟器用的一直都是网易MUMU，没体验过腾讯出的模拟器。用了之后发现Windows store版本的腾讯应用宝就是将应用宝电脑端暴力嵌入了进去，几乎看不出两者有什么区别或是优化。<br>
<img src="https://img.ycyc.win/img/202411151025061.png" alt="image.png"></p>
<p>而且在腾讯应用宝电脑端软件里面可以看到我通过Windows store安装的应用，所以强力证明，这两个就是一个东西。</p>
<p><img src="https://img.ycyc.win/img/202411151020726.png" alt="image.png"></p>
<p>既然如此，我为何不老老实实的用应用宝电脑端呢？非要先进入Windows store再进入腾讯应用宝呢？况且两者目前看来并没有任何体验上的差别。真不知道微软抽的哪门子疯，搞个四不像出来。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Android安卓</tag>
        <tag>腾讯</tag>
        <tag>应用宝</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>使用脚本定时自动清理openwrt的docker容器日志</title>
    <url>/posts/37327.html</url>
    <content><![CDATA[<p>最近在研究网易爆米花刮削小雅资源，由于网盘的风控策略，短时间内连续大量访问会联系报错。导致产生一堆小雅容器报错日志，想要查找有用的信息需要翻好多页，而且docker容器的日志自己并不会自动删除，就算是重启容器还会保留之前的日志一直累计，除非占用掉了全部存储空间。<br>
网上也有很多清理docker日志的方法，比如限制日志文件大小，设置定时任务等等。<br>
因为我的docker是跑在openwrt系统下面的，所以有些方法不太适用。最后在博客园找到一篇文章，里面的脚本基本上适用我目前的环境，只需要修改里面的docker安装路径即可。</p>
<h2 id="创建脚本"><a class="header-anchor" href="#创建脚本">¶</a>创建脚本</h2>
<p>首先需要确定你docker的安装路径记录下来，例如我这边docker安装在了-/mnt/mmc1-4/docker目录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/docker-sh</span><br><span class="line"></span><br><span class="line">cat &gt; /opt/docker-sh/clean_docker_log.sh&lt;&lt; EOF</span><br><span class="line">#!/bin/sh </span><br><span class="line">echo &quot;======== start clean docker containers logs ========&quot;  </span><br><span class="line">logs=\$(find /mnt/mmc1-4/docker/containers/ -name *-json.log)  </span><br><span class="line">for log in \$logs  </span><br><span class="line">        do  </span><br><span class="line">                echo &quot;clean logs : \$log&quot;  </span><br><span class="line">                cat /dev/null &gt; \$log  </span><br><span class="line">        done  </span><br><span class="line">echo &quot;======== end clean docker containers logs ========&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &gt; /opt/docker-sh/docker_log_size.sh&lt;&lt; EOF</span><br><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">echo &quot;======== docker containers logs file size ========&quot;  </span><br><span class="line"></span><br><span class="line">logs=\$(find /mnt/mmc1-4/docker/containers/ -name *-json.log)  </span><br><span class="line"></span><br><span class="line">for log in \$logs  </span><br><span class="line">        do  </span><br><span class="line">             ls -lh \$log   </span><br><span class="line">        done </span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod +x docker_log_size.sh clean_docker_log.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意脚本中两处路径需要替换成你实际docker的安装路径！</p>
</blockquote>
<h2 id="手动清理"><a class="header-anchor" href="#手动清理">¶</a>手动清理</h2>
<p>进入到脚本所在文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd opt/docker-sh  </span><br></pre></td></tr></table></figure>
<p>查看日志大小</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./docker_log_size.sh </span><br></pre></td></tr></table></figure>
<p>清理所有日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./clean_docker_log.sh</span><br></pre></td></tr></table></figure>
<h2 id="设置定时任务"><a class="header-anchor" href="#设置定时任务">¶</a>设置定时任务</h2>
<p>编辑定时任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -e  </span><br></pre></td></tr></table></figure>
<p>键入 a 进入编辑模式，创建定时任务（每天晚上2点定期执行脚本清空容器日志）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 2 * * * /opt/docker-sh/clean_docker_log.sh  </span><br></pre></td></tr></table></figure>
<p>保存退出:wq 回车</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://www.cnblogs.com/tk-bolg/p/17879011.html">定时清理docker容器日志 - 一看就懂 - 博客园</a></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>docker</tag>
        <tag>日志</tag>
        <tag>清理</tag>
      </tags>
  </entry>
  <entry>
    <title>利用cloudflare+outlook创建自定义域名邮箱收发邮件</title>
    <url>/posts/18268.html</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>前几天写了一篇介绍在iOS端收发企业邮箱的方法。<a href="https://ycyc.win/posts/37524">iOS端收发163域名邮箱邮件IMAP | 渊澄|YCYC.WIN</a>，当时使用的是网易的免费企业邮。因为我之前就有域名加到网易企业邮了，管理员账号是用的原来的域名设置的，所以我想要变更为新的域名账号。界面上找了一圈没找到修改入口，于是我就给客服发了一封站内信，咨询如何更换管理员账号。于是今天上午不出意料的接到了网易打来的推销电话，没有告我如何更换管理员账号，反而是推销了一番他们的收费企业邮箱。还有让人不可思议的是，当时我提交的站内信仅仅留了联系邮箱，并未留下我的联系电话。。。<br>
于是乎想起了之前在cloudflare看过一眼的电子邮件转发功能。这个功能是新建一个你的域名邮箱地址，然后可以将这个地址收到的邮件转发到你现有的其他邮箱里面去。</p>
<h2 id="操作"><a class="header-anchor" href="#操作">¶</a>操作</h2>
<p>进入cloudflare相应的域名主页，左侧导航找到电子邮件路由。<br>
<img src="https://img.ycyc.win//img/202409231624866.png" alt="image.png|300"><br>
设置方法很简单，根据界面提示操作就可以了。创建一个自定义地址，然后操作选择“转发电子邮件”，接着输入你现有的outlook电子邮箱地址。</p>
<span id="more"></span>
<p><img src="https://img.ycyc.win//img/202409231625621.png" alt="image.png|300"><br>
添加完成之后cloudflare会自动为域名做相关解析，并且会向你的outlook邮箱发送验证链接。<br>
<img src="https://img.ycyc.win//img/202409231718249.png" alt="image.png"><br>
等待验证完成后状态变为活动即可。</p>
<p><img src="https://img.ycyc.win//img/202409231721653.png" alt="image.png"></p>
<p>这里需要说一下catch-all功能，开启这个功能后，所有来自你域名的邮件都会被转发到你指定的邮箱。也就是说理论上你可以创建无数个虚拟邮箱地址，邮件都会被转到你设置好的邮箱里面去。</p>
<h2 id="outlook添加别名实现邮件发送"><a class="header-anchor" href="#outlook添加别名实现邮件发送">¶</a>outlook添加别名实现邮件发送</h2>
<p>参考【小白向】文章中关于在outlook添加别名的路径好像已经失效了。经过查阅微软相关文档，<a href="https://support.microsoft.com/zh-cn/office/%E5%9C%A8-outlook-com-%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%88%96%E5%88%A0%E9%99%A4%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%88%AB%E5%90%8D-459b1989-356d-40fa-a689-8f285b13f1f2?ui=zh-cn&amp;rs=zh-cn&amp;ad=cn">在 Outlook.com 中添加或删除电子邮件别名 - Microsoft 支持</a>，可以在该帮助文档内点击链接前往别名管理页面（ <a href="https://go.microsoft.com/fwlink/p/?linkid=864833">https://go.microsoft.com/fwlink/p/?linkid=864833</a> ）。<br>
在下图所示页面中选择“将现有电子邮件地址添加为 Microsoft 帐户别名”并输入你的自定义邮箱地址，点击添加别名。</p>
<p><img src="https://img.ycyc.win//img/202409231725795.png" alt="image.png"></p>
<p>随后你的邮箱会收到一封验证邮件。点击验证邮件链接完成验证即可。</p>
<h2 id="验证"><a class="header-anchor" href="#验证">¶</a>验证</h2>
<p>设置完成之后就可以试着往你创建的自定义邮箱里面发一封邮件了，看看你设置好的转发邮箱里面有没有收到。发送的时候在你的outlook发件人那里填入你设置的自定义邮箱地址就可以了。<br>
<img src="https://img.ycyc.win//img/202409231732961.png" alt="image.png"></p>
<h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2>
<p>当然这也并非真正意义上的企业邮箱，只是套壳了自定义域名，利用了cloudflare的邮件转发，核心服务还是调用的微软的outlook。</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://blog.fishze.com/archives/287">【小白向】使用Cloudflare搭建无服务器无成本域名邮箱 - 鱼のBlog (fishze.com)</a></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>邮件</tag>
        <tag>微软</tag>
        <tag>邮箱</tag>
        <tag>企业邮箱</tag>
        <tag>Cloudflare</tag>
        <tag>outlook</tag>
      </tags>
  </entry>
  <entry>
    <title>利用cloudflare+outlook创建自定义域名邮箱收发邮件</title>
    <url>/posts/18268.html</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>前几天写了一篇介绍在iOS端收发企业邮箱的方法。<a href="https://ycyc.win/posts/37524">iOS端收发163域名邮箱邮件IMAP | 渊澄|YCYC.WIN</a>，当时使用的是网易的免费企业邮。因为我之前就有域名加到网易企业邮了，管理员账号是用的原来的域名设置的，所以我想要变更为新的域名账号。界面上找了一圈没找到修改入口，于是我就给客服发了一封站内信，咨询如何更换管理员账号。于是今天上午不出意料的接到了网易打来的推销电话，没有告我如何更换管理员账号，反而是推销了一番他们的收费企业邮箱。还有让人不可思议的是，当时我提交的站内信仅仅留了联系邮箱，并未留下我的联系电话。。。<br>
于是乎想起了之前在cloudflare看过一眼的电子邮件转发功能。这个功能是新建一个你的域名邮箱地址，然后可以将这个地址收到的邮件转发到你现有的其他邮箱里面去。</p>
<h2 id="操作"><a class="header-anchor" href="#操作">¶</a>操作</h2>
<p>进入cloudflare相应的域名主页，左侧导航找到电子邮件路由。<br>
<img src="https://img.ycyc.win//img/202409231624866.png" alt="image.png|300"><br>
设置方法很简单，根据界面提示操作就可以了。创建一个自定义地址，然后操作选择“转发电子邮件”，接着输入你现有的outlook电子邮箱地址。</p>
<span id="more"></span>
<p><img src="https://img.ycyc.win//img/202409231625621.png" alt="image.png|300"><br>
添加完成之后cloudflare会自动为域名做相关解析，并且会向你的outlook邮箱发送验证链接。<br>
<img src="https://img.ycyc.win//img/202409231718249.png" alt="image.png"><br>
等待验证完成后状态变为活动即可。</p>
<p><img src="https://img.ycyc.win//img/202409231721653.png" alt="image.png"></p>
<p>这里需要说一下catch-all功能，开启这个功能后，所有来自你域名的邮件都会被转发到你指定的邮箱。也就是说理论上你可以创建无数个虚拟邮箱地址，邮件都会被转到你设置好的邮箱里面去。</p>
<h2 id="outlook添加别名实现邮件发送"><a class="header-anchor" href="#outlook添加别名实现邮件发送">¶</a>outlook添加别名实现邮件发送</h2>
<p>参考【小白向】文章中关于在outlook添加别名的路径好像已经失效了。经过查阅微软相关文档，<a href="https://support.microsoft.com/zh-cn/office/%E5%9C%A8-outlook-com-%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%88%96%E5%88%A0%E9%99%A4%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%88%AB%E5%90%8D-459b1989-356d-40fa-a689-8f285b13f1f2?ui=zh-cn&amp;rs=zh-cn&amp;ad=cn">在 Outlook.com 中添加或删除电子邮件别名 - Microsoft 支持</a>，可以在该帮助文档内点击链接前往别名管理页面（ <a href="https://go.microsoft.com/fwlink/p/?linkid=864833">https://go.microsoft.com/fwlink/p/?linkid=864833</a> ）。<br>
在下图所示页面中选择“将现有电子邮件地址添加为 Microsoft 帐户别名”并输入你的自定义邮箱地址，点击添加别名。</p>
<p><img src="https://img.ycyc.win//img/202409231725795.png" alt="image.png"></p>
<p>随后你的邮箱会收到一封验证邮件。点击验证邮件链接完成验证即可。</p>
<h2 id="验证"><a class="header-anchor" href="#验证">¶</a>验证</h2>
<p>设置完成之后就可以试着往你创建的自定义邮箱里面发一封邮件了，看看你设置好的转发邮箱里面有没有收到。发送的时候在你的outlook发件人那里填入你设置的自定义邮箱地址就可以了。<br>
<img src="https://img.ycyc.win//img/202409231732961.png" alt="image.png"></p>
<h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2>
<p>当然这也并非真正意义上的企业邮箱，只是套壳了自定义域名，利用了cloudflare的邮件转发，核心服务还是调用的微软的outlook。</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://blog.fishze.com/archives/287">【小白向】使用Cloudflare搭建无服务器无成本域名邮箱 - 鱼のBlog (fishze.com)</a></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>邮件</tag>
        <tag>微软</tag>
        <tag>邮箱</tag>
        <tag>企业邮箱</tag>
        <tag>Cloudflare</tag>
        <tag>outlook</tag>
      </tags>
  </entry>
  <entry>
    <title>清理docker占用空间脚本</title>
    <url>/posts/32581.html</url>
    <content><![CDATA[<hr>
<p>title: 清理docker占用空间脚本<br>
categories:</p>
<ul>
<li>Docker<br>
tags:</li>
<li>docker</li>
<li>N1</li>
<li>linux<br>
cover: ‘<a href="https://img.ycyc.win/img/20220808135436.png">https://img.ycyc.win/img/20220808135436.png</a>’<br>
abbrlink: 32581<br>
date: 2022-08-08 13:28:03<br>
sticky:</li>
</ul>
<hr>
<p><img src="https://img.ycyc.win/img/20220808135436.png" alt="20220808135436"><br>
docker运行一段时间后，占用的空间会越来越大，导致升级容器镜像的时候总会报空间不够，导致升级失败，之前我都是重装系统来解决的，这无疑会加大工作量，也不是个明智之举。<br>
其实运行下面的命令就会自动清理docker无用的空间。<br>
<img src="https://img.ycyc.win/img/think01.jpg" alt="think01"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system df -v</span><br></pre></td></tr></table></figure>
<p>列出docker使用空间详情</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure>
<p>该命令会删除暂停中的容器、没有关联容器的镜像、没有 tag 的镜像、没有被使用的数据卷，简单而言，没有在 run 或被使用的东西都被清理掉，注意，如果你有一些暂时暂停的容器，这个命令也会将其清理。<br>
如果不希望删除镜像，而只是将无用的数据卷、容器等删除，则使用 docker system prune 命令（即不添加 - a 参数）</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>N1</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在macos上设置github</title>
    <url>/posts/46564.html</url>
    <content><![CDATA[<h2 id="安装homebrew和git"><a class="header-anchor" href="#安装homebrew和git">¶</a>安装homebrew和git</h2>
<p>安装homebrew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>等待homebrew安装完成之后开始安装git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>
<h2 id="配置github账户信息并生成ssh"><a class="header-anchor" href="#配置github账户信息并生成ssh">¶</a>配置github账户信息并生成ssh</h2>
<p>安装完成git之后开始配置github账户信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;miaoyanginfo&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;paulmiao@me.com&quot;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>在本地生成ssh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;paulmiao@me.com&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="将ssh密钥添加到ssh-agent"><a class="header-anchor" href="#将ssh密钥添加到ssh-agent">¶</a>将ssh密钥添加到ssh-agent</h2>
<p>后台启动ssh代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后修改~/.ssh/config</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.ssh/config</span><br></pre></td></tr></table></figure>
<p>插入下面的字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host *</span><br><span class="line">  AddKeysToAgent yes</span><br><span class="line">  UseKeychain yes</span><br><span class="line">  IdentityFile ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure>
<p>将ssh私钥添加到ssh-agent并将密码存储在密钥链中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add --apple-use-keychain ~/.ssh/id_ed25519</span><br></pre></td></tr></table></figure>
<h2 id="将ssh密钥添加到github账户"><a class="header-anchor" href="#将ssh密钥添加到github账户">¶</a>将ssh密钥添加到github账户</h2>
<p>将ssh公钥复制到剪贴板。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure>
<p>然后粘贴到github账户设置里面的ssh key 中。</p>
<p><img src="https://img.ycyc.win/img/202409222129621.png" alt="image.png|300"></p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://blog.51cto.com/u_14201949/6145688">https://blog.51cto.com/u_14201949/6145688</a><br>
<a href="https://www.php.cn/faq/541966.html">https://www.php.cn/faq/541966.html</a></p>
<p>Windows平台的部署可以参阅我的另一篇文章<a href="https://ycyc.win/posts/31120?highlight=git#2-%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83">在GitHub上部署HEXO | 渊澄|YCYC.WIN</a></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>苹果</tag>
        <tag>macos</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>清理docker占用空间脚本</title>
    <url>/posts/32581.html</url>
    <content><![CDATA[<p>docker运行一段时间后，占用的空间会越来越大，导致升级容器镜像的时候总会报空间不够，导致升级失败，之前我都是重装系统来解决的，这无疑会加大工作量，也不是个明智之举。<br>
其实运行下面的命令就会自动清理docker无用的空间。<br>
<img src="https://img.ycyc.win/img/think01.jpg" alt="think01"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system df -v</span><br></pre></td></tr></table></figure>
<p>列出docker使用空间详情</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure>
<p>该命令会删除暂停中的容器、没有关联容器的镜像、没有 tag 的镜像、没有被使用的数据卷，简单而言，没有在 run 或被使用的东西都被清理掉，注意，如果你有一些暂时暂停的容器，这个命令也会将其清理。<br>
如果不希望删除镜像，而只是将无用的数据卷、容器等删除，则使用 docker system prune 命令（即不添加 - a 参数）</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>N1</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>渊澄短链接服务上线了！</title>
    <url>/posts/37049.html</url>
    <content><![CDATA[<p>利用国庆假期搭建了一个短链接生成服务，使用任意长链接可以生成类似于<a href="https://to.ycyc.win/yourlink">https://to.ycyc.win/yourlink</a> 的短链接，虽然也不是很短😜，但有胜于无。<br>
站点地址 <a href="https://to.ycyc.win">https://to.ycyc.win</a><br>
使用方法很简单，在输入框输入你需要生成短链接的长链接，点击生成按钮即可。<br>
然后你也可以使用备用站点 <a href="https://2.ycyc.win">https://2.ycyc.win</a> 来生成（2和to同音，而且又少了一个字符👏）。两个站点地址数据共享，后缀可通用。</p>
<p><img src="https://img.ycyc.win/img/202410021236082.png" alt="image.png"></p>
<blockquote>
<p>重要声明：免费服务，使用前需遵守中华人民共和国相关法律法规，切勿用于非法用途，以免服务被封，影响其他人的使用！</p>
</blockquote>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>短链接</tag>
        <tag>渊澄</tag>
      </tags>
  </entry>
  <entry>
    <title>爱普生L3250系列通过docker支持Airprint打印</title>
    <url>/posts/63379.html</url>
    <content><![CDATA[<p>最近入手了一台爱普生的L3251彩色喷墨打印机，可以连WIFI实现网络共享，但有点遗憾的是机器原生并不支持苹果的Airprint协议，也就是无法通过iOS设备直接打印，但是官方提供了一款名为“Epson Smart Panel”的软件，在该软件中配置好打印机之后，可以直接通过该软件打印照片或文档等内容，也可以在相册中选择需要打印的图片，点击共享按钮，选择“使用epson打印”，系统可以直接跳到该软件，完成打印任务，如果你在共享中直接选择系统自带的打印服务，是发现不了打印机的。</p>
<span id="more"></span>
<p><img src="https://img.ycyc.win/img/20240225172222.png" alt="20240225172222"><br>
虽然这样也可以完成手机端的打印操作，但始终没有类似于airprint那样的丝滑和简洁。下面我们来通过在docker中创建cups容器来让机器支持airprint协议。<br>
首先说下我现在的设备情况及网络环境，打印机已经通过wifi接入到了家里的网络中，并且获取到了ip地址，另外我家里有一台斐讯N1，刷了F大的openwrt系统用作旁路由，并且系统内置了docker环境。<br>
首先我们浏览器登录打印机获取到的IP地址，选择高级设置。<br>
<img src="https://img.ycyc.win/img/20240225171145.png" alt="20240225171145"><br>
登录密码是我们的机器序列号，可以在机身上的标签中找到。<br>
依次进入services-protocol，然后在右边找到ipp地址并复制出来备用。<br>
<img src="https://img.ycyc.win/img/20240225171309.png" alt="20240225171309"><br>
由于N1是基于arm架构的主机，而非我们常用的x86，所以常规的cups容器是无法在N1上运行的，我们需要找到基于arm架构编译的cups容器。<br>
运行下面的命令，拉取并运行容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">       --name=cups \</span><br><span class="line">       --restart=always \</span><br><span class="line">       --net=host \</span><br><span class="line">       -v /var/run/dbus:/var/run/dbus \</span><br><span class="line">       -v ~/airprint_data/config:/config \</span><br><span class="line">       -v ~/airprint_data/services:/services \</span><br><span class="line">       -e CUPSADMIN=&#x27;admin&#x27; \</span><br><span class="line">       -e CUPSPASSWORD=&#x27;password&#x27; \</span><br><span class="line">       jysky007/cups:v1</span><br></pre></td></tr></table></figure>
<p>确保该容器已正常运行，登录N1的ip地址加端口631，进入cups主页面。用户名密码为admin和password。<br>
<img src="https://img.ycyc.win/img/20240225170901.png" alt="20240225170901"><br>
点击添加打印机。<br>
<img src="https://img.ycyc.win/img/20240225170940.png" alt="20240225170940"><br>
选择ipp协议然后继续。<br>
<img src="https://img.ycyc.win/img/20240225171030.png" alt="20240225171030"><br>
输入我们之前复制出来的ipp地址，打印机制造商选EPSON，型号选择如图所示的325，然后添加打印机。<br>
<img src="https://img.ycyc.win/img/20240225171628.png" alt="20240225171628"><br>
添加完成之后我们切换到Prints页面，找到刚才添加的打印机，然后打印测试页试一下是否可以正常打印。<br>
<img src="https://img.ycyc.win/img/20240225171743.png" alt="20240225171743"><br>
如果打印测试页正常之后，我们回到手机上点打印，然后就可以发现我们添加的打印机了，设置好打印参数之后，直接打印就可以了。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>苹果</tag>
        <tag>L3250</tag>
        <tag>打印机</tag>
        <tag>Airprint</tag>
        <tag>iOS</tag>
        <tag>EPSON</tag>
        <tag>爱普生</tag>
      </tags>
  </entry>
  <entry>
    <title>用支付宝给美区appleID充值</title>
    <url>/posts/25411.html</url>
    <content><![CDATA[<p>之前使用了一个网友共享的appleID来下载小火箭，最近刚换了手机，密码早已失效，于是想着用自己的美区ID买下软件，也不贵，2.99美元，折合人民币算下来不到30块钱，而且是终身免费升级，自己平时也是要用到的，干脆买下来也不亏。<br>
美区ID已经有了，接下来的问题就是如何付款购买，手头没有外币信用卡，也没有paypal，所以只能用礼品卡充值了。网上搜了很多方法，其中比较简单，速度也比较快的是使用支付宝来购买。</p>
<span id="more"></span>
<p>首先需要进入支付宝，左上角地区那里切换带海外，美国，旧金山。<br>
<img src="https://img.ycyc.win/img/ad001.jpg" alt="ad001"><br>
然后搜索Pockytshop，进入小程序。<br>
<img src="https://img.ycyc.win/img/ad002.jpg" alt="ad002"><br>
找到App Store图标，点金进去之后可以任意选择2-500美金进行充值，首次使用需要输入姓名和邮箱注册Pockytshop账户。<br>
<img src="https://img.ycyc.win/img/ad003.jpg" alt="ad003"><br>
接着付款成功之后页面会出现礼品卡兑换码，复制兑换码，到APPstore进行充值就可以了。<br>
<img src="https://img.ycyc.win/img/ad004.jpg" alt="ad004"></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>美区</tag>
        <tag>appleID</tag>
        <tag>支付宝</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖Docker部署CentOS系统</title>
    <url>/posts/62297.html</url>
    <content><![CDATA[<h2 id="下载镜像"><a class="header-anchor" href="#下载镜像">¶</a>下载镜像</h2>
<p>打开群晖的DOcker套件，切换到注册表选项卡，找到Centos，下载，标签选择latest。<br>
<img src="https://img.ycyc.win/img/20220429095414.png" alt="20220429095414"><br>
下载完成之后我们可以在映像选项卡中找到它。</p>
<h2 id="配置环境"><a class="header-anchor" href="#配置环境">¶</a>配置环境</h2>
<p>高级设置里面将自动重启打勾。<br>
<img src="https://img.ycyc.win/img/20220429095758.png" alt="20220429095758"><br>
切换到存储空间，配置本地文件夹映射到镜像的data文件夹。<br>
<img src="https://img.ycyc.win/img/20220429095914.png" alt="20220429095914"><br>
指定一个本地未使用的端口映射到镜像的22端口。<br>
<img src="https://img.ycyc.win/img/20220429100121.png" alt="20220429100121"><br>
完成上面设置之后运行容器。</p>
<h2 id="系统初始化"><a class="header-anchor" href="#系统初始化">¶</a>系统初始化</h2>
<p>进入终端机更新系统：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>
<p>安装所需的软件包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install vim openssl openssh-server net-tools initscripts passwd -y</span><br></pre></td></tr></table></figure>
<p>如果你在运行上面的更新命令时报错，需要依次执行下方命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">sed -i <span class="string">&#x27;s/mirrorlist/#mirrorlist/g&#x27;</span> /etc/yum.repos.d/CentOS-*</span><br><span class="line">sed -i <span class="string">&#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27;</span> /etc/yum.repos.d/CentOS-*</span><br></pre></td></tr></table></figure>
<h2 id="设置SSH连接"><a class="header-anchor" href="#设置SSH连接">¶</a>设置SSH连接</h2>
<h3 id="创建SSH-key"><a class="header-anchor" href="#创建SSH-key">¶</a>创建SSH key</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -q -t rsa -b 2048 -f /etc/ssh/ssh_host_rsa_key -N <span class="string">&#x27;&#x27;</span> </span><br><span class="line"> </span><br><span class="line">ssh-keygen -q -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N <span class="string">&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">ssh-keygen -t dsa -f /etc/ssh/ssh_host_ed25519_key -N <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>UsePAM yes 改为 UsePAM no</p>
<h3 id="修改ssh-config"><a class="header-anchor" href="#修改ssh-config">¶</a>修改ssh_config</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>UsePAM yes 改为 UsePAM no</p>
<h3 id="启动ssh"><a class="header-anchor" href="#启动ssh">¶</a>启动ssh</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/sbin/sshd -D &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/usr/sbin/sshd -D &amp;&quot;</span>  &gt;&gt; /etc/rc.local  添加到开机启动，就不用每次重启后运行了</span><br></pre></td></tr></table></figure>
<h3 id="修改root密码"><a class="header-anchor" href="#修改root密码">¶</a>修改root密码</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure>
<h3 id="使用第三方SSH工具登录"><a class="header-anchor" href="#使用第三方SSH工具登录">¶</a>使用第三方SSH工具登录</h3>
<p>设置完成之后我们可以使用其他第三方SSH工具来登录到我们的CentOS系统，比如Putty。<br>
输入主机IP，SSH端口为我们映射的端口号，用户名root，密码时我们上一步修改的密码。<br>
<img src="https://img.ycyc.win/img/20220429135856.png" alt="20220429135856"></p>
<h3 id="收工"><a class="header-anchor" href="#收工">¶</a>收工</h3>
<p>至此我们就完成了在群晖Docker上安装部署CentOS的过程，接下来我们就可以用SSH工具在我们搭建的CentOS上部署各种服务了<br>
。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>群晖</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖VPN server套件安装配置</title>
    <url>/posts/48504.html</url>
    <content><![CDATA[<h3 id="下载安装套件"><a class="header-anchor" href="#下载安装套件">¶</a>下载安装套件</h3>
<p>根据你当前DSM系统的版本安装对应版本的套件，如不确定，可以下载最新版本的套件尝试，如安装失败，会提示可安装版本号。<br>
<a href="https://archive.synology.com/download/Package/VPNCenter">https://archive.synology.com/download/Package/VPNCenter</a></p>
<span id="more"></span>
<h3 id="DDNS配置"><a class="header-anchor" href="#DDNS配置">¶</a>DDNS配置</h3>
<p><img src="https://img.ycyc.win/img/20240204110234.png" alt="20240204110234"></p>
<h3 id="安装证书"><a class="header-anchor" href="#安装证书">¶</a>安装证书</h3>
<h3 id="套件配置"><a class="header-anchor" href="#套件配置">¶</a>套件配置</h3>
<p><img src="https://img.ycyc.win/img/20240204105551.png" alt="20240204105551"></p>
<h4 id="pptp"><a class="header-anchor" href="#pptp">¶</a>pptp</h4>
<p><img src="https://img.ycyc.win/img/20240204105629.png" alt="20240204105629"></p>
<h4 id="openvpn"><a class="header-anchor" href="#openvpn">¶</a>openvpn</h4>
<p><img src="https://img.ycyc.win/img/20240204105710.png" alt="20240204105710"></p>
<h4 id="l2tp-ipsec"><a class="header-anchor" href="#l2tp-ipsec">¶</a>l2tp/ipsec</h4>
<p><img src="https://img.ycyc.win/img/20240204105806.png" alt="20240204105806"></p>
<h3 id="客户端配置"><a class="header-anchor" href="#客户端配置">¶</a>客户端配置</h3>
<p><img src="https://img.ycyc.win/img/20240204105953.png" alt="20240204105953"></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>OPENVPN</tag>
        <tag>VPN</tag>
        <tag>群晖</tag>
        <tag>DDNS</tag>
        <tag>DSM</tag>
        <tag>L2TP</tag>
        <tag>PPTP</tag>
      </tags>
  </entry>
  <entry>
    <title>魔改版picgo体验-piclist</title>
    <url>/posts/6420.html</url>
    <content><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2>
<p>今天想着在图片上加水印，然后去看了picgo的插件。找到两个水印插件，设置完成之后一上传图片picgo程序就会闪退，不知道是不是个例。看了下插件已经3年没更新了，可能和新版的picgo不太兼容。然后在picgo的github讨论区看到有人推荐piclist。<br>
piclist是在picgo的基础上进行二次开发的图片上传工具。完整保留了picgo的全部功能，而且增加了更多细致化的设置选项，并且原生支持文字或图片水印，无需安装三方插件。<br>
按下图所示，安装完piclist后设置页面会有一键从picgo迁移配置的选项，可以导入在picgo的基本上所有设置项目，无需重复进行配置。<br>
<img src="https://img.ycyc.win/img/202409241118118.png" alt="piclist1.png"></p>
<p>另外设置页面可供自定义的选项也比picgo要多，可以满足更多人的需求。在图片上传设置里面可以设置水印信息。如果要添加图片水印，路径要填入计算机本地的路径，填入互联网地址不生效。</p>
<span id="more"></span>
<p><img src="https://img.ycyc.win/img/202409241120525.png" alt="piclist2.png"></p>
<p>另外obsidian的 image upload plugin插件还支持piclist的删除接口，可以在obsidian里面直接删除piclist里面的图片。<br>
<img src="https://img.ycyc.win/img/202409241122681.png" alt="piclist3.png"></p>
<p>当然piclist也支持mac平台安装，并且还有与vscode配套使用的插件- <a href="https://github.com/Kuingsmile/vs-PicList/">VS-PicList</a>。至于稳定性如何，需要交给时间来检验了。<br>
<img src="https://img.ycyc.win/img/202409241126468.png" alt="image.png"></p>
<h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2>
<p>本文的配图使用的就是piclist上传的，并且添加了水印。</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://github.com/Kuingsmile/PicList/blob/dev/README_cn.md">PicList/README_cn.md at dev · Kuingsmile/PicList (github.com)</a></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>PicGO</tag>
        <tag>piclist</tag>
        <tag>图片</tag>
        <tag>上传</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署Hexo管理工具QEXO</title>
    <url>/posts/24512.html</url>
    <content><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2>
<p>去年的时候我在Vercel平台部署过QEXO-一款可以管理Hexo博客系统的管理后台。<a href="https://iycyc.com/posts/23533">让HEXO“动起来”-体验Qexo静态博客管理面板 | 渊澄</a>但是由于vercel在国内的访问速度并不快，所以我很少使用，还是一直用VScode或是Obsidian来更新站点。其实Qexo也可以通过docker部署在本地。下面记录一下我在istoreOS上使用docker部署Qexo的过程。</p>
<h2 id="开干"><a class="header-anchor" href="#开干">¶</a>开干</h2>
<h3 id="SSH到istoreOS拉取镜像"><a class="header-anchor" href="#SSH到istoreOS拉取镜像">¶</a>SSH到istoreOS拉取镜像</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull abudulin/qexo:latest</span><br></pre></td></tr></table></figure>
<p>如果你的网络环境无法直接拉取，可以尝试运行下面命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull docker.miaoyang.win/abudulin/qexo:latest</span><br></pre></td></tr></table></figure>
<h3 id="创建容器"><a class="header-anchor" href="#创建容器">¶</a>创建容器</h3>
<p>使用下面的命令行创建并运行容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=unless-stopped \</span><br><span class="line">    -v $(pwd)/db:/app/db \</span><br><span class="line">    -p 8000:8000 \</span><br><span class="line">    -e TIMEOUT=600 \</span><br><span class="line">    --name=&quot;qexo&quot; \</span><br><span class="line">    abudulin/qexo:latest</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将命令中的$(pwd)换成本地存储数据的路径，将8000替换为你喜欢的端口号。</p>
</blockquote>
<h3 id="基本设置"><a class="header-anchor" href="#基本设置">¶</a>基本设置</h3>
<p>如果容器成功创建并运行之后就可以在浏览器中输入ip:8000访问到搭建好的Qexo页面了。<br>
<img src="https://img.ycyc.win/img/202502081617665.png" alt="image.png"></p>
<p>根据设置向导填入相关信息即可进入管理面板。<br>
<img src="https://img.ycyc.win/img/202502081621296.png" alt="image.png"></p>
<h3 id="外网访问"><a class="header-anchor" href="#外网访问">¶</a>外网访问</h3>
<p>如果你需要在外网环境下访问搭建的Qexo，可以使用NAT端口映射或是内网穿透等方法来实现。顺便说一下，如果你需要在网页中调用说说或是友情链接组件，需要确保你的实例在外网可以通过https访问。</p>
<h3 id="数据迁移"><a class="header-anchor" href="#数据迁移">¶</a>数据迁移</h3>
<p>如果你和我一样之前在vercel部署过QEXO，然后现在想把数据迁回本地部署的Docker实例中，可以登录之前的QEXO，然后在设置中找到迁移选项，导出配置文件，导入到新搭建的QEXO中。导入完成后重启Docker容器即可。<br>
<img src="https://img.ycyc.win/img/202502180946038.png" alt="image.png"></p>
<p><img src="https://img.ycyc.win/img/202502180945878.png" alt="image.png"></p>
<p>⚠️upload failed, check dev console<br>
⚠️upload failed, check dev console</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>HEXO</tag>
        <tag>QEXO</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>京东亚瑟AX1800pro刷写GPT大分区记录</title>
    <url>/posts/49158.html</url>
    <content><![CDATA[<p>由于亚瑟原有的分区大小只有60M，所以我们只能刷写60M以内的固件，超过60M的固件写入就启动不了了，这也是我之前刷其他固件失败的根本原因。<br>
刷写教程选自<a href="https://www.yindan.me/tutorial/jdc-ax1800-pro.html">小白也能看懂的京东云亚瑟 AX1800 Pro 刷机教程 - 银弹博客</a>，这里仅做记录。</p>
<h3 id="上传所需文件"><a class="header-anchor" href="#上传所需文件">¶</a>上传所需文件</h3>
<p>使用 WINSCP 将sgdisk.ipk安装包以及 GPT 分区表文件上传到 <code>/tmp</code> 目录，为方便操作，这里将sgdisk安装包重命名为sgdisk.ipk，GPT文件重命名为GPT.bin。</p>
<h3 id="安装sgdisk"><a class="header-anchor" href="#安装sgdisk">¶</a>安装sgdisk</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opkg install /tmp/sgdisk.ipk</span><br></pre></td></tr></table></figure>
<h3 id="刷入GPT"><a class="header-anchor" href="#刷入GPT">¶</a>刷入GPT</h3>
<p>然后执行以下命令，注意修改命令中的 <code>GPT.bin</code> 为实际的文件名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/tmp/GPT.bin of=/dev/mmcblk0 bs=512 count=34 conv=fsync</span><br><span class="line"></span><br><span class="line"># 验证刷入的 MD5</span><br><span class="line">dd if=/dev/mmcblk0 bs=512 count=34 | md5sum</span><br></pre></td></tr></table></figure>
<h3 id="新建-storage-分区："><a class="header-anchor" href="#新建-storage-分区：">¶</a>新建 storage 分区：</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sgdisk -e -n 0:0:0 -c 0:storage -t 0:1B1720DA-A8BB-4B6F-92D2-0A93AB9609CA -p /dev/mmcblk0</span><br></pre></td></tr></table></figure>
<p>提示 <code>The operation has completed successfully</code> 说明成功新建分区。</p>
<span id="more"></span>
<h3 id="备份并下载修改后的分区表："><a class="header-anchor" href="#备份并下载修改后的分区表：">¶</a>备份并下载修改后的分区表：</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/dev/mmcblk0 bs=512 count=34 of=/tmp/mmcblk0_GPT_resize.bin conv=fsync</span><br></pre></td></tr></table></figure>
<p>最后运行 <code>reboot</code> 重启路由器。<br>
如果重启后overlay分区大小没有变化，或者不是你刷入的大小，可进入uboot后重写刷写固件。</p>
<h3 id="附件下载"><a class="header-anchor" href="#附件下载">¶</a>附件下载</h3>
<p>压缩包内有三个GPT文件，分别对应512M、1G和2G，可按需选择所刷入的分区大小。</p>
<p>通过网盘分享的文件：亚瑟刷写GPT大分区文件包.rar<br>
链接: <a href="https://pan.baidu.com/s/1Y2VILheJHhskefQvqwQj2Q?pwd=yttp">https://pan.baidu.com/s/1Y2VILheJHhskefQvqwQj2Q?pwd=yttp</a> 提取码: yttp<br>
–来自百度网盘超级会员v3的分享</p>
<h3 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h3>
<p><a href="https://www.yindan.me/tutorial/jdc-ax1800-pro.html">小白也能看懂的京东云亚瑟 AX1800 Pro 刷机教程 - 银弹博客</a><br>
刷机过程中的其他步骤也可以参阅，整个过程都比较详细。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>京东</tag>
        <tag>AX1800PRO</tag>
        <tag>亚瑟</tag>
        <tag>GPT</tag>
        <tag>大分区</tag>
      </tags>
  </entry>
  <entry>
    <title>京东亚瑟重刷istoreOS以及overlay分区扩容记录</title>
    <url>/posts/22169.html</url>
    <content><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2>
<p>去年在京东入手的亚瑟路由器，之前刷的是华硕固件（<a href="https://iycyc.com/posts/12783">京东AX1800 pro拆机刷uboot及华硕固件 | 渊澄</a>），一直当作AP来使用，也比较稳定。但最近折腾N1旁路由觉得越来越不方便，就想着将主路由也换成OpenWRT，于是就想着将亚瑟刷成istoreOS做主路由来用。但是我进入uboot模式刷了好几遍固件，都刷不进去，具体表现为刷完固件重启之后网卡每隔10秒左右都会断开一次，IP地址也获取不了。于是我又回头看了一遍早以前的教程，发现我少了一步，那就是在刷正式版固件之前需要先刷一个底包，然后进入iStoreOS之后再升级正式版。<br>
教程链接 <a href="https://post.smzdm.com/p/agq26zlw/">记录自己刷机京东云亚瑟 AX1800 Pro遇到的坑_路由器_什么值得买</a><br>
以下仅作操作步骤记录。</p>
<h2 id="进入uboot模式"><a class="header-anchor" href="#进入uboot模式">¶</a>进入uboot模式</h2>
<p>用卡针按住reset，然后接通电源，指示灯会闪几次红色，然后变成蓝色，这时候就可以放开reset了。<br>
电脑用网线接入LAN口，IP地址配置为192.168.1.x，子网掩码255.255.255.0，网关192.168.1.1。<br>
这时候浏览器打开192.168.1.1就可以进入uboot界面了。</p>
<h2 id="刷入底包"><a class="header-anchor" href="#刷入底包">¶</a>刷入底包</h2>
<p>将附件中的（底包）istoreos-squashfs-factory.bin文件在uboot中上传并刷入，等待设备重启并指示灯变为绿色，则刷入成功。</p>
<h2 id="刷入正式包"><a class="header-anchor" href="#刷入正式包">¶</a>刷入正式包</h2>
<p>浏览器进入192.168.1.1，用户名为root，密码为password。然后在系统-备份/升级中上传正式包，然后升级。<br>
等待重启后进入路由器后台，状态-概览中确认版本为R23.9.9则升级成功。<br>
<img src="https://img.ycyc.win/img/202502101110242.png" alt="image.png"><br>
在koolcenter的固件页面（<a href="https://fw.koolcenter.com/Lean/JDC_AX1800_Pro/">KoolCenter 固件下载服务器</a>）亚瑟最新版的固件为R24.5.19，但是我尝试刷入该版本固件时，故障和最开始的一样，网卡每隔10秒左右都会掉一下。怀疑是该版本也需要先刷入对应版本的底包才能用。</p>
<span id="more"></span>
<p><img src="https://img.ycyc.win/img/202502101113376.png" alt="image.png"></p>
<h2 id="overlay扩容"><a class="header-anchor" href="#overlay扩容">¶</a>overlay扩容</h2>
<h3 id="第一种方法"><a class="header-anchor" href="#第一种方法">¶</a>第一种方法</h3>
<p>刷完之后，默认的overlay分区只有5MB左右，在安装各种插件时都会报空间不足的错误。需要先将overlay扩容后再安装。扩容方法也是按照上面教程内容操作的，这里仅作记录。</p>
<p>1.首先登录ttyd终端，输入账号root，默认密码password（如果没更改密码的话）完成登录。<br>
2.输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure>
<p>查看overlay分区<br>
3.再输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -r /overlay/* /mnt/mmcblk0p27</span><br></pre></td></tr></table></figure>
<p>回车<br>
4.去iStoreOS里，系统-磁盘管理-挂载点-选择/dev/mmcblk0p27，卸载。<br>
5.卸载掉mmcblk0p27后,再下面选项中选择设备mmcblk0p27，文件系统ext4，挂载选项rw,relatime,data=ordered，挂载点/overlay，点击挂载。下图为挂载成功的截图。<br>
<img src="https://img.ycyc.win/img/202502101121090.png" alt="image.png"></p>
<p>然后去系统-软件包里查看是否成功，图下就是成功。<br>
<img src="https://img.ycyc.win/img/202502101120531.png" alt="image.png"><br>
6.再去ttyd终端里，再输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i s#/mnt/mmcblk0p27#/overlay# /etc/config/fstab</span><br></pre></td></tr></table></figure>
<p>后就不会报错了<br>
7.再输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;12s/1/0/g&#x27; /etc/config/fstab</span><br></pre></td></tr></table></figure>
<p>8.都没有报错后输入reboot重启路由器，就成功扩容overlay分区。</p>
<blockquote>
<p>如果上面方法没有效果可尝试以下第二种方法</p>
</blockquote>
<h3 id="第二种方法"><a class="header-anchor" href="#第二种方法">¶</a>第二种方法</h3>
<p>在终端中输入以下命令回车 卸载p27分区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">umount /dev/mmcblk0p27</span><br></pre></td></tr></table></figure>
<p>输入以下命令回车 格式化P27分区，因为emmc容量大，格式化需要一些时间，耐心等待执行完成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 -F /dev/mmcblk0p27</span><br></pre></td></tr></table></figure>
<p>输入以下命令回车 手动挂载P27</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount /dev/mmcblk0p27 /mnt/mmcblk0p27</span><br></pre></td></tr></table></figure>
<p>输入以下命令回车 拷贝overlay分区文件到P27分区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -r /overlay/* /mnt/mmcblk0p27</span><br></pre></td></tr></table></figure>
<p>输入以下命令回车 检查是否拷贝成功，输入下面的命令回车看到 lost+found  upper  work文件夹，说明拷贝成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /mnt/mmcblk0p27</span><br></pre></td></tr></table></figure>
<p>然后输入以下命令回车生成挂载文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">block detect &gt; /etc/config/fstab</span><br></pre></td></tr></table></figure>
<p>输入以下命令回车把p27分区挂载到overlay</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i s#/mnt/mmcblk0p27#/overlay# /etc/config/fstab</span><br></pre></td></tr></table></figure>
<p>最后输入以下命令回车把原来的overlay挂载取消（下图少了这一步请知悉，实际要执行这一步的，图我懒得再换了）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;12s/1/0/g&#x27; /etc/config/fstab</span><br></pre></td></tr></table></figure>
<p>最后的最后就是输入reboot后重启就可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h2 id="安装插件"><a class="header-anchor" href="#安装插件">¶</a>安装插件</h2>
<p>可以前往自带的istore中安装各种插件，如果商店里面没有，可以在下面地址下载run文件，然后在istore中上传手动安装。<br>
<a href="https://github.com/bcseputetto/Are-u-ok/releases/tag/iStoreOS">Release iStoreOS 22.03.X · bcseputetto/Are-u-ok · GitHub</a><br>
比如我这边安装的passwall就是用的下图的版本<br>
<img src="https://img.ycyc.win/img/202502101128683.png" alt="image.png"></p>
<h2 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h2>
<p>这样亚瑟的istoreos安装就告一段落了，因为亚瑟的内存只有512，日常占用率都在85%以上，所以不适合跑docker容器，目前我的docker容器还是跑在N1上面，目前N1只负责跑容器和vpn server，其他诸如宽带拨号、ddns、科学上网等功能都转移到的亚瑟主路由上了，局域网内的设置只需要自动获取IP就可以随意出国了。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>京东</tag>
        <tag>路由器</tag>
        <tag>刷机</tag>
        <tag>istoreOS</tag>
        <tag>亚瑟</tag>
        <tag>overlay</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建frigate+CD2，监控自动上传百度云</title>
    <url>/posts/37011.html</url>
    <content><![CDATA[<h2 id="Clouddrive2搭建"><a class="header-anchor" href="#Clouddrive2搭建">¶</a>Clouddrive2搭建</h2>
<p>如果你使用的是istoreOS，可以在istore商店中搜索安装CD2，安装后会创建一个名为clouddrive2的容器。<br>
当然你也可以直接使用docker命令来安装。<br>
浏览器访问主机IP+19798即可打开CD2的页面。</p>
<h2 id="Clouddrive2连接百度云盘并挂载到本地"><a class="header-anchor" href="#Clouddrive2连接百度云盘并挂载到本地">¶</a>Clouddrive2连接百度云盘并挂载到本地</h2>
<p>你可以在CD2的云存储中添加包括百度网盘、阿里云盘、115、Onedrive在内的多个网盘，但是免费用户只能添加两个网盘服务，并且只能创建一个挂载点。<br>
<img src="https://img.ycyc.win/img/20251013160937076.png" alt="image.png"></p>
<p>如果你和我一样是使用istoreOS商店中的CD2插件，需要将网盘挂载到/mnt/cloudNAS目录下才能实现监控视频的实时上传。<br>
<img src="https://img.ycyc.win/img/20251013161126659.png" alt="image.png"></p>
<span id="more"></span>
<h2 id="Frigate搭建"><a class="header-anchor" href="#Frigate搭建">¶</a>Frigate搭建</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name frigate \</span><br><span class="line">  --restart=unless-stopped \</span><br><span class="line">  --stop-timeout 30 \</span><br><span class="line">  --mount type=tmpfs,target=/tmp/cache,tmpfs-size=1000000000 \</span><br><span class="line">  --device /dev/bus/usb:/dev/bus/usb \</span><br><span class="line">  --shm-size=64m \</span><br><span class="line">  -v /mnt/CloudNAS/frigate:/media/frigate \</span><br><span class="line">  -v /mnt/sata1-1/config/frigate:/config \</span><br><span class="line">  -e FRIGATE_RTSP_PASSWORD=&#x27;password&#x27; \</span><br><span class="line">  -e TZ=&#x27;Asia/Shanghai&#x27; \</span><br><span class="line">  -e HF_ENDPOINT=&#x27;https://huggingface.mirror.frigate-cn.video&#x27; \</span><br><span class="line">  -p 8971:8971 \</span><br><span class="line">  -p 8554:8554 \</span><br><span class="line">  -p 8555:8555/tcp \</span><br><span class="line">  -p 8555:8555/udp \</span><br><span class="line">  docker.cnb.cool/frigate-cn/frigate:stable</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将命令中的/mnt/CloudNAS/frigate替换为网盘挂载到本地的目录。<br>
将命令中的/mnt/sata1-1/config/frigate替换为你本地存储frigate配置的目录。</p>
</blockquote>
<p>容器正常运行后，浏览器访问设备IP:8971端口即可访问frigate页面，默认登录用户名为admin，密码在容器的运行日志中查看。<br>
<img src="https://img.ycyc.win/img/20251013160218614.png" alt="image.png"></p>
<h2 id="Frigate添加设备及基本设置"><a class="header-anchor" href="#Frigate添加设备及基本设置">¶</a>Frigate添加设备及基本设置</h2>
<p>在frigate配置文件夹下有config.yaml，此文件为frigate的主配置文件，想要添加摄像头需要在此文件中按照格式添加设备的rtsp地址或是onvif地址。<br>
下面是我目前在用的配置文件，仅供参考</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mqtt:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">1883</span></span><br><span class="line">  <span class="attr">topic_prefix:</span> <span class="string">frigate</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">frigate</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">cameras:</span></span><br><span class="line">  <span class="attr">keting:</span> <span class="comment"># &lt;------ Name the camera</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ffmpeg:</span></span><br><span class="line">      <span class="attr">inputs:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">rtsp://192.168.1.101:554/rtsp/stream1</span> <span class="comment"># &lt;----- The stream you want to use for detection</span></span><br><span class="line">          <span class="attr">roles:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">detect</span></span><br><span class="line">    <span class="attr">detect:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment"># &lt;---- disable detection until you have a working camera feed</span></span><br><span class="line">      <span class="attr">width:</span> <span class="number">1280</span></span><br><span class="line">      <span class="attr">height:</span> <span class="number">720</span></span><br><span class="line">  <span class="attr">mendao:</span> <span class="comment"># &lt;------ Name the camera</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ffmpeg:</span></span><br><span class="line">      <span class="attr">inputs:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">rtsp://192.168.1.103:554/rtsp/stream1</span> <span class="comment"># &lt;----- The stream you want to use for detection</span></span><br><span class="line">          <span class="attr">roles:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">detect</span></span><br><span class="line">    <span class="attr">detect:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment"># &lt;---- disable detection until you have a working camera feed</span></span><br><span class="line">      <span class="attr">width:</span> <span class="number">1280</span></span><br><span class="line">      <span class="attr">height:</span> <span class="number">720</span></span><br><span class="line">  <span class="attr">menkou:</span> <span class="comment"># &lt;------ Name the camera</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ffmpeg:</span></span><br><span class="line">      <span class="attr">inputs:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">rtsp://192.168.1.102:554/rtsp/stream1</span> <span class="comment"># &lt;----- The stream you want to use for detection</span></span><br><span class="line">          <span class="attr">roles:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">detect</span></span><br><span class="line">    <span class="attr">detect:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span> <span class="comment"># &lt;---- disable detection until you have a working camera feed</span></span><br><span class="line">      <span class="attr">width:</span> <span class="number">1280</span></span><br><span class="line">      <span class="attr">height:</span> <span class="number">720</span></span><br><span class="line"><span class="attr">detect:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.16</span><span class="number">-0</span></span><br><span class="line"><span class="attr">go2rtc:</span></span><br><span class="line">  <span class="attr">streams:</span></span><br><span class="line">    <span class="attr">keting:</span> <span class="comment">## &lt;- 这里的back为摄像头名称，根据你的实际情况进行调整</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rtsp://192.168.1.101:554/rtsp/stream1</span> <span class="comment">## &lt;- 这里的rtsp为摄像头流地址</span></span><br><span class="line">    <span class="attr">mendao:</span> <span class="comment">## &lt;- 这里的back为摄像头名称，根据你的实际情况进行调整</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rtsp://192.168.1.103:554/rtsp/stream1</span> <span class="comment">## &lt;- 这里的rtsp为摄像头流地址</span></span><br><span class="line">    <span class="attr">menkou:</span> <span class="comment">## &lt;- 这里的back为摄像头名称，根据你的实际情况进行调整</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rtsp://192.168.1.102:554/rtsp/stream1</span> <span class="comment">## &lt;- 这里的rtsp为摄像头流地址</span></span><br><span class="line">  <span class="attr">webrtc:</span></span><br><span class="line">    <span class="attr">candidates:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.123</span><span class="string">:8555</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">stun:8555</span></span><br><span class="line"><span class="attr">record:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">True</span>  <span class="comment"># 只有设置了enabled为True时录制功能才会生效</span></span><br><span class="line">  <span class="attr">retain:</span></span><br><span class="line">    <span class="attr">days:</span> <span class="number">7</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">all</span> <span class="comment"># 将在3天期间保存所有的录制视频，包括没有画面变动或没有检测到物体/目标的视频</span></span><br><span class="line">  <span class="attr">alerts:</span></span><br><span class="line">    <span class="attr">retain:</span></span><br><span class="line">      <span class="attr">days:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">motion</span> <span class="comment"># 将在最上面的3天后，仅保存画面有变动且属于核查中&quot;警报&quot;的视频30天</span></span><br><span class="line">  <span class="attr">detections:</span></span><br><span class="line">    <span class="attr">retain:</span></span><br><span class="line">      <span class="attr">days:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">motion</span> <span class="comment"># 将在最上面的3天后，仅保存画面有变动且属于核查中&quot;检测&quot;的视频30天</span></span><br></pre></td></tr></table></figure>
<p>如果你和我一样是用的TP-LINK的设备，可以很轻松的获取到设备的rtsp地址，地址为rtsp://admin@ip:553/rtsp/stream1 ，如果是其他品牌的设备，可在网上自行搜索相关教程。</p>
<h2 id="网盘查看监控录像"><a class="header-anchor" href="#网盘查看监控录像">¶</a>网盘查看监控录像</h2>
<p>如果一切正常的话，你的网盘对应文件夹里就会有以下三个文件夹，<br>
<img src="https://img.ycyc.win/img/20251013161414445.png" alt="image.png"></p>
<p>recording文件夹即监控视频存储文件夹，视频时长一般是10秒一个文件，里面的子文件夹安装日期和时间命名，但需要注意时间为UTC0的时间，咱们这边需要+8。文件以分钟+秒命名。<br>
<img src="https://img.ycyc.win/img/20251013161707738.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Frigate</tag>
        <tag>NVR</tag>
        <tag>Clouddrive2</tag>
        <tag>监控</tag>
        <tag>网盘</tag>
      </tags>
  </entry>
  <entry>
    <title>站点评论系统由valine切换到twikoo记录</title>
    <url>/posts/19025.html</url>
    <content><![CDATA[<p>今天将站点的评论系统切换到了twikoo，原先使用的Valine。简单记录一下twikoo的部署和配置过程。</p>
<h2 id="twikoo容器部署"><a class="header-anchor" href="#twikoo容器部署">¶</a>twikoo容器部署</h2>
<p>twikoo支持多种方式部署，常用的有vercel，netlify以及cloudflare worker等等，详细对比了各种部署方式的优缺点后，我选择了使用docker来部署。因为我现在家里的旁路由有现成的Docker环境，而且基本上是24小时开机，更重要的是数据存在本地，比较放心。😅<br>
官方支持的部署方式及描述对比可参阅（<a href="https://twikoo.js.org/backend.html#%E4%BA%91%E5%87%BD%E6%95%B0%E9%83%A8%E7%BD%B2">云函数部署 | Twikoo 文档</a>）<br>
Docker 部署命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name twikoo -e TWIKOO_THROTTLE=1000 -p 8080:8080 -v /mnt/sata1-1/opt/docker/config/twikoo/data:/app/data -d imaegoo/twikoo</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果你的8080端口已被占用，请替换为其他可用端口。<br>
/mnt/sata1-1/opt/docker/config/twikoo/替换为你本地存放twikoo数据的路径。</p>
</blockquote>
<p>容器运行后访问IP:8080端口，出现下面提示则说明部署成功。<br>
<img src="https://img.ycyc.win/img/20250403110133015.png" alt="image.png"></p>
<span id="more"></span>
<h2 id="证书申请及方向代理设置"><a class="header-anchor" href="#证书申请及方向代理设置">¶</a>证书申请及方向代理设置</h2>
<p>因为我的旁路由安装了lucky插件，之前也配置过证书和反向代理，现在新增一条记录即可。<br>
<img src="https://r2.ycyc.win/2025/04/ae879b360fbc9550f0b28a79c1b3c36f.png" alt="image.png"></p>
<p>如果你还未配置过Lucky，可参阅<a href="https://zhuanlan.zhihu.com/p/660282355">Site Unreachable</a></p>
<p>配置成功后可以在公网通过https加配置好的域名和端口访问到twikoo服务。</p>
<h2 id="Next主题配置twikoo"><a class="header-anchor" href="#Next主题配置twikoo">¶</a>Next主题配置twikoo</h2>
<p>根据twikoo给出的文档，如果和我一样HEXO使用的是Next主题，需要先安装twikoo插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># For NexT version &gt;= 8.0.0 &amp;&amp; &lt; 8.4.0</span><br><span class="line">npm install hexo-next-twikoo@1.0.0</span><br><span class="line"># For NexT version &gt;= 8.4.0</span><br><span class="line">npm install hexo-next-twikoo@1.0.3</span><br></pre></td></tr></table></figure>
<p>然后在Hexo的配置文件中加入下面字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">twikoo:</span><br><span class="line">  enable: true</span><br><span class="line">  visitor: true</span><br><span class="line">  envId: xxxxxxxxxxxxxxx #填入配置好的twikoo公网地址</span><br></pre></td></tr></table></figure>
<p>配置完成之后重新生成HEXO即可。</p>
<h2 id="twikoo相关配置"><a class="header-anchor" href="#twikoo相关配置">¶</a>twikoo相关配置</h2>
<p>重新生成HEXO就可以在文章页面下方看到twikoo的评论框，点击齿轮进入twikoo的配置页面，第一次访问需要设置密码。<br>
下面主要说一下如何从之前的valine中将历史评论导入到twikoo中。<br>
首先我们登录leancloud，找到创建的应用，如下图所示，点击导出。随后邮箱会收到导出的备份文件<br>
<img src="https://img.ycyc.win/img/20250403111407926.png" alt=""><br>
将邮箱收到的备份文件解压后得到名为comment的json文件，然后在twikoo设置中将该文件导入，即可完成valine历史评论的导入工作。<br>
<img src="https://img.ycyc.win/img/20250403111227038.png" alt=""></p>
<p>到此，就基本上完成了valine到twikoo的切换工作。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>valine</tag>
        <tag>twikoo</tag>
        <tag>评论</tag>
      </tags>
  </entry>
  <entry>
    <title>网心云oecturbo刷机记录</title>
    <url>/posts/43673.html</url>
    <content><![CDATA[<p>oec turbo是网心云推出 的一款pcdn盒子，整体配置还行，瑞芯微RK3566处理器，4G内存+8G EMMC，可以外接一个sata接口的2.5寸硬盘。最近我从海鲜市场入手了一个，根据网上流传出来的教程试着刷了一下istoreOS，看看能不能代替已经运行了五六年的斐讯N1，做一个合格的旁路由。<br>
本文所用到的驱动软件和固件包下载链接会放在文章结尾。<br>
<img src="https://img.ycyc.win/img/202502131134655.png" alt="image.png"></p>
<h2 id="拆机"><a class="header-anchor" href="#拆机">¶</a>拆机</h2>
<p>拆机很简单，图片就不上了，大概说下流程：<br>
1.推开底部盖板，可以看到四颗十字螺丝，拆掉；<br>
2.拆掉螺丝后可以推开侧板，看到硬盘sata转接板，把固定的三颗拆掉，然后小心把排线拆掉，拆下转接板；<br>
3.拆掉固定硬盘托架的八颗长螺丝，然后取出硬盘托架就可以看到黑色主板了。</p>
<span id="more"></span>
<h2 id="安装瑞芯微驱动和软件"><a class="header-anchor" href="#安装瑞芯微驱动和软件">¶</a>安装瑞芯微驱动和软件</h2>
<p>打开DriverAssistant_v5.1.1文件夹，运行DriverInstall.exe文件，注意先点击驱动卸载，再点击驱动安装。<br>
<img src="https://img.ycyc.win/img/202502131110099.png" alt="image.png"></p>
<p>然后打开tool文件夹中的RKDevTool.exe，第一行LoaderToDDR浏览到tool文件夹下的MiniLoaderAll.bin文件，第二行的system浏览到你需要刷入系统的img文件。<br>
<img src="https://img.ycyc.win/img/202502131114836.png" alt="image.png"></p>
<h2 id="短接触点进入maskrom模式"><a class="header-anchor" href="#短接触点进入maskrom模式">¶</a>短接触点进入maskrom模式</h2>
<p>需要准备typeC-A的数据线，A口接入电脑。<br>
如下图所示，用镊子等工具短接主板上的两个触点，然后将数据线的C口插入主板的USB-C口，等待三秒左右放开短接，软件会提示发现一个maskrom设备。<br>
<img src="https://img.ycyc.win/img/202502131124027.png" alt="image.png"></p>
<p>然后点击执行，开始刷写固件，直到右侧提示下载完成，可断开设备连接。<br>
<img src="https://img.ycyc.win/img/202502131119045.png" alt="image.png"></p>
<blockquote>
<p>在刷写过程中如果遇到下载boot失败，可以尝试更换电脑、更换数据线、重装驱动尝试。<br>
<img src="https://img.ycyc.win/img/202502131126264.png" alt="image.png"></p>
</blockquote>
<h2 id="通电接网"><a class="header-anchor" href="#通电接网">¶</a>通电接网</h2>
<p>将设备接入通电接网，然后在路由器中查看获取到的IP就可以愉快的玩耍了。默认用户名root，密码password。</p>
<h2 id="刷写工具下载"><a class="header-anchor" href="#刷写工具下载">¶</a>刷写工具下载</h2>
<p>链接: <a href="https://pan.baidu.com/s/1QxFHcq17nxZpSxDU8VbtRg?pwd=d6m2">https://pan.baidu.com/s/1QxFHcq17nxZpSxDU8VbtRg?pwd=d6m2</a> 提取码: d6m2</p>
<h2 id="系统镜像下载"><a class="header-anchor" href="#系统镜像下载">¶</a>系统镜像下载</h2>
<p>链接: <a href="https://pan.baidu.com/s/1xYw0uLwAEqEAFCp7bOFvRQ?pwd=p8nx">https://pan.baidu.com/s/1xYw0uLwAEqEAFCp7bOFvRQ?pwd=p8nx</a> 提取码: p8nx</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>istoreOS</tag>
        <tag>网心云</tag>
        <tag>oecturbo</tag>
        <tag>oect</tag>
        <tag>oec</tag>
        <tag>瑞芯微</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖Cloud sync中添加Cloudflare R2存储</title>
    <url>/posts/28567.html</url>
    <content><![CDATA[<p>群晖的Cloud sync是一个网盘同步套件，可以将你的各种网盘和NAS本地文件夹进行同步，将重要数据做云端备份。Cloud sync除了支持百度网盘、OneDrive等常规主流网盘的接入外，还支持Amazon S3以及兼容S3标准的其他存储对象的接入，而Cloudflare R2就支持S3标准协议，下面一起看看如何在群晖的Cloud sync中接入Cloudflare R2存储对象吧。</p>
<p>首先在Cloud sync中添加一个新的网盘接入，云供应商中搜索S3，选择S3 storage。</p>
<p><img src="https://img.iycyc.com/img/202502211621975.png" alt="image.png"></p>
<hr>
<h3 id="参数填写说明"><a class="header-anchor" href="#参数填写说明">¶</a>参数填写说明</h3>
<p>S3服务器选择自定义服务器URL。<br>
Cloudflare的其他信息参照<a href="https://iycyc.com/posts/36618?highlight=r2#%E6%93%8D%E4%BD%9C">曲线救国，使用Alist挂载CloudflareR2存储桶 | 渊澄</a>获取。<br>
服务器地址填入Cloudflare提供的S3终结点，记得去掉地址前面的https://。<br>
签名版本选择V4版本。<br>
另外就是Bucket名称这里不能自己输入，填入Access Key和Secret Key之后会自动获取你在Clouddflare中的所有R2实例，选取你需要同步的实例即可。</p>
<p><img src="https://img.iycyc.com/img/202502211632645.png" alt="image.png"><br>
点击下一步选择你本地以及远程需要同步的文件夹，根据你的需求选择同步方向类型即可。。。<br>
<img src="https://img.iycyc.com/img/202502211633604.png" alt="image.png"><br>
这样就完成了Cloudflare R2在群晖Cloud sync中的添加动作。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>群晖</tag>
        <tag>Cloudflare</tag>
        <tag>R2</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC OS10.14系统添加ar9285无线网卡驱动</title>
    <url>/posts/49923.html</url>
    <content><![CDATA[<p>苹果最新的Mac OS 10.14 系统取消了对AR9285系列网卡驱动的支持，所以我们需要手动添加驱动才能使用AR9285无线网卡，下面来介绍如何在Mac OS 1014中添加AR9285的网卡驱动。</p>
<p>下载附件中的压缩包并解压，得到AirPortAtheros40.kext文件，打开/SYSTEM/LIBRARY/EXTENSIONS，找到IO80211Family.kext文件，显示包内容，打开contents/Plugins，将解压到的文件复制到这个文件夹。</p>
<p>然后在终端中输入</p>
<pre><code>sudo touch /System/Library/Extensions/ &amp;&amp; sudo kextcache -u /
</code></pre>
<p>重新建立缓存即可完成AR9285无线网卡在MAC OS 10.14中的驱动安装。</p>
<p>参考内容<a href="https://forum.51nb.com/forum.php?mod=viewthread&amp;tid=1857633">https://forum.51nb.com/forum.php?mod=viewthread&amp;tid=1857633</a></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
        <tag>苹果</tag>
        <tag>AR9285</tag>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title>N1盒子刷写openwrt系统做旁路由</title>
    <url>/posts/24992.html</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>Amlogic系列盒子，包括 N1、章鱼星球、S905X2外贸盒子、S905X3外贸盒子、S922X外贸盒子</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>      第一次刷机（从U盘或TF卡启动之后）：
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>         cd  /root   &amp;&amp;   ./install-to-emmc.sh     或者：　/root/install-to-emmc.sh
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>      在线升级，先把 update-amlogic-openwrt.sh 以及镜像文件 xxxxxxxxxxxxxxxxxxxxxxxxx.img用winscp工具上传至/mnt/mmcblk2p4, 然后：
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>cd  /mnt/mmcblk2p4</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>     chmod 755 update-amlogic-openwrt.sh
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>     ./update-amlogic-openwrt.sh  xxxxxxxxxxxxxxxxxxxxxxxxxx.img
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>     注意：update-amlogic-openwrt.sh一般随固件同时发布，在.7z包里面，每次升级最好都用最新版的update脚本
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>旁路由</tag>
        <tag>N1</tag>
      </tags>
  </entry>
  <entry>
    <title>OUTLINE服务</title>
    <url>/posts/27488.html</url>
    <content><![CDATA[<p>最近在一台美国的VPS上搭了OUTLINE服务，需要的朋友可以和我联系（微信MIAOYANG）。</p>
<p>目前定价为10元/月，限10GB流量。</p>
<p>由于目前苹果iOS的客户端已在国内appstore下架，所以必须切换到美国或其他地区的appstore才能下载。Android及Windows用户不受影响。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>outline</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS增加swap交换分区笔记</title>
    <url>/posts/52176.html</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>对于配置较低的VPS主机，我们可以通过适当增加swap交换分区的大小来提高主机的性能。下面以搬瓦工ubuntu14.04系统进行操作。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>1.查看当前swap分区大小</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>free -h
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>2.删除swap分区</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>swapoff -a
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>3.创建新的swap分区</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>dd if=/dev/zero of=/root/swapfile bs=1M count=1024
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>修改count后面的数字来调整swap分区的大小，现在以1GB为例。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>4.格式化分区</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>mkswap /root/swapfile
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>5.启用分区</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>swapon /root/swapfile
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>6.添加开机启动</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>nano /etc/fstab
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>加入下面一行命令</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>/root/swapfile swap swap defaults 0 0
</code></pre>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>7.再次查看swap分区大小</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<pre><code>free -h
</code></pre>
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>SWAP</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress数据的备份与还原</title>
    <url>/posts/16289.html</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>刚刚重装了VPS系统，分享一下如何备份和还原WordPress的数据。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>首先我们需要将数据库进行备份，登陆PHPMYADMIN，然后找到WordPress所在的数据库，找到&quot;导出&quot;选项卡，将数据库备份下载到本地。</p>
<p><img src="https://img.ycyc.win/img/202411021258934.png" alt="微信截图_20180814154750.png"></p>
<p>接着我们用FTP工具登陆到网站目录，可以备份整个目录，也可以只备份wp-content文件夹，因为这个文件夹存放着我们上传的主题、插件及图片附件等文件。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>备份完成之后我们介绍一下如何还原。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>从wordpress官网下载最新版本的程序，然后上传到空间，接着新建一个数据库，名称随意，可以使用之前的名称，也可以使用新名称。然后在PHPMYADMIN中找到&quot;导入&quot;选项卡，将我们之前下载到本地的数据库备份文件上传导入。</p>
<p><img src="https://img.ycyc.win/img/202411021259134.png" alt="微信截图_20180814155528.png"></p>
<p>然后我们用FTP工具将之前备份的wp-content文件夹上传覆盖。在根目录下将wp-config-sample.php文件复制一份并重命名为wp-config.php。编辑wp-config.php文件，填入数据库地址、名称、用户名及密码，然后保存。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>至此，WordPress的备份及还原工作结束。</p>
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>YouTube后台播放神器OGYT</title>
    <url>/posts/3682.html</url>
    <content><![CDATA[<p>今天给大家推荐一款APP，可以在当YouTube退到后台之后继续以音频的形式播放。</p>
<p>一般情况下，我们在用YouTube APP播放视频时，如果退到后台，视频就会暂停播放，如果我们想要继续以音频形式播放YouTube，就必须要开通YouTube的付费功能。</p>
<p>安装的OGYouTube之后，我们在OGYouTube中观看视频，然后点击&quot;背景&quot;按钮，视频就会以音频方式在后台继续播放，此等神器，GOOGLE PLAY商店时绝对不会上架了，大家可以在附件中下载到。</p>
<p>另外OGYOUTUBE还有下载YOUTUBE视频的功能，但我测试了之后没有下载成功，不知道是APP本身的原因还是我网络环境的问题。大家可以试一下，如果有下载成功的请留言告知。</p>
<p>使用方法:将附件内的两个APP同时安装，然后在OGYoutube中登陆Google账户就可以使用了。</p>
<p><img src="https://img.ycyc.win/img/202411021259373.jpg" alt="微信图片_20180802104843.jpg"></p>
<p>下载地址链接: <a href="https://pan.baidu.com/s/1Kre7Lo--yaEsRODV2lZbxA">https://pan.baidu.com/s/1Kre7Lo--yaEsRODV2lZbxA</a> 提取码: 7dqy</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>GOOGLE</tag>
        <tag>Android安卓</tag>
        <tag>youtube</tag>
      </tags>
  </entry>
  <entry>
    <title>outlineANDROID客户端下载</title>
    <url>/posts/39287.html</url>
    <content><![CDATA[<p>outline的安卓客户端可以直接在谷歌PLAY商店内搜索下载，如果没有PLAY商店，可以下载APK直接安装使用。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>outline</tag>
        <tag>VPS</tag>
        <tag>android</tag>
        <tag>客户端</tag>
      </tags>
  </entry>
  <entry>
    <title>snipaste-强大的windows平台截图工具下载</title>
    <url>/posts/34605.html</url>
    <content><![CDATA[<p>我们在电脑里操作截图一般会用QQ或微信自带的截图工具，用起来虽然方便，但是必须要登录QQ或是微信才能使用，这一点很是不爽。虽然Windows也自带有截图工具，可是用起来并不友好。</p>
<p>今天推荐给大家一款好用到爆的截图工具-Snipaste，绿色版无需安装，可设置开机启动，只需按下F1键即可完成截屏，可截取屏幕上任何位置的画面，而且还支持标注及粘贴、颜色提取等快捷操作。</p>
<p>该工具的设置也简单明了，将压缩包解压之后运行软件，在托盘区找到snipaste的图标，右键选择首选项即可进行设置。</p>
<p><img src="https://img.ycyc.win/img/202411021258263.jpg" alt="Snipaste_2018-06-07_10-07-11.jpg"></p>
<p>软件分为32位、64位及XP专用三个版本，大家可根据自己的系统下载相应的版本。</p>
<p>目前该工具也推出了适用于MAC系统的测试版。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Daily我的日常</tag>
        <tag>Android安卓</tag>
        <tag>snipaste</tag>
        <tag>工具</tag>
        <tag>截图</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu服务器安装v2ray笔记及客户端下载</title>
    <url>/posts/56961.html</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>首先用root账户来登录服务器，然后运行下面的命令一键安装v2ray</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>bash &lt;(curl -L -s https://install.direct/go.sh)
</code></pre>
<!-- /wp:code -->
<!-- wp:paragraph -->
<p>所有的详细配置都存储在/etc/v2ray/config.json文件中，安装完成之后我们运行下面命令来将服务器的端口及id记录下来。</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>cat /etc/v2ray/config.json
</code></pre>
<!-- /wp:code -->
<!-- wp:paragraph -->
<p>最后我们运行下面的命令来启动v2ray服务并设置为开机启动。</p>
<!-- /wp:paragraph -->
<!-- wp:code -->
<pre><code>systemctl enable v2ray
systemctl start v2ray
</code></pre>
<!-- /wp:code -->
<!-- wp:paragraph -->
<p>到此安装完毕，最后我们检查一下服务器的防火墙设置，一定要放行上面记录到的端口才能够正常使用。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>服务器端配置完成之后，我们还需要在你所使用的主机上安装部署v2ray客户端，常用的windows、iOS、Android平台都有相应的客户端，windows客户端推荐使用 v2rayN ，配置起来简单直观。iOS平台可以使用 Shadowrocket ，但是必须切换到美区账户才能购买安装。Android这边的话可以使用免费的 V2RayNG 。文章结尾我会放出windows和Android客户端的下载链接。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>其实v2ray就类似于ssr采，只不过它采用了vmess加密协议，使用起来更加隐蔽，更加难以被监测到。</p>
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
        <tag>linux</tag>
        <tag>客户端</tag>
        <tag>v2ray</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>中晶科技FS-3125S扫描仪驱动下载</title>
    <url>/posts/26864.html</url>
    <content><![CDATA[<p>今天给客户安装中晶的FS3125S扫描仪，在网上找了一圈也没下载到驱动，现在从机器自带的光盘里拷贝了一份，上传到了百度云，有需要的朋友可以前往下载。该驱动支持winXP到win10。</p>
<p><img src="https://img.ycyc.win/img/202411021257313.jpg" alt="xc6981855.jpg"></p>
<!-- wp:paragraph -->
<p>[reply]123[/reply]</p>
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Daily我的日常</tag>
        <tag>下载</tag>
        <tag>FS3125s</tag>
        <tag>扫描仪</tag>
        <tag>驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>利用ifttt将Wordpress文章同步到社交平台</title>
    <url>/posts/29347.html</url>
    <content><![CDATA[<p>今天我在ifttt新建了三个自动同步应用，如果Wordpress有新文章发布，更新消息将会自动在twitter以及新浪微博发送一条更新通知，并会在印象笔记同步一条以文章为内容的笔记。</p>
<p><img src="https://img.ycyc.win/img/202411021251153.png" alt="TIM截图20181213191941.png"></p>
<p><img src="https://img.ycyc.win/img/202411021252630.png" alt="TIM截图20181213191827.png"></p>
<p>设置起来很简单，只需将你的各种平台的账号信息授权给ifttt，然后根据提示一步一步傻瓜式操作就可以了。</p>
<p>现在我们来测试一下同步效果吧。</p>
<p>经过测试及长时间的等待，Wordpress同步到Twitter及印象笔记均可以正常工作，但是无法同步到新浪微博，据网友反馈说，新浪微博早已关闭了来自ifttt的同步请求。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
        <tag>Daily我的日常</tag>
        <tag>ifttt</tag>
        <tag>twitter</tag>
        <tag>微博</tag>
      </tags>
  </entry>
  <entry>
    <title>华擎J3455安装黑群晖的几点建议</title>
    <url>/posts/46714.html</url>
    <content><![CDATA[<p>华擎 的J3455是目前很热门的一款集成主板，许多网友都拿它来组黑群晖玩，我手里正好也有一块J3455，上周装了黑群晖，已经稳定运行了近一个星期，下面我将罗列几点在装机以及使用过程中遇到的问题及解决方法，希望对正打算用J3455装黑群晖的朋友有所帮助。</p>
<p>1.Bootloader引导版本的选择</p>
<p>由于群晖的DS918+也是采用的J3455处理器，所以很多朋友都用最新的Jun’s Loader 1.04b来做引导，但是目前使用1.04b引导DS918+有一个问题，就是在DSM网页中无法重启机器，所以我选择了用1.03b引导DS2615XS来装DSM6.1.6系统。安装完成之后可以在线更新DSM版本到 DSM 6.1.7-15284 Update 3 。</p>
<p><img src="https://img.ycyc.win/img/202411021250992.jpg" alt="aa.jpg"></p>
<p>2.WOL相关设置</p>
<p>想要实现WOL网络唤醒，需要满足以下几个条件：</p>
<p>1.引导优盘中的MAC地址必须填主板实际的MAC地址；</p>
<ol start="2">
<li>在BIOS中启用&quot;允许从PCI-E设备启动电脑&quot;；</li>
</ol>
<p>3.DSM控制面板—电源中必须WOL选项打勾。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Synology群晖</tag>
        <tag>J3455</tag>
        <tag>主板</tag>
        <tag>华擎</tag>
        <tag>黑群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>如何快速备份和还原padavan路由器的系统设置及脚本</title>
    <url>/posts/63397.html</url>
    <content><![CDATA[<p>之前家里用的主路由器是刷了Padavan固件的联想NEWIFI Y1S，前几天在闲鱼上收了一台NEWIFI 3，想着把主路由换成NEWIFI3，但是想想换了新路由之后还要重新设置宽带连接账号、内网IP地址绑定、SS、DNSPOD、端口转发、DMZ等等一大堆的操作，感觉好头疼。所以更换路由器的工作就拖了下来，等找到宽裕点的时间再换。</p>
<p>就在昨天我更新路由器固件版本的时候，突然发现Padavan居然可以一键导出配置及脚本，顿时豁然开朗，这不正好解决了我的痛点？</p>
<p>如果你和我一样要更换路由器，碰巧新旧路由器都是padavan系统，跟着我的步骤一起来操作吧，可以实现路由器无痛升级。</p>
<p>1.如何备份</p>
<p><img src="https://img.ycyc.win/img/202411021254472.jpg" alt="TIM截图20181228171704.jpg"></p>
<p>进入旧路由器的管理页面，依次进入【高级设置】-【系统管理】-【恢复/导出/上传设置】，将设置的备份及脚本的备份下载到本地电脑上。</p>
<p><img src="https://img.ycyc.win/img/202411021255155.png" alt="TIM截图20181228191927.png"></p>
<p>2.如何恢复</p>
<p>和上面的步骤一样，将下载到本地的备份上传到路由器，然后保存设置就可以。</p>
<p>操作完成之后，旧路由器的所有设置和脚本都会导入到新路由器中，包括LAN口地址、管理员账户密码、宽带连接账号密码、局域网IP地址表、SS、DNSPOD等等。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>路由器</tag>
        <tag>padavan</tag>
        <tag>Network网络</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建outline服务器</title>
    <url>/posts/20287.html</url>
    <content><![CDATA[<p>Debian8系统进行如下操作：</p>
<p>####切换到root权限####</p>
<pre><code>sudo -i
</code></pre>
<p>####安装docker####</p>
<pre><code>curl -sS https://get.docker.com/ ' sh
</code></pre>
<p> </p>
<p>####启动docker####</p>
<pre><code>systemctl start docker
</code></pre>
<p>####将docker加入系统服务####</p>
<pre><code>systemctl enable docker
</code></pre>
<p>####查看docker运行状态，返回值应有绿色running字样####</p>
<pre><code>systemctl status docker
</code></pre>
<p> </p>
<p>####一键安装outline server####</p>
<pre><code>wget -qO- https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/server_manager/install_scripts/install_server.sh ' bash
</code></pre>
<p>安装完成之后将{}内的内容进行复制，然后下载并安装outline manager软件，将复制到的内容粘贴到软件相应的地址即可。</p>
<p>之后就可以用outline manager软件来生成outline的key及查看流量的消耗。</p>
<p><img src="https://img.ycyc.win/img/202411021254646.png" alt="TIM截图20180419112617.png"></p>
<p>outline官方网站：<a href="https://getoutline.org/en/home">https://getoutline.org/en/home</a></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>GOOGLE</tag>
        <tag>outline</tag>
        <tag>VPS</tag>
        <tag>服务器</tag>
        <tag>谷歌云</tag>
      </tags>
  </entry>
  <entry>
    <title>支持DSM6.2Jun&#39;sLoader 1.03b下载</title>
    <url>/posts/7120.html</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>Jun最新的黑群晖引导已升级到了1.03b版本，支持最新的DSM6.2系统。支持3615及3617两个型号。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>全新安装应该没有太大问题，稍后我会在现有的6.1系统上进行升级测试。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Synology群晖</tag>
        <tag>黑群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装nodejs及npm环境</title>
    <url>/posts/60215.html</url>
    <content><![CDATA[<p>我们以nodev6.10.3版本为例进行安装，最新的版本可以参阅nodejs官网（<a href="http://nodejs.org/dist">http://nodejs.org/dist</a>）</p>
<p>先来现在安装包</p>
<pre><code>wget http://nodejs.org/dist/v6.10.3/node-v6.10.3.tar.gz
</code></pre>
<p>然后将下载好的安装包解压</p>
<pre><code>tar -xzf node-v6.10.3.tar.gz
</code></pre>
<p>打开解压好的文件夹进行编译</p>
<pre><code>cd node-v6.10.3
./configure
make
</code></pre>
<p>编译过程需要一段时间，请耐心等待。编译完成之后我们就可以进行安装了。</p>
<pre><code>sudo make install
</code></pre>
<p>安装完成之后我们重启一下树莓派。</p>
<pre><code>sudo reboot
</code></pre>
<p>重启之后我们可以用下面命令查看nodejs以及npm的版本。</p>
<pre><code>node -v
npm -v
</code></pre>
<p>如果有正确的版本返回，则安装成功。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
        <tag>安装</tag>
        <tag>树莓派</tag>
        <tag>nodejs</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>测试新的编辑器Gutenberg</title>
    <url>/posts/56073.html</url>
    <content><![CDATA[<p>这篇文字是用全新的WordPress文章编辑器Gutenberg编写的。</p>
<p>接下来插入一张图片看看效果。</p>
<p><img src="https://img.ycyc.win/img/202411021248617.png" alt="Snipaste_2018-08-05_09-03-34.png"></p>
<p>与之前的默认编辑器相比，Gutenberg使用更加灵活，可以随意在任何地方插入任何东西。</p>
<p><img src="https://img.ycyc.win/img/202411021249545.png" alt="Snipaste_2018-08-05_09-05-32.png"></p>
<p>甚至是插入小工具。</p>
<p>亦或是Twitter账户的最新动态。</p>
<!-- /wp:paragraph -->
<!-- wp:core-embed/twitter {"url":"http://twitter.com/miaoyanginfo","type":"rich","providerNameSlug":"twitter"} -->
<figure class="wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter">
http://twitter.com/miaoyanginfo
</figure>
<!-- /wp:core-embed/twitter -->
<!-- wp:paragraph -->
<p>好了，发布一下看看最后的效果吧。。</p>
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>激活windows及office-自用KMS服务器分享</title>
    <url>/posts/59409.html</url>
    <content><![CDATA[<p>KMS服务器可以用来激活VOL版本（俗称大客户版本）的Windows系统及Office办公软件。</p>
<p>每次激活可用180天，如果KMS服务器不瘫痪，到期后会自动续期，所以也算是永久激活。</p>
<p>如需使用KMS服务器来激活，记得下载和安装VOL版本的Windows及Office，大家可以去【<a href="http://msdn.itellyou.cn/">msdn我告诉你</a>】搜索下载。</p>
<p>我的KMS服务器是搭建在家里的路由器上面的，地址是 <span style="color: #ff0000;"><strong>home.miaoyang.win，</strong><span style="color: #000000;">目前可以保证其稳定性，如果因服务器问题出现无法激活的状态，我会尽快解决。</span></span></p>
<p><strong><span style="color: #ff6600;">切记以管理员身份运行CMD!</span></strong></p>
<p>1、Office 手动激活命令：</p>
<pre><code>cd C:\Program Files\Microsoft Office\Office16（Office 安装目录，32位和64位的安装目录不同，以你的安装目录为准）
cscript ospp.vbs /sethst:home.miaoyang.win
cscript ospp.vbs /act
cscript ospp.vbs /dstatus
</code></pre>
<p>2、Windows 手动激活命令：</p>
<pre><code>slmgr.vbs /skms home.miaoyang.win:1688
slmgr.vbs /ato
slmgr.vbs /xpr
</code></pre>
<p>切记下载VOL大客户版本的windows及office，VOL版本的镜像名一般是以SW开头且文件名中一般含有VL字样。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>激活</tag>
        <tag>Network网络</tag>
        <tag>windows</tag>
        <tag>KMS</tag>
        <tag>OFFICE</tag>
      </tags>
  </entry>
  <entry>
    <title>用斐讯N1盒子看电视</title>
    <url>/posts/59600.html</url>
    <content><![CDATA[<p>最近在各大论坛出镜率很高的斐讯N1天天链应该算是目前性价比最高的盒子了。这款盒子原先是斐讯推出的一款可以挖矿的盒子，现在矿塌了，大神们就开始研究这货究竟还有什么用。</p>
<p>斐讯N1采用S905处理器，2GB的内存，8GB的EMMC存储，千兆网口，购买一个挖矿退下来的二手机器，价格应该不超过80块钱。目前这款盒子经过刷机改造之后可以作为一款配置不出的Android电视盒子来用，也可以刷入Ambian来跑Ubuntu或是Debian等Linux系统。</p>
<hr>
<p>今天根据论坛大神们的教程来教大家如何将N1盒子刷成Android电视盒子。</p>
<p>首先我们将买回来的盒子连接HDMI线及网线，然后接通电源开机；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>接入鼠标点击系统版本，直到屏幕提示&quot;ADB打开&quot;字样；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>接着我们运行附件里面的&quot;连接盒子&quot;脚本，输入盒子获取到的IP地址；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>盒子重启之后我们点击&quot;降级&quot;脚本，对盒子进行降级，降级完成之后我们点击&quot;降级完成&quot;按钮，盒子会自动重启；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>然后我们用双公头USB线连接盒子和电脑（盒子上使用靠近HDMI的USB口），电脑上安装USB_Burning_Tool软件，并导入.img烧录包，软件右边将&quot;擦出flash&quot;打勾，其余不打勾，然后点击&quot;开始&quot;按钮；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>接着我们运行&quot;盒子进入刷机模式&quot;脚本，windows会自动发现新设备，<br>
USB_Burning_Tool会自动开始刷机；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>等提示刷机完成之后，我们点击&quot;停止&quot;按钮，然后断开USB连接，重新插拔盒子电源线；</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>盒子第一次启动大约需要1-2分钟时间，请耐心等待，之后我们就会进去刷好的Android系统了，我们可以选择&quot;当贝桌面&quot;作为默认桌面软件，在当贝市场中可以随意下载自己喜欢的APP，具体的操作我就不细说了，和其他盒子类似。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>最后强调一下，盒子不带遥控器，我们可以在淘宝上购买20块包邮的高仿小米的蓝牙遥控器，也可以购买斐讯T1的原装遥控器，当然也可以直接使用无线鼠标操作。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
        <tag>Android安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖DSM获取root密码的方法</title>
    <url>/posts/16982.html</url>
    <content><![CDATA[<p>用Putty登录群晖NAS的时候发现输入root用户然后输入admin密码之后无法登录，只能用admin的账户和密码才能登录，如果要获取root权限，必须输入 sudo -i然后输入admin的密码才可以。</p>
<p>也就是说我们并不知道群晖默认的root密码是多少，那我们可以用下面的命令来修改root密码</p>
<pre><code>synouser --setpw root newpassword
</code></pre>
<p>将newpassword替换成你要设置的密码就可以了。</p>
<p>这样就可以用root账户直接登录了。暂时没有发现修改root密码后对系统产生的影响。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Synology群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖Mailplus套件搭建邮件服务器</title>
    <url>/posts/34873.html</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>套件中心搜索【Synology Mail Plus Server】和【Synology Mail Plus】两个套件安装。</p>
<!-- /wp:paragraph -->
<!-- wp:image {"id":795,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large">![](image-5.png)</figure>
<!-- /wp:image -->
<!-- wp:paragraph -->
<p>安装完成之后启动【Synology MailPlus Server】套件，进入【服务】选项卡进行设置，启用SMTP、POP3服务及对应端口。</p>
<!-- /wp:paragraph -->
<!-- wp:image {"id":789,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large">![](image.png)</figure>
<!-- /wp:image -->
<!-- wp:paragraph -->
<p>切换到【邮件投递】选项卡进行设置。</p>
<!-- /wp:paragraph -->
<!-- wp:image {"id":791,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large">![](image-2.png)</figure>
<!-- /wp:image -->
<!-- wp:paragraph -->
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>切换到【账号】选项卡，激活相应的账户。</p>
<!-- /wp:paragraph -->
<!-- wp:image {"id":790,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large">![](image-1.png)</figure>
<!-- /wp:image -->
<!-- wp:paragraph -->
<p>激活完成之后就可以进入【Synology MailPlus】套件来进行邮件的收发动作。</p>
<!-- /wp:paragraph -->
<!-- wp:image {"id":794,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large">![](image-4-1024x372.png)</figure>
<!-- /wp:image -->
<!-- wp:paragraph -->
<p><strong>另外我重点说一下我这边的网络环境及路由器和DDNS的设置。</strong></p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>家里面使用的是联通宽带，有公网IP。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>在路由器中设置DMZ主机为群晖的IP。这样设置之后群晖上所有服务的端口都会暴露到公网上去，不需要单独在路由器中做端口转发，如果为了安全起见，不希望暴露某些端口到公网，可以在群晖防火墙里面做设置。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>然后在群里里面设置DDNS。我使用的是DNSPOD的DDNS服务。在群晖的【控制面板】-【外部访问】中进行DNSPOD的设置。需要在DNSPOD后台生成API密钥，这里不展开讨论。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>然后在DNSPOD后台添加对应域名的解析操作，比如我的域名是miaoyang.win。我将主域名用DDNS的方式解析到了群晖，然后MX记录用解析到miaoyang.win，将二级域名mail.miaoyang.win用CNAME方式解析到miaoyang.win。</p>
<!-- /wp:paragraph -->
<!-- wp:paragraph -->
<p>这样所有记录都会正确解析到宽带获取到的公网IP上面。</p>
<!-- /wp:paragraph -->
<!-- wp:image {"id":792,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large">![](image-3-1024x443.png)</figure>
<!-- /wp:image -->
<!-- wp:paragraph -->
<p>经过上述设置之后，我这边可以在外网环境下使用WEB和手机客户端进行邮件的收发操作。</p>
<!-- /wp:paragraph -->]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>邮件</tag>
        <tag>Synology群晖</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖NAS使用Docker安装迅雷远程下载xware教程</title>
    <url>/posts/468.html</url>
    <content><![CDATA[<p>和之前一样，用putty登录NAS，然后切换到root权限</p>
<pre><code>sudo -i
</code></pre>
<p>从阿里云拉取xware映像</p>
<pre><code>docker pull cb59j9ia.mirror.aliyuncs.com/yinheli/docker-thunder-xware
</code></pre>
<p>下载完成之后前往NAS的docker中启动该映像，然后选择&quot;高级设置&quot;，切换到&quot;卷&quot;选项卡，选择一个本地的文件夹来作为迅雷的下载目录，挂载路径为/app/TDDOWNLOAD。</p>
<p>设置完成之后启动容器，然后在运行日志中查看激活码。</p>
<p><img src="https://img.ycyc.win/img/202411021253552.png" alt="TIM截图20180424174524.png"></p>
<p>最后将激活码记录下来前往 <a href="http://yuancheng.xunlei.com">http://yuancheng.xunlei.com</a> 绑定即可。</p>
<p><img src="https://img.ycyc.win/img/202411021253235.png" alt="TIM截图20180424174851.png"></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Synology群晖</tag>
        <tag>synology群晖</tag>
        <tag>Docker</tag>
        <tag>教程</tag>
        <tag>迅雷</tag>
        <tag>远程下载</tag>
      </tags>
  </entry>
  <entry>
    <title>获取JD账号cookie</title>
    <url>/posts/4496.html</url>
    <content><![CDATA[<p>使用电脑操作，打开<a href="https://bean.m.jd.com/">打开京东签到页面</a>，登陆自己的账号后，打开浏览器开发者界面（键盘按F12），切换到<code>Application</code>选项，左侧选择<code>cookies</code>，并在右侧找到<code>pt_key</code>和<code>pt_pin</code>，复制对应的值，拼接成<code>pt_key=****;pt_pin=***</code>格式保存起来备用</p>
<!-- /wp:paragraph -->
<!-- wp:image {"id":800,"sizeSlug":"large","linkDestination":"none","className":"is-style-rounded"} -->
<figure class="wp-block-image size-large is-style-rounded">![](WiL7dVCETgXlep9-1024x568.png)</figure>
<!-- /wp:image -->]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>青龙面板</tag>
      </tags>
  </entry>
  <entry>
    <title>黑群晖NAS装机实录</title>
    <url>/posts/44514.html</url>
    <content><![CDATA[<p>昨天晚上收到了买的主板和机箱，电源还没有到，就先用之前旧电脑上的电源吧。连装箱带装系统，差不多折腾了两个小时。</p>
<p>酷冷的小魔方整体做工还算精致，支持标准电源，有三个硬盘位，顶部的硬盘支架可以装两块，侧板可以装一块，机箱前面板自带一个应该是12寸的风扇，可以直接接到主板上，开关按钮是前面板的LOGO，开机之后会有蓝灯，感觉不错，吐槽一下侧边的红色硬盘灯，有点不协调。</p>
<p>由于是ITX小机箱，装起来还是比较费劲的，翻工了一次，原因是如果侧边的硬盘安装靠上的话，会和顶部的硬盘架有冲突，必须靠下装，但试了几个位置，最多只能对上两个螺丝孔，不过还算稳定。</p>
<p>将主板、内存和电源安装完成，各种接线完成之后，将之前做好的启动优盘插上开机，连接网线和显示器，一切启动正常。</p>
<p>之后在电脑上登录<a href="http://find.synology.xn--comNAS-d27ig9cg7je7cqrfb1ocxd39ojv3aft5dyrxatxi3ymbr3c">http://find.synology.com之后会自动搜索局域网内的NAS设备</a>，搜索到之后，根据提示上传ds3615xs的固件，然后系统会自动安装和重启，重启完成之后再进入<a href="http://find.synolgoy.xn--comNAS-1n3ji8d6xap9am11bwjgmz4br24ep2cv69brimo5r">http://find.synolgoy.com将NAS联机进行初始化设置即可</a>。</p>
<p>远程访问我用的是DDNS，没有用群晖自带的QC，目前WOL还没有搞定，由于主板是UEFI的，没有找到设置WOL的地方。</p>
<p>系统里可以设置定时开关机时间，也是起作用的。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Synology群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>黑群晖DS3615XS最新版启动优盘的制作</title>
    <url>/posts/50351.html</url>
    <content><![CDATA[<p>DIY NAS的配件还没到，昨天闲来无事，根据网上现有的教程，提前做了黑群晖DSM6.1.4的启动优盘。现在记录下来，方便有需要的朋友参考。</p>
<p>需要用到的软件和文件有：</p>
<p>1.最新版的黑群晖ds3615xs引导镜像；</p>
<p>2.用来将镜像写入优盘的Win32DiskImager（<a href="https://sourceforge.net/projects/win32diskimager/">下载地址</a>）；</p>
<p>3.用来查看优盘VID以及PID的ChipEasy芯片无忧（<a href="http://www.onlinedown.net/soft/117925.htm">下载地址</a>）；</p>
<p>4.用来加载镜像的OSFmount软件（<a href="https://www.osforensics.com/tools/mount-disk-images.html">下载地址</a>）；</p>
<p>5.用来修改grub文件的Notepad++（非必须，也可用记事本打开，<a href="https://notepad-plus-plus.org/">下载地址</a>）；</p>
<p>6.用来计算黑群晖序列号和MAC地址的EXCEL表格。</p>
<p>以上文件请点击文章结尾的下载地址来进行下载。</p>
<p>将上面的东西都准备完毕了之后我们正式开始喽，当然还需要1个优盘，2G或4G都可以，不需要太大。</p>
<p>高能正式开始：</p>
<p>由于最新版的WIN10无法正确加载引导镜像，导致无法修改里面的grub文件，所以我们先来安装OSFmount软件，并用OSFmount加载引导镜像，记得将 read only 那里的勾去掉，加载的时候选择15M的那个分区，然后打开分区，找到grub.cfg文件，用NotePad++打开，当然也可以用自带的记事本打开。</p>
<p>将U盘插入电脑，运行ChipEasy，查看并记录下优盘的VID以及PID。</p>
<p>在grub.cfg中找到set vid=0x1234,set pid=0x1234字段，并将最后4位数字替换为自己优盘的VID及PID。接着打开黑群晖的算号Excel表格，选择DS3615XS型号，然后表格会自动生成序列号和MAC地址，我们将算好的SN和MAC地址一并在这个文件里面修改了。</p>
<p>然后保存文件，点击DISMOUNT取消加载。</p>
<p>接下来我们用Win32DiskImager打开修改好的镜像，并写入到优盘，等到写入完成之后，我们的黑群晖启动优盘就做好了。</p>
<p>稍后我会将需要用到的文件上传到网盘供大家下载。制作过程中的图片也会随后上传。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Synology群晖</tag>
        <tag>synology群晖</tag>
        <tag>黑群晖</tag>
        <tag>教程</tag>
        <tag>引导</tag>
        <tag>洗白</tag>
      </tags>
  </entry>
  <entry>
    <title>Alist套娃小雅操作指南</title>
    <url>/posts/6776.html</url>
    <content><![CDATA[<p>虽然小雅也是基于Alist的docker容器，但它是相对独立的，并且阉割也许多Alist的功能，无法像Alist那样和其他网盘进行文件复制。那有没有一种可能将小雅容器接入Alist呢，让小雅里面的资源也能轻松复制到其他网盘中？<br>
今天咱们来搞小雅套娃操作，也就是将小雅接入到完整的Alist平台，将小雅中的资源转存到接入Alist的其他网盘中去。</p>
<h2 id="前提"><a class="header-anchor" href="#前提">¶</a>前提</h2>
<p>正常运行的小雅容器和Alist容器。</p>
<h2 id="获取小雅链接令牌"><a class="header-anchor" href="#获取小雅链接令牌">¶</a>获取小雅链接令牌</h2>
<h3 id="两种方法，任选其一"><a class="header-anchor" href="#两种方法，任选其一">¶</a>两种方法，任选其一</h3>
<h4 id="文本文件获取"><a class="header-anchor" href="#文本文件获取">¶</a>文本文件获取</h4>
<p>打开你本地小雅配置文件夹下的 alist_auth_token.txt ，将token复制备用。</p>
<h4 id="SSH命令获取"><a class="header-anchor" href="#SSH命令获取">¶</a>SSH命令获取</h4>
<p>使用ssh工具登录到小雅的宿主机。<br>
运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -i xiaoya sqlite3 data/data.db &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">select value from x_setting_items where key = &quot;token&quot;;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>将命令中的xiaoya替换为你实际小雅容器的名称。</p>
</blockquote>
<span id="more"></span>
<p>执行完成之后会命令框会显示alist-开头的一串令牌，将其复制保存，随后会用到。<br>
<img src="https://img.ycyc.win/img/202409121405096.png" alt="image.png"></p>
<h2 id="在Alist中添加存储"><a class="header-anchor" href="#在Alist中添加存储">¶</a>在Alist中添加存储</h2>
<p>登录到Alist管理页面，添加一个存储，驱动选择Alist V3，挂载路径自己输入，例如/xiaoya。链接填入小雅的地址加端口。</p>
<p><img src="https://img.ycyc.win/img/202409121407273.png" alt="image.png"><br>
在令牌处填入复制的小雅令牌，然后保存。<br>
<img src="https://img.ycyc.win/img/202409121410570.png" alt="image.png"><br>
回到存储列表查看刚才添加的小雅存储状态是否为work。<br>
<img src="https://img.ycyc.win/img/202409121411214.png" alt="image.png"></p>
<p>回到Alist主页就可以看到小雅里面的文件了，现在就可以把里面的文件复制到你已经挂载到Alist的其他网盘了。<br>
<img src="https://img.ycyc.win/img/202409121412383.png" alt="image.png"></p>
<h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2>
<p>需要注意的是，在Alist中添加了小雅之后可以从小雅复制文件到其他网盘，但是无法将文件复制到小雅里面，也无法删除小雅里面的文件，也就是只具有只读权限。<br>
如果后期升级或重新部署了小雅容器，需要重新获取令牌。</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>alist</tag>
        <tag>docker</tag>
        <tag>小雅</tag>
        <tag>套娃</tag>
      </tags>
  </entry>
  <entry>
    <title>N1可用的第三方油管APP-smarttube</title>
    <url>/posts/248.html</url>
    <content><![CDATA[<p>N1刷了W大的电视盒子固件有两三年的时间了，期间配了T1遥控器，又扩容到了32G的存储，可以装下更多的APP了。运行KODI和日常的爱优腾都还算比较流畅，但唯独有一点，运行官方Youtube应用的时候会经常出现卡顿和死机的情况，体验不是很好，加之KODI下里面的Yotube插件也不能正常使用了，所以在N1上看油管视频一直没有一个很好的解决方案。<br>
最近闲逛的时候发现有好多网友和我一样的情况，下面有热心网友推荐第三方的油管APP-smarttube。不仅可以流畅观看油管视频，而且可以免安装谷歌框架登录油管谷歌账号，同步观看记录和订阅频道。<br>
<img src="https://img.ycyc.win//img/202409211401041.png" alt="image.png"></p>
<p>这是软件的官网地址，可以下载稳定版和测试版：<br>
<a href="https://smarttubenext.com/">https://smarttubenext.com/</a><br>
安装方法也很简单，下载APK拷贝到优盘，插到N1上直接安装就可以了。<br>
项目Github主页：<a href="https://github.com/yuliskov/smarttube">yuliskov/SmartTube: SmartTube - an advanced player for set-top boxes and tvs running Android OS (github.com)</a></p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>N1</tag>
        <tag>YOUTUBE</tag>
        <tag>油管</tag>
        <tag>APP</tag>
        <tag>smarttube</tag>
      </tags>
  </entry>
  <entry>
    <title>docker运行阿里云盘webdav服务</title>
    <url>/posts/9027.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/20220719161804.png" alt="20220719161804"><br>
之前一直在使用L大openwrt中自带的阿里云盘webdav插件来，但最近发下插件老是运行报错，所以决定直接在openwrt的docker中跑阿里云盘webdav服务。<br>
方法也很简单，直接在docker中运行下面命令就可以了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=aliyundrive-webdav --restart=unless-stopped -p 2345:8080 \</span><br><span class="line">  -v /etc/aliyundrive-webdav/:/etc/aliyundrive-webdav/ \</span><br><span class="line">  -e REFRESH_TOKEN=<span class="string">&#x27;token&#x27;</span> \</span><br><span class="line">  -e WEBDAV_AUTH_USER=username \</span><br><span class="line">  -e WEBDAV_AUTH_PASSWORD=password\</span><br><span class="line">  messense/aliyundrive-webdav</span><br></pre></td></tr></table></figure>
<p>备注：<br>
1.2345为docker主机映射的端口，可以任意修改。<br>
2.username为你的阿里云盘登录用户名。<br>
3.password为你的阿里云盘登录密码。<br>
4.如何获取阿里云盘的token请参考另一篇文章(<a href="https://miaoyanginfo.github.io/2022/05/22/15%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98refreshtoken/">https://miaoyanginfo.github.io/2022/05/22/15获取阿里云盘refreshtoken/</a>)</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>webdav</tag>
        <tag>docker</tag>
        <tag>阿里云盘</tag>
      </tags>
  </entry>
  <entry>
    <title>win11开启WEBDAV协议挂载阿里云盘</title>
    <url>/posts/57995.html</url>
    <content><![CDATA[<p>之前提到了使用第三方软件RaiDrive来挂载WEBDAV协议的网盘，其实Windows自身是支持WEBDAV协议的，只需要简单的设置一下即可，可以完全抛弃三方软件。<br>
##1.开启WEBCLIENT服务。<br>
右键计算机-管理-服务，找到WEBCLIENT服务并开启运行。<br>
<a href="https://nas.miaoyang.win:8015/image/cjZC"><img src="https://img.ycyc.win/img/webdav01.png" alt="webdav01.png"></a></p>
<p>##2.编辑注册表，修改键值，以同时支持http和https协议。<br>
运行输入regedit回车。<br>
找到如下路径，将BasicAuthLevel值改为2。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\WebClient\Parameters</span><br></pre></td></tr></table></figure>
<p><a href="https://nas.miaoyang.win:8015/image/cZ5d"><img src="https://img.ycyc.win/img/webdav02.png" alt="webdav02.png"></a><br>
##3.添加网络位置即可。<br>
<a href="https://nas.miaoyang.win:8015/image/cxtI"><img src="https://img.ycyc.win/img/webdav03.md.png" alt="webdav03.md.png"></a></p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>webdav</tag>
        <tag>win11</tag>
        <tag>阿里云盘</tag>
      </tags>
  </entry>
  <entry>
    <title>入手了两台二代小米AI音箱</title>
    <url>/posts/40056.html</url>
    <content><![CDATA[<p>家里有两台小爱音箱，一台是在2017年首发时候淘宝加价买的小米小爱音箱第一代，用到现在已经7年了。音质放到现在还是很能打。另一台是今年在闲鱼买的小米小爱音箱Play增强版，翻了一下记录花了85块钱，而现在全新的官网售价也才129块。当初买这个是看中了其可以充当蓝牙Mesh网关，支持红外控制家电，还有机身LED时间显示。</p>
<p><img src="https://raw.githubusercontent.com/miaoyanginfo/hexo-img/main/img/202409131248235.png" alt="image.png"></p>
<p>但到手使用了一段时间之后才发现这个音箱很垃圾，相当不推荐购买。首先是唤醒延迟，一般需要喊两三次小爱同学才会唤醒，而且反应迟钝，在接收到唤醒指令之后还要反应1-2s才会做出回应。在一个就是音质和第一代AI音箱相比差了一条街的距离，可以说根本没有音质可言，也就是当个喇叭听个响。还有这音箱偶尔还会死机，具体表现为唤醒无反应，顶部按键无反应，LED时钟卡住不动。</p>
<span id="more"></span>
<p>目前这两个音箱我都通过xiaomi miot auto插件接入到了HomeAssistant，使用TTS来播放闹钟以及配合device_tracker跟踪手机执行到家欢迎语。<br>
<img src="https://img.ycyc.win/img/202409131123479.png" alt="image.png"></p>
<p>最近想着把这个智障的Play增强版换掉，起初还在考虑是再入手一个AI音箱呢还是入手个小爱音箱pro来试试，或者干脆一步到位买两个homepod mini组立体声。在逛小黄鱼的时候发现了个AI音箱二代,型号为L15A，这个音箱发布了也有几年了，但是目前官网还在售，179块。外观和一代大差不差，可见的是电源口换成了主流的圆口，功能上主要是增加了蓝牙mesh网关功能，而且可以支持两个同型号音箱组成立体声增加音质。那买来组个立体声玩玩吧，如果体验可以的话就把之前的一代和play增强版都出掉。逛了一圈160块买了两个😆，不带电源适配器。<br>
<img src="https://img.ycyc.win/img/202409131133069.png" alt="image.png"><br>
其实现在的智能音箱已经被各种音频VIP服务绑架了，连最起码的听歌和听故事，都需要办各种三方VIP会员才行，否则只能听几秒试听版。不过之前看到一个开源项目，可以劫持小爱同学语音调用本地存储的曲库，只要本地曲库里面有的歌曲，可以免VIP直接播放。昨天已经发货了，趁着中秋三天假期研究一下。<br>
现在我这边的主要作用也就是接入HomeAssistant做一些自动化功能，再者就是用蓝牙播放手机里面的音乐，还有就是孩子听一些免费的睡前故事。</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>小米</tag>
        <tag>音箱</tag>
        <tag>小爱同学</tag>
        <tag>AI音箱</tag>
      </tags>
  </entry>
  <entry>
    <title>内存不足导致udpxy观看iptv花屏卡顿</title>
    <url>/posts/11363.html</url>
    <content><![CDATA[<p>今年上半年的时候我在N1旁路由上面使用udpxy插件设置了iptv组播转单播，配合tivimate这个软件观看iptv节目，起初体验还算流畅。设置教程可参阅我之前的文章<a href="https://ycyc.win/posts/21117">山西太原联通IPTV局域网组播openwrt设置教程（附M3U文件） | 渊澄</a>，（当时教程是直接在网件ap上设置的，但后期我为了管理方便，为N1外接了一个USB有线网卡，然后将udpxy转移到了N1上面）。<br>
最近观看的时候发现无论是正常观看还是换台都很卡顿，时不时还有花屏的现象。<br>
<img src="https://img.ycyc.win/img/202411131005264.png" alt="image.png"></p>
<p>当时觉得可能是运营商做了干扰，或者是换了直播源地址导致的。前几天群里有人讨论说也有花屏的现象，是因为设备运行内存不足导致的。转头想想也有这种可能。因为我的udpxy是运行在刷了istoreOS的N1盒子上的，里面不仅运行着科学上网工具，还同时运行着4-5个docker容器。内存占用率都在80%左右。<br>
<img src="https://img.ycyc.win/img/202411130925877.png" alt="image.png"></p>
<p>于是我将udpxy转到了另一台刷了openwrt的AP上（型号为网件的WAX206），重新测试iptv观看效果，发现大有改善，不仅没有了花屏现象，换台也比之前流畅多了。</p>
<p>所以在观看组播转单播iptv时遇到花屏或卡顿的现象，可以试着看下在是不是因为软路由内存不足导致的。</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>iptv</tag>
        <tag>udpxy</tag>
        <tag>组播</tag>
        <tag>单播</tag>
      </tags>
  </entry>
  <entry>
    <title>分享一些关于小雅Alist的使用心得</title>
    <url>/posts/2878.html</url>
    <content><![CDATA[<h3 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h3>
<p>好久没有更新了，最近除了工作，其他时间都在研究小雅Alist的使用。什么是小雅Alist？它是一个基于Alist搭建的影音分享的docker容器，部署完成之后支持webdav协议，可以连接infuse、kodi、potplayer、nplayer、vidhub等等众多支持webdav协议的影音软件，资源主要来自于作者分享的各个网络云盘的资源，比如阿里云、115等等。<br>
<img src="https://img.ycyc.win/img/20240904095057.png" alt="20240904095057"><br>
之前小雅Alist里面的资源都是来自于阿里云盘的，因为之前阿里云盘声称是永不限速，很长一段时间都可以通过小雅来流畅观看阿里云盘里面的视频资源。但是很快就被打脸了。大概在7月底的阿里云盘推出了三方权益包，每月需要额外花十几块钱办理这个包，里面有1TB的流量，可以将阿里云盘挂载到包括小雅Alist在内的其他第三方应用，享受高速传输服务，。如果你不办理这个权益包，速度会被限制在500kb/s左右，别说4k了，连1080的影片都无法流畅观看。让网友无法接受的是之前办理了阿里云盘VIP甚至是SVIP的网友，也需要单独购买这个三方权益包才可以不被限速，而且这个权益包只有1TB流量，用完之后，还是会被限速。。。<br>
于是乎小雅开始转战115网盘，因为115有个转存阿里云盘的功能，简单来说就是，如果这个阿里的资源在115网盘上也有，会立即转存到你自己的网盘中。这样就跳过了阿里云盘的限制。当然115这边也有限制，需要开通会员才可以实现这个功能。但是115推出了优惠活动，包年会员115元，吸引了很多网友。而且最新的很多资源小雅都放到了115网盘中，所以想要玩小雅Alist，必须要办个115会员了。</p>
<span id="more"></span>
<h3 id="小雅alist的安装"><a class="header-anchor" href="#小雅alist的安装">¶</a>小雅alist的安装</h3>
<p>想要安装小雅ALSIT首先你需要先安装好docker环境，arm或x86平台都可以。<br>
安装脚本可以使用小雅原生的脚本，也可以使用DD-derek的一键脚本（包括emby和自动清理脚本等功能）。期间需要获取阿里云盘的相关token，具体方法可以参阅小雅说明文档（<a href="https://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f%EF%BC%89">https://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f）</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl http://docker.xiaoya.pro/update_new.sh)&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &quot;$(curl --insecure -fsSL https://ddsrem.com/xiaoya_install.sh)&quot;</span><br></pre></td></tr></table></figure>
<p>安装完成之后进入主机IP:5678即可进入小雅ALIST页面。</p>
<h3 id="一些115的配置"><a class="header-anchor" href="#一些115的配置">¶</a>一些115的配置</h3>
<p>小雅alist的默认配置文件夹位于/etc/xiaoya路径下，里面有多个txt文档用来配置相关功能。<br>
如果你办理了115的会员，需要至少配置三个文件。</p>
<h4 id="ali2115-txt"><a class="header-anchor" href="#ali2115-txt">¶</a>ali2115.txt</h4>
<p>这个文件是用来加速阿里云盘资源的，如果你没有办理阿里云盘的会员，但是有115的会员，可以配置这个文件来转存阿里的资源到115网盘，实现流畅观看视频。<br>
格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">purge_ali_temp=true</span><br><span class="line">cookie=&quot;UID=800012347_F1_1712345;CID=0f99357f000xxxxx67af8e167fcd68;SEID=0f439555555559d9b227595c0cd37b63c065e5d934d70045e8bfb3089b09b8d843662ad6ac00a90c6ecc3faf0e5abff45d73797470&quot;</span><br><span class="line">purge_pan115_temp=true</span><br><span class="line">dir_id=0</span><br></pre></td></tr></table></figure>
<p>里面的cookie换成你的115cookie即可。</p>
<h4 id="115-cookie-txt"><a class="header-anchor" href="#115-cookie-txt">¶</a>115_cookie.txt</h4>
<p>配置115的cookie来观看存储在115云盘上面的资源<br>
格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UID=800012347_F1_1712345;CID=0f99357f000xxxxx67af8e167fcd68;SEID=0f439555555559d9b227595c0cd37b63c065e5d934d70045e8bfb3089b09b8d843662ad6ac00a90c6ecc3faf0e5abff45d73797470</span><br></pre></td></tr></table></figure>
<p>里面的cookie换成你的115cookie即可。</p>
<h4 id="115share-list-txt"><a class="header-anchor" href="#115share-list-txt">¶</a>115share_list.txt</h4>
<p>这个文件用来挂载115的分享，可以用小雅现成的，也可以分享你自己115网盘里面的文件。配置生效之后会在小雅根目录生成一个名为“我的115分享”的文件夹。<br>
<img src="https://img.ycyc.win/img/20240904095438.png" alt="20240904095438"><br>
格式如下：<br>
挂载名  分享ID 分享目录id 提取码 （用空格分开，一行一个）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">115音乐 swz1zuk36by 549787817770 kac4</span><br><span class="line">纪录片 sw62frg3wp6 2288331541153662564 n9f5</span><br><span class="line">4KRemux sw6pw793wfp 2628478209787264315 w816</span><br><span class="line">电影1080P sw68fuu3nnw 1926968105722823031 pb57</span><br><span class="line">电视剧 sw68e813nnw 2659063178117250374 n9e0</span><br><span class="line">合集1 swzyiww3wn9 2524811557500852274 w1e0</span><br><span class="line">合集2 swzyiwq3wn9 2637890258378922777 x716</span><br><span class="line">合集3 swzyiwb3wn9 2637896360227215749 qfe8</span><br><span class="line">动画电影 swz6gml3fwo 2783753598167678176 8888</span><br><span class="line">欧美电影 sw68wz93ncb 2656232060400365768 6666</span><br><span class="line">美剧 sw6plt23ncb 2629830185329553796 6666</span><br><span class="line">千部抖音短剧合集 swzqh673h4y 2844388545487961211 5296</span><br><span class="line">无损音乐 sw6u40x3wp6 2748248365866155734 t543</span><br><span class="line">欧美剧 swznm373w1p 2775567116696245412 pe35</span><br><span class="line">音乐22万首 swzmqcr3fs6  2783304403585596566 xd67</span><br><span class="line">音乐22万首/DDS+HiRes sw658uq36x2 2565672403766001435 md98</span><br><span class="line">音乐22万首/母带系列 sw658uq36x2 2565416479709117843 md98</span><br><span class="line">音乐22万首/索尼精选 sw658uq36x2 2565917379515039176 md98</span><br><span class="line">音乐22万首/各类风格 sw658uq36x2 2565466586953464857 md98</span><br><span class="line">音乐22万首/华语27000首无损 sw658ub36x2 2565274055783398734 q7e0</span><br><span class="line">日韩电影 swzg8dd3wye 2932272857134137107 m5b3</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意上面分享的这些文件夹可能会由于政策原因或是资源主取消分享而失效，请注意！</p>
</blockquote>
<h3 id="登录限制"><a class="header-anchor" href="#登录限制">¶</a>登录限制</h3>
<p>小雅alist默认是可以匿名登录的，也就是任何人都无需用户名密码即可打开小雅观看影片，如果你想要配置个登录密码，可以在小雅配置文件夹内新建一个名为guestlogin.txt，内容为空就行。然后再新建一个名为guestpass.txt的文本，里面填入你想设置的密码。然后重启docker容器。就可以用户名dav和你设置的密码来登录小雅了。当然如果你在其他地方使用webdav挂载了小雅alist，也需要该用户名密码进行连接。</p>
<h3 id="关于webdav连接"><a class="header-anchor" href="#关于webdav连接">¶</a>关于webdav连接</h3>
<p>使用支持webdav协议的播放器来连接小雅资源库，一般需要主机名、端口、用户名、密码、挂载路径等信息。主机名为docker宿主机的IP，端口为5678，用户名为dav，密码为上一步设置的密码，挂载路径为/dav，准确填入这些信息之后一般就可以正常连接小雅Alist了。</p>
<h3 id="如何判断这个影片是115的还是阿里云盘的"><a class="header-anchor" href="#如何判断这个影片是115的还是阿里云盘的">¶</a>如何判断这个影片是115的还是阿里云盘的</h3>
<p>小雅里面很多文件夹后面会标注115字样，说明这个资源是存在115网盘的，没有标注的话这个资源是存在阿里云盘的。如果你没有115的付费会员，只有普通会员，目前每天有5次机会可以不限速观看115的资源。还有一种方法，在小雅页面打开一个视频，如果播放器默认调用的是“Aliyun video perviewer&quot;,那说明这个资源是来自阿里云的，如果默认只有“video”选项，那这个资源大概率是115网盘的。<br>
<img src="https://img.ycyc.win/img/20240904095956.png" alt="20240904095956"></p>
<blockquote>
<p>这个资源就是存在阿里云盘</p>
</blockquote>
<p><img src="https://img.ycyc.win/img/20240904100104.png" alt="20240904100104"></p>
<blockquote>
<p>这个资源就是大概率存在115网盘</p>
</blockquote>
<h3 id="如何查看小雅当前版本和升级版本"><a class="header-anchor" href="#如何查看小雅当前版本和升级版本">¶</a>如何查看小雅当前版本和升级版本</h3>
<p>在小雅根目录下有个©开头的文件夹，这个就是当前小雅的版本号。在网络环境正常的情况下，每次重启小雅docker容器都会自动更新到最新的版本。如果你当前使用的小雅有一些莫名奇妙的问题，试着重启下docker容器，升级到最新版本，或许或解决你的问题。截止到9月4日，最新的小雅版本为v.0821.0535(B)。</p>
<h3 id="如何自动清理存在阿里云盘的文件"><a class="header-anchor" href="#如何自动清理存在阿里云盘的文件">¶</a>如何自动清理存在阿里云盘的文件</h3>
<p>每次观看影片之后，都会留一份文件在阿里云盘里面，时间长了之后会导致阿里云盘空间被占满，无法正常观看小雅视频。如果你使用的是DDS的一键安装脚本，里面会有个一键安装自动清理阿里云盘的脚本。其实是在docker中新建了一个名为xiaoyakeeper的容器，其作用是定时清空缓存在阿里云盘的视频文件。不必担心，这个脚本只会清理你在安装小雅docker时设置的缓存文件夹里面的文件，不会清理你存在阿里云盘的其他文件。当然你也可以指定脚本的运行时间。在小雅配置文件夹新建一个myruntime.txt文件，里面写入你希望脚本运行的时间即可，例如我希望在每天的早晚6点各执行一次清理脚本，只需要写入6:00,18:00即可。</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>alist</tag>
        <tag>docker</tag>
        <tag>小雅</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获取阿里云盘的refresh_token</title>
    <url>/posts/62343.html</url>
    <content><![CDATA[<p>访问阿里云盘网页版，成功登录之后，按下F12，打开开发者模式，按照下图获取refresh_token。<br>
<img src="https://img.ycyc.win/img/202205221457932.png" alt=""><br>
获取到这个token之后我们就可以在各种阿里云盘的WEBDAV服务中使用这个token来开启阿里云盘的WEBDAV服务了。<br>
自动获取：<br>
登录阿里云盘后，控制台粘贴 JSON.parse(localStorage.token).refresh_token</p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>token</tag>
        <tag>阿里云盘</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓版Infuse-网易爆米花初体验</title>
    <url>/posts/46389.html</url>
    <content><![CDATA[<p>网易爆米花，原名网易Filmly，是网易出品的一款媒体组织管理播放软件，类似于我们熟知的Emby、Plex，或是AppleTV上面的Infuse，用户可自行添加视频资源，软件会按照影片名称分类进行元数据刮削及整合。目前可在适安卓手机、机顶盒、iOS以及AppleTV中安装运行，不同终端扫码登陆后可同步资源库及观看进度。<br>
整体UI设计和操作与INFUSE很像，包括海报墙、分类图标以及详情页。<br>
目前支持通过SMB、WEBDAV共享局域网内的影片，也支持添加阿里云盘、百度网盘以及中国移动云盘中的视频资源。</p>
<p><img src="https://img.ycyc.win/img/202411161429057.png" alt="image.png"><br>
但是比较遗憾的是目前不支持直接通过WEBDAV方式直接添加小雅中的资源，不过我们可以通过alist套娃的方式进行添加，如何进行小雅套娃大家可以参阅我之前的文章（<a href="https://ycyc.win/posts/6776">Alist套娃小雅操作指南 | 渊澄</a>）实测目前这种方式是可以正常观看的。<br>
首次添加资源之后会进行资源库的扫描匹配同步，具体时间要看你资源库中文件的多少。</p>
<p><img src="https://img.ycyc.win/img/202411161435743.png" alt="image.png"></p>
<span id="more"></span>
<p>元数据刮削的准确性还是比较好的，刮削到数据的影片会被分为电影和电视剧两个大分类。不过仍有一些冷门影片或是文件夹以及文件名命名不规范的影片无法被软件直接刮削，这些影片会被移到“其他”分类里面。我们可以通过手动匹配的方式来对这些影片做元数据匹配。<br>
<img src="https://img.ycyc.win/img/202411161438973.png" alt="image.png"><br>
刮削好的影片会显示精美的海报墙以及详情页封面。另外如果一部影片在存储里面有多个版本的资源，可以在详情页切换不同版本来进行观看，但是该功能目前仅限于电影，电视剧暂时还无法切换版本。<br>
<img src="https://img.ycyc.win/img/202411181052338.png" alt="image.png"></p>
<p>不仅如此，软件还会根据影片类型分为剧情、动作、犯罪、惊悚等类型。<br>
<img src="https://img.ycyc.win/img/202411181051102.png" alt="image.png"></p>
<p>但是如果遇到需要手动匹配电视剧元数据的时候，只能一集一集的手动匹配，无法根据文件夹内已匹配的文件进行批量同步。希望团队可以优化一下，如果我手动匹配了一集元数据，该文件夹内的其他文件也可以自动按照该文件元数据进行对应。<br>
还有就是同样的视频资源相较于在之前的TVBOX中观看，在爆米花中观看感觉很流畅，体验也很好，可以切换影片字幕和音轨，而且还支持倍速观看。<br>
另外就是不同终端如果登录相同的账户，观看记录会实时同步，比如你在电视端看到了影片的第几分钟，打开手机端就会显示看到了第几分钟，可以随时切换终端继续观看，再也不用担心进度丢失了。<br>
当然目前网易爆米花还有一些小的BUG需要优化，比如一部影片如果最后字幕部分没有看完，也会被放在播放记录里面，还有就是该影片我实际已经看完了，但在播放记录里面还有记录，并且剩余时间显示为1秒。<br>
<img src="https://img.ycyc.win/img/202411181054660.png" alt="image.png"></p>
<p>虽然目前网易爆米花还处于测试阶段，暂未发布正式版本，如果你不介意一些小的bug，可以前往官网下载相应的客户端安装体验。<a href="https://bmh.163.com">网易爆米花（原网易Filmly） - 智能媒体库&amp;全能播放器</a></p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>webdav</tag>
        <tag>网易</tag>
        <tag>小雅</tag>
        <tag>爆米花</tag>
      </tags>
  </entry>
  <entry>
    <title>小雅 Error TokenVerifyFailed empty access_token报错处理</title>
    <url>/posts/434.html</url>
    <content><![CDATA[<p>最近小雅更新到了V1107.0103版本，在观看阿里云盘资源的时候网页会提示500报错。</p>
<p>后台容器日志在加载阿里云盘挂载文件夹的时候提示“driver: [AliyundriveShare2Pan115], Error: TokenVerifyFailed:empty access_token”。<br>
<img src="https://img.ycyc.win/img/202411140959469.png" alt="image.png"><br>
此报错为阿里云盘opentoken过期所致。我们可以使用一键脚本快速更新opentoken。<br>
首先删除小雅配置文件夹的myopentoken.txt。<br>
然后SSH登录到容器宿主机，运行下面的脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">&quot;<span class="subst">$(curl --insecure -fsSL https://ddsrem.com/xiaoya_install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>依次选择1-&gt;5-&gt;4，根据提示浏览器打开二维码地址，然后用阿里云盘APP扫码完成授权。<br>
<img src="https://img.ycyc.win/img/202411141002884.png" alt="image.png"></p>
<p>提示成功之后重启小雅容器即可。<br>
如果尝试以上操作问题还未解决，可尝试小雅推荐的方法来获取阿里的token。</p>
<h3 id="mytoken获取方法："><a class="header-anchor" href="#mytoken获取方法：">¶</a>mytoken获取方法：</h3>
<p>访问<a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive.html">https://alist.nn.ci/zh/guide/drivers/aliyundrive.html</a> 或<br>
<a href="https://aliyundriver-refresh-token.vercel.app/">https://aliyundriver-refresh-token.vercel.app/</a><br>
获取你的移动端token<br>
然后，在终端命令行 （xxxxxxxxxxxxxxxx 就是你获取的token）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo xxxxxxxxxxxxxxxxxxxxxx &gt; /etc/xiaoya/mytoken.txt</span><br></pre></td></tr></table></figure>
<p>或者将你自己获取到的token粘贴至 etc/xiaoya/mytoken.txt文件里并保存。</p>
<h3 id="myopentoken获取方法："><a class="header-anchor" href="#myopentoken获取方法：">¶</a>myopentoken获取方法：</h3>
<p>访问<a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html">阿里云盘 Open | AList文档</a>根据提示进行操作，最后替换myoepntoken.txt中的内容。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>alist</tag>
        <tag>小雅</tag>
        <tag>阿里云盘</tag>
      </tags>
  </entry>
  <entry>
    <title>山西太原联通IPTV局域网组播openwrt设置教程（附M3U文件）</title>
    <url>/posts/21117.html</url>
    <content><![CDATA[<h2 id="网络环境"><a class="header-anchor" href="#网络环境">¶</a>网络环境</h2>
<p>山西太原联通宽带。光猫INTERNET口与IPTV口为不同的网络。IPTV口接联通送的IPTV盒子可以观看IPTV电视节目。<br>
INTERNET口桥接模式连接华为AX3路由器（IP地址为192.168.1.2），AX3负责PPPOE拨号。<br>
AX3下连一台刷了Openwrt的斐讯N1盒子（IP地址为192.168.1.2）用于科学工作。连了一台刷了Openwrt的网件AX206路由器（IP地址为192.168.1.4）用于扩展WIFI覆盖范围。<br>
网件WAX206的LAN口与华为AX3的LAN口相连，并且与主路由AX3设置成了统一的SSID和密码，关闭了DHCP。</p>
<span id="more"></span>
<h2 id="接口设置"><a class="header-anchor" href="#接口设置">¶</a>接口设置</h2>
<p>将光猫IPTV口出来的网线连接到WAX206的WAN口，并将WAN口改为DHCP模式。<br>
（这里有个坑，一开始我将IPTV的网线插到LAN口，到最后也是可以正常观看IPTV的，但是会倒是局域网内的设备无法访问互联网，所以需要将IPTV网线接到WAN口）<br>
<img src="https://img.ycyc.win/img/20240405171612.png" alt="20240405171612"><br>
网关跃点数改为200或更大。<br>
<img src="https://img.ycyc.win/img/20240405171636.png" alt="20240405171636"></p>
<p>防火墙设置为lan。<br>
<img src="https://img.ycyc.win/img/20240405171658.png" alt="20240405171658"></p>
<p>关闭DHCP服务。<br>
<img src="https://img.ycyc.win/img/20240405171718.png" alt="20240405171718"></p>
<h2 id="UDPXY设置"><a class="header-anchor" href="#UDPXY设置">¶</a>UDPXY设置</h2>
<p>登录WAX206的后台安装udpxy插件。<br>
<img src="https://img.ycyc.win/img/20240405171538.png" alt="20240405171538"><br>
Udpxy插件设置如图：要注意绑定IP接口和源IP接口不要填错，端口可随意设置成未被占用的其他端口。<br>
<img src="https://img.ycyc.win/img/20240405171741.png" alt="20240405171741"></p>
<p>接着我们在电脑上telnet一下192.168.1.4 7000 这个端口看是否正常运行。</p>
<h2 id="组播地址转换"><a class="header-anchor" href="#组播地址转换">¶</a>组播地址转换</h2>
<p>接着就是找本地运营商的IPTV组播地址了。可以前往kodi中文网，或是github上找别人分享的m3u地址。<br>
一般我们在网上找到的M3U地址类似于下面这种：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#EXTINF:-1,CCTV1-综合</span><br><span class="line">rtp://226.0.1.157:3086</span><br><span class="line">#EXTINF:-1,CCTV2</span><br><span class="line">rtp://226.0.1.158:3087</span><br><span class="line">#EXTINF:-1,CCTV3</span><br><span class="line">rtp://226.0.1.141:2018</span><br><span class="line">#EXTINF:-1,CCTV4</span><br><span class="line">rtp://226.0.1.21:3036</span><br><span class="line">#EXTINF:-1,CCTV5</span><br><span class="line">rtp://226.0.1.135:2020</span><br></pre></td></tr></table></figure>
<p>我们需要批量将里面的rtp://替换为<a href="http://192.168.1.4:7000/upd/">http://192.168.1.4:7000/upd/</a><br>
替换后类似于这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#EXTINF:-1,CCTV1</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.18:8056</span><br><span class="line">#EXTINF:-1,CCTV2</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.19:8064</span><br><span class="line">#EXTINF:-1,CCTV3</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.20:8072</span><br><span class="line">#EXTINF:-1,CCTV4</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.21:8080</span><br><span class="line">#EXTINF:-1,CCTV5</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.22:8088</span><br></pre></td></tr></table></figure>
<h2 id="测试播放"><a class="header-anchor" href="#测试播放">¶</a>测试播放</h2>
<p>一切正常的话，我们在电脑端用VLC或potplayer打开我们修改好的M3U文件就可以正常观看IPTV了。<br>
<img src="https://img.ycyc.win/img/20240405171803.png" alt="20240405171803"></p>
<p>如果你家的网络环境和我这边的类似，可以按照我的教程来操作。</p>
<h2 id="M3U分享"><a class="header-anchor" href="#M3U分享">¶</a>M3U分享</h2>
<p>另分享一份我整理出来的山西联通可用的M3U文件，将文件中的192.168.1.4:7000换成你局域网的地址和端口就可以了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;1&quot; tvg-name=&quot;CCTV1&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV1.png&quot; group-title=&quot;央视&quot;,CCTV1-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.153:9136</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;2&quot; tvg-name=&quot;CCTV2&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV2.png&quot; group-title=&quot;央视&quot;,CCTV2-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.154:9144</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;3&quot; tvg-name=&quot;CCTV3&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV3.png&quot; group-title=&quot;央视&quot;,CCTV3-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.208:9576</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;4&quot; tvg-name=&quot;CCTV4&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV4.png&quot; group-title=&quot;央视&quot;,CCTV4-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.156:9160</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;5&quot; tvg-name=&quot;CCTV5&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV5.png&quot; group-title=&quot;央视&quot;,CCTV5-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.209:9584</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6&quot; tvg-name=&quot;CCTV6&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV6.png&quot; group-title=&quot;央视&quot;,CCTV6-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.210:9592</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;7&quot; tvg-name=&quot;CCTV7&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV7.png&quot; group-title=&quot;央视&quot;,CCTV7-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.159:9184</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;8&quot; tvg-name=&quot;CCTV8&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV8.png&quot; group-title=&quot;央视&quot;,CCTV8-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.211:9600</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;9&quot; tvg-name=&quot;CCTV9&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV9.png&quot; group-title=&quot;央视&quot;,CCTV9-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.161:9200</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;10&quot; tvg-name=&quot;CCTV10&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV10.png&quot; group-title=&quot;央视&quot;,CCTV10-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.162:9208</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;11&quot; tvg-name=&quot;CCTV11&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV11.png&quot; group-title=&quot;央视&quot;,CCTV11-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.1.28:3021</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;12&quot; tvg-name=&quot;CCTV12&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV12.png&quot; group-title=&quot;央视&quot;,CCTV12-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.164:9224</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;13&quot; tvg-name=&quot;CCTV13&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV13.png&quot; group-title=&quot;央视&quot;,CCTV13-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.165:9232</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;14&quot; tvg-name=&quot;CCTV14&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV14.png&quot; group-title=&quot;央视&quot;,CCTV14-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.166:9240</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;15&quot; tvg-name=&quot;CCTV5+&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV5+.png&quot; group-title=&quot;央视&quot;,CCTV5+-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.168:9256</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;7249&quot; tvg-name=&quot;CCTV16&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV16.png&quot; group-title=&quot;央视&quot;,CCTV16-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.169:9264</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;17&quot; tvg-name=&quot;CCTV17&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV17.png&quot; group-title=&quot;央视&quot;,CCTV17-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.170:9272</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6584&quot; tvg-name=&quot;央视台球&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTVtaiqiu.png&quot; group-title=&quot;央视&quot;,CCTV央视台球HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.216:9640</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6568&quot; tvg-name=&quot;高尔夫网球&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/CCTVPAYFEE13.jpg&quot; group-title=&quot;央视&quot;,CCTV高尔夫网球HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.217:9648</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;9&quot; tvg-name=&quot;CCTV8&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTV8.png&quot; group-title=&quot;央视&quot;,CCTV电视指南HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.218:9656</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6569&quot; tvg-name=&quot;央视精品&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTVwenhuajingpin.png&quot; group-title=&quot;央视&quot;,CCTV央视精品HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.219:9664</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6557&quot; tvg-name=&quot;风云音乐&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTVfengyunyinyue.png&quot; group-title=&quot;央视&quot;,CCTV风云音乐HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.220:9672</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6558&quot; tvg-name=&quot;第一剧场&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTVdiyijuchang.png&quot; group-title=&quot;央视&quot;,CCTV第一剧场HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.221:9680</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6560&quot; tvg-name=&quot;世界地理&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTVshijiedili.png&quot; group-title=&quot;央视&quot;,CCTV世界地理HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.222:9688</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6563&quot; tvg-name=&quot;兵器科技&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/CCTVPAYFEE8.jpg&quot; group-title=&quot;央视&quot;,CCTV兵器科技HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.223:9696</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6562&quot; tvg-name=&quot;怀旧剧场&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/CCTVPAYFEE7.jpg&quot; group-title=&quot;央视&quot;,CCTV怀旧剧场HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.224:9704</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6000&quot; tvg-name=&quot;风云足球&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTVfengyunzuqiu.png&quot; group-title=&quot;央视&quot;,CCTV风云足球HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.225:9712</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6564&quot; tvg-name=&quot;女性时尚&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTVnvxing.png&quot; group-title=&quot;央视&quot;,CCTV女性时尚HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.226:9720</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6559&quot; tvg-name=&quot;风云剧场&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/CCTV/CCTBfengyun.png&quot; group-title=&quot;央视&quot;,CCTV风云剧场HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.227:9728</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6246&quot; tvg-name=&quot;CHC家庭电影&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/CHC2.jpg&quot; group-title=&quot;地方&quot;,CHC家庭影院</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.240:9820</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;54&quot; tvg-name=&quot;山西卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/shanxi_.png&quot; group-title=&quot;本地&quot;,山西卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.152:9128</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;黄河电视台&quot; tvg-logo=&quot;http://192.168.1.2:8123/local/tv_logo/huanghetv.jpg&quot; group-title=&quot;本地&quot;,山西黄河HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.235:9792</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;山西经济与科技&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/shanxi_.png&quot; group-title=&quot;本地&quot;,山西经济与科技HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.236:9800</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;山西影视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/shanxi_.png&quot; group-title=&quot;本地&quot;,山西影视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.237:9808</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;山西社会与法治&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/shanxi_.png&quot; group-title=&quot;本地&quot;,山西社会与法治HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.238:9816</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;山西文体生活&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/shanxi_.png&quot; group-title=&quot;本地&quot;,山西文体生活HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.16:8040</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;太原一台&quot; tvg-logo=&quot;http://192.168.1.2:8123/local/tv_logo/tytv_1.png&quot; group-title=&quot;本地&quot;,太原1</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.201:9520</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;太原二台&quot; tvg-logo=&quot;http://192.168.1.2:8123/local/tv_logo/tytv_2.png&quot; group-title=&quot;本地&quot;,太原2</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.202:9528</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;太原三台&quot; tvg-logo=&quot;http://192.168.1.2:8123/local/tv_logo/tytv_3.png&quot; group-title=&quot;本地&quot;,太原3</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.203:9536</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;太原四台&quot; tvg-logo=&quot;http://192.168.1.2:8123/local/tv_logo/tytv_4.png&quot; group-title=&quot;本地&quot;,太原4</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.204:9544</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;太原五台&quot; tvg-logo=&quot;http://192.168.1.2:8123/local/tv_logo/tytv_5.png&quot; group-title=&quot;本地&quot;,太原5</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.205:9552</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;太原教育&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,太原教育</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.206:9560</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;阳曲&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,阳曲</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.196:9480</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;清徐&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,清徐HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.191:9440</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;大同教育&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,大同教育HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.232:9772</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;孝义电视台&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,孝义电视台</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.189:9424</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;阳泉-1新闻综合&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,阳泉-1新闻综合</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.233:9776</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;阳泉-2科教&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,阳泉-2科教</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.234:9784</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;朔州-1&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,朔州-1</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.185:9392</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;朔州-2&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,朔州-2</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.186:9400</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;太原佰乐购&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,太原佰乐购</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.215:9632</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;晋能控股&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,晋能控股</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.229:9744</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;盐湖频道&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,运城盐湖频道</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.106:9006</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;27&quot; tvg-name=&quot;湖南卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/hunan.png&quot; group-title=&quot;卫视&quot;,湖南卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.143:9056</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;69&quot; tvg-name=&quot;金鹰卡通&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/jinyingkatong.png&quot; group-title=&quot;卫视&quot;,金鹰卡通HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.172:9288</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;2025&quot; tvg-name=&quot;金鹰纪实&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/jinyingjishi.png&quot; group-title=&quot;卫视&quot;,金鹰纪实HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.194:9464</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;36&quot; tvg-name=&quot;辽宁卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/liaoning.png&quot; group-title=&quot;卫视&quot;,辽宁卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.173:9296</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;40&quot; tvg-name=&quot;重庆卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/chongqing.png&quot; group-title=&quot;卫视&quot;,重庆卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.174:9304</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;31&quot; tvg-name=&quot;东方卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/dongfang.png&quot; group-title=&quot;卫视&quot;,东方卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.175:9312</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;东方财经&quot; tvg-logo=&quot;http://192.168.1.2:8123/local/tv_logo/dongfangcaijing.jpg&quot; group-title=&quot;卫视&quot;,东方财经HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.76:8520</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;1988&quot; tvg-name=&quot;上海纪实&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/shanghaijishi.png&quot; group-title=&quot;卫视&quot;,上海纪实HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.193:9456</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;29&quot; tvg-name=&quot;江苏卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/jiangsu.png&quot; group-title=&quot;卫视&quot;,江苏卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.176:9320</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;30&quot; tvg-name=&quot;北京卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/beijing.png&quot; group-title=&quot;卫视&quot;,北京卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.177:9328</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;45&quot; tvg-name=&quot;河北卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/hebei.png&quot; group-title=&quot;卫视&quot;,河北卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.178:9336</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;47&quot; tvg-name=&quot;河南卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/henan.png&quot; group-title=&quot;卫视&quot;,河南卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.52:8328</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;50&quot; tvg-name=&quot;江西卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/jiangxi.png&quot; group-title=&quot;卫视&quot;,江西卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.54:8344</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;56&quot; tvg-name=&quot;四川卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/sichuan.png&quot; group-title=&quot;卫视&quot;,四川卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.179:9344</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;44&quot; tvg-name=&quot;贵州卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/guizhou.png&quot; group-title=&quot;卫视&quot;,贵州卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.180:9352</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;28&quot; tvg-name=&quot;浙江卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/zhejiang.png&quot; group-title=&quot;卫视&quot;,浙江卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.144:9064</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;32&quot; tvg-name=&quot;安徽卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/anhui.png&quot; group-title=&quot;卫视&quot;,安徽卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.145:9072</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;33&quot; tvg-name=&quot;广东卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/guangdong.png&quot; group-title=&quot;卫视&quot;,广东卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.146:9080</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;34&quot; tvg-name=&quot;深圳卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/shenzhen.png&quot; group-title=&quot;卫视&quot;,深圳卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.147:9088</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;39&quot; tvg-name=&quot;天津卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/tianjin.png&quot; group-title=&quot;卫视&quot;,天津卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.148:9096</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;38&quot; tvg-name=&quot;山东卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/shandong.png&quot; group-title=&quot;卫视&quot;,山东卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.149:9104</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;48&quot; tvg-name=&quot;湖北卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/hubei.png&quot; group-title=&quot;卫视&quot;,湖北卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.150:9112</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;41&quot; tvg-name=&quot;东南卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/dongnan.png&quot; group-title=&quot;卫视&quot;,东南卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.188:9416</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;46&quot; tvg-name=&quot;黑龙江卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/heilongjiang.png&quot; group-title=&quot;卫视&quot;,黑龙江卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.151:9120</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;43&quot; tvg-name=&quot;广西卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/guangxi.png&quot; group-title=&quot;卫视&quot;,广西卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.231:9760</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;37&quot; tvg-name=&quot;旅游卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/lvyou.png&quot; group-title=&quot;卫视&quot;,海南卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.212:9608</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;51&quot; tvg-name=&quot;吉林卫视&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/ws/jilin.png&quot; group-title=&quot;卫视&quot;,吉林卫视HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.58:8376</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;73&quot; tvg-name=&quot;中国教育1台&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/中国教育1台.png&quot; group-title=&quot;地方&quot;,CETV1-HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.181:9360</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,金色学堂HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.182:9368</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,动漫秀场HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.183:9376</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6585&quot; tvg-name=&quot;茶频道&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/DOCUMENTARY-CHANNEL.jpg&quot; group-title=&quot;地方&quot;,茶频道HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.213:9616</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6595&quot; tvg-name=&quot;快乐垂钓&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/KUAILECHUIDIAO.jpg&quot; group-title=&quot;地方&quot;,快乐垂钓HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.214:9624</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6555&quot; tvg-name=&quot;梨园&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/CCTVPAYFEE20.jpg&quot; group-title=&quot;地方&quot;,梨园频道HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.115:8832</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6591&quot; tvg-name=&quot;文物宝库&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/WENWUBAOKU.jpg&quot; group-title=&quot;地方&quot;,文物宝库HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.110:8792</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6581&quot; tvg-name=&quot;早期教育&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/CCTVPAYFEE33.jpg&quot; group-title=&quot;地方&quot;,CETV早期教育HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.99:8704</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;6586&quot; tvg-name=&quot;武术世界&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/WUSHUSHIJIE.jpg&quot; group-title=&quot;地方&quot;,武术世界HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.97:8688</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,乐游HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.77:8528</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;1983&quot; tvg-name=&quot;游戏风云&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/youxifengyun.png&quot; group-title=&quot;地方&quot;,游戏风云HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.78:8536</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,都市剧场HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.81:8560</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;&quot; tvg-name=&quot;&quot; tvg-logo=&quot;&quot; group-title=&quot;本地&quot;,法治天地HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.83:8576</span><br><span class="line">#EXTINF:-1 tvg-id=&quot;1981&quot; tvg-name=&quot;生活时尚&quot; tvg-logo=&quot;http://epg.51zmt.top:8000/tb1/qt/shenghuoshishang.png&quot; group-title=&quot;地方&quot;,生活时尚HD</span><br><span class="line">http://192.168.1.4:7000/udp/226.0.2.84:8584</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>iptv</tag>
        <tag>组播</tag>
        <tag>联通</tag>
        <tag>山西</tag>
        <tag>太原</tag>
      </tags>
  </entry>
  <entry>
    <title>庆余年第二季全36集1080pBT下载种子</title>
    <url>/posts/6425.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/20240605104448.png" alt="20240605104448"><br>
该剧改编自猫腻同名畅销小说，承接上季，范闲（张若昀 饰）率领使团回归途中，二皇子以费介、范思辙以及滕家遗孤的安危来威胁范闲，逼他向自己俯首称臣，二人的矛盾就此激发。范闲所面对的抱月楼迷局，以及接踵而至的春闱危机，都是二皇子精心给范闲布下的陷阱。</p>
<p>范闲与林婉儿如愿大婚，紧接着，范闲接手内库，却发现内库负债累累。 范闲拒绝了庆余堂大掌柜的相助，决定靠自己的力量解决内库危机，范闲相约城中众商贾相聚苍山，以售卖“库债”为机筹集了两千多万银两，解决了内库空虚问题。</p>
<p>悬空寺上，庆帝遭遇三连刺杀，范闲出手相救却导致武功全废。危机四伏，压力陡增，范闲别无选择，他必须以这样的身体下江南，挑战庞大的势力与既定的游戏规则，以求彻底夺回内库。</p>
<h2 id="种子链接"><a class="header-anchor" href="#种子链接">¶</a>种子链接</h2>
<p><a href="https://1827552651-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FzyeXCfWDMCUsuUrT3Z6v%2Fuploads%2FNPmNxNXaUFnXoGjSbn9q%2F%E5%BA%86%E4%BD%99%E5%B9%B4.%E7%AC%AC%E4%BA%8C%E5%AD%A3.Joy.of.Life.S02.2024.Chinese.EP01-36.Complete.1080P.Disney.WEB-DL.H265.DDP2.0-Vampire.torrent?alt=media&amp;token=ed8dcd91-4a8e-47bd-aad5-1502043e6dfe">https://1827552651-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FzyeXCfWDMCUsuUrT3Z6v%2Fuploads%2FNPmNxNXaUFnXoGjSbn9q%2F庆余年.第二季.Joy.of.Life.S02.2024.Chinese.EP01-36.Complete.1080P.Disney.WEB-DL.H265.DDP2.0-Vampire.torrent?alt=media&amp;token=ed8dcd91-4a8e-47bd-aad5-1502043e6dfe</a></p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>下载</tag>
        <tag>庆余年</tag>
        <tag>电视剧</tag>
        <tag>BT</tag>
        <tag>种子</tag>
      </tags>
  </entry>
  <entry>
    <title>拒绝QQ绿钻，让小爱音箱随意播放音乐</title>
    <url>/posts/30452.html</url>
    <content><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2>
<p>现在的各种智能音箱，想要好好听音乐，都需要开通各种音乐VIP服务才行，而且有些歌曲因为版权原因，在特定的平台才会有，所以办一个平台的会员有时候还不够。要是不办会员，只能试听十几秒，或者是听一些不知名的翻唱版本。那有没有一种方法，让音箱调用本地NAS里面储存的音乐来播放呢？这样就不用办各种音乐会员了。</p>
<p>xiaomusic是用来让小米音箱播放音乐的docker项目 <a href="https://github.com/hanxi/xiaomusic">https://github.com/hanxi/xiaomusic</a> 其原理应该是用特定唤醒语劫持小爱音箱网络请求，使用yt-dlp这个项目前往油管下载同名的视频音源到本地，咨询了作者之后得知如果网络不支持访问油管，会转到B站下载，然后进行播放（目前默认是从B站下载资源，除非在设置界面指定从油管下载）。</p>
<h2 id="安装命令"><a class="header-anchor" href="#安装命令">¶</a>安装命令</h2>
<p>运行以下命令安装docker容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 8090:8090 \</span><br><span class="line">    -v /mnt/usb/xiaomusic/music:/app/music \</span><br><span class="line">    -v /mnt/usb/xiaomusic/conf:/app/conf \</span><br><span class="line">    hanxi/xiaomusic</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将命令中的/mnt/usb/xiaomusic字段替换为你本地容器配置的文件夹。<br>
另外本地曲库需放到music文件夹内才会被识别。</p>
</blockquote>
<p>容器创建完成之后访问宿主机ip:8090端口进入容器设置页面。<br>
<img src="https://img.ycyc.win/img/202410021835074.png" alt="image.png"></p>
<span id="more"></span>
<p>进入设置页面，登录小米账号后会读取到账号内所有支持的小米音箱设备，可以选择不同的设备进行控制，也可以为不同设备创建同一个分组进行控制。设置页面可以设置指定的唤醒词来调用本地播放功能。另外一些本地曲库的相关设置也在该页面。<br>
这里有个模糊匹配阈值和目录深度设置需要注意一下，如果你本地音乐命名不规范，可以适当把这个值调小一些。<br>
<img src="https://cdn.ycyc.win/gh/miaoyanginfo/hexo-img/img/202409151245684.png" alt="image.png"><br>
设置完成之后可以在主页看到本地曲库的目录。识别到的歌曲不仅可以推送到小爱音箱播放，也可以在网页端用浏览器播放。<br>
<img src="https://img.ycyc.win/img/202410021839226.png" alt="image.png"></p>
<p>目前作者已经更新到了0.3.37。修复了之前的一些bug。另外本地曲库播放功能也比之前体验好了不少。<br>
另外作者也有微信交流群，有问题可以去群里反馈，如果觉得这个项目不错，也可以给作者打赏。更多使用指引可参阅官方文档。</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://github.com/hanxi/xiaomusic">hanxi/xiaomusic: 使用小爱音箱播放音乐，音乐使用 yt-dlp 下载。 (github.com)</a></p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>小米</tag>
        <tag>小爱同学</tag>
        <tag>小爱音箱</tag>
        <tag>Xiaomusic</tag>
      </tags>
  </entry>
  <entry>
    <title>我的“港乐”歌单</title>
    <url>/posts/24372.html</url>
    <content><![CDATA[<p>最近芒果台联合香港TVB推出的音乐节目《声生不息》，将“沉睡”很多年的港乐再次呈现在了观众的面前，尤其是在第一期结尾大合唱《海阔天空》的时候，突然出现黄家驹的原声，不知让多少人又热血沸腾、潸然泪目。<br>
其实我也自诩算个伪港乐迷，日常听的曲库里面差不多有60%左右都是港乐，尤其是上世纪80-90年代的香港乐坛，是我心目中港乐最为辉煌的时期，期间涌现了一批可以被记载到历史的歌手及音乐人，谭咏麟、张国荣、四大天王、陈百强、李克勤，当然还有我的偶像Beyond黄家驹。<br>
开始关注Beyond乐队是从2003年他们开20周年演唱会开始，之前我甚至不知道Beyond乐队这个名字，只知道在香港有个歌手叫黄家驹。<br>
<img src="https://img.ycyc.win/img/20220427133927.png" alt="20220427133927"><br>
和大部分人一样，开始也是喜欢听他们的那几首传唱度较高的《光辉岁月》和《真的爱你》等等，再过后来渐渐了解了乐队的起源以及发展历程之后，再听诸如《灰色轨迹》《未曾后悔》等歌曲之后，我已经被他们的音乐完全吸引，虽然他们的作品基本上都是粤语，但丝毫没有影响到其作品在内地的传唱度，和同一时代的其他香港歌曲相比，他们的音乐坚持原创，有思想，有深度，表达大众的心声，所以才能真正唱到普通人的内心深处，激励一代又一代的年轻人，这才是港乐真正的魅力所在。<br>
当然，八九十年代的香港乐坛，还是有很大一部分歌曲是直接将日本歌填词翻唱的，但就算这样也丝毫没有影响这些作品成为流传至今的经典。<br>
而到了2000年之后，港乐逐渐进入衰退期，很久都没有能再次打动人心的作品出现了，能被人记得的名字，好像也只剩下陈奕迅了吧。</p>
<p>下面分享我的Apple Music曲库中始终占有一席地位的TOP20港乐，仅代表个人喜好，排名不分先后。</p>
<h3 id="海阔天空-Beyond"><a class="header-anchor" href="#海阔天空-Beyond">¶</a>海阔天空-Beyond</h3>
<h3 id="灰色轨迹-Beyond"><a class="header-anchor" href="#灰色轨迹-Beyond">¶</a>灰色轨迹-Beyond</h3>
<h3 id="偏偏喜欢你-陈百强"><a class="header-anchor" href="#偏偏喜欢你-陈百强">¶</a>偏偏喜欢你-陈百强</h3>
<h3 id="漫步人生路-邓丽君"><a class="header-anchor" href="#漫步人生路-邓丽君">¶</a>漫步人生路-邓丽君</h3>
<h3 id="月半小夜曲-李克勤"><a class="header-anchor" href="#月半小夜曲-李克勤">¶</a>月半小夜曲-李克勤</h3>
<h3 id="敢爱敢做-林子祥"><a class="header-anchor" href="#敢爱敢做-林子祥">¶</a>敢爱敢做-林子祥</h3>
<h3 id="讲不出再见-谭咏麟"><a class="header-anchor" href="#讲不出再见-谭咏麟">¶</a>讲不出再见-谭咏麟</h3>
<h3 id="风继续吹-张国荣"><a class="header-anchor" href="#风继续吹-张国荣">¶</a>风继续吹-张国荣</h3>
<h3 id="当年情-张国荣"><a class="header-anchor" href="#当年情-张国荣">¶</a>当年情-张国荣</h3>
<h3 id="一生中最爱-谭咏麟"><a class="header-anchor" href="#一生中最爱-谭咏麟">¶</a>一生中最爱-谭咏麟</h3>
<h3 id="沉默是金-许冠杰-张国荣"><a class="header-anchor" href="#沉默是金-许冠杰-张国荣">¶</a>沉默是金-许冠杰/张国荣</h3>
<h3 id="浪子心声-许冠杰"><a class="header-anchor" href="#浪子心声-许冠杰">¶</a>浪子心声-许冠杰</h3>
<h3 id="遥远的她-张学友"><a class="header-anchor" href="#遥远的她-张学友">¶</a>遥远的她-张学友</h3>
<h3 id="只想一生跟你走-张学友"><a class="header-anchor" href="#只想一生跟你走-张学友">¶</a>只想一生跟你走-张学友</h3>
<h3 id="红日-李克勤"><a class="header-anchor" href="#红日-李克勤">¶</a>红日-李克勤</h3>
<h3 id="一生何求-陈百强"><a class="header-anchor" href="#一生何求-陈百强">¶</a>一生何求-陈百强</h3>
<h3 id="光辉岁月-Beyond"><a class="header-anchor" href="#光辉岁月-Beyond">¶</a>光辉岁月-Beyond</h3>
<h3 id="谁可改变-谭咏麟"><a class="header-anchor" href="#谁可改变-谭咏麟">¶</a>谁可改变-谭咏麟</h3>
<h3 id="千千阙歌-陈慧娴"><a class="header-anchor" href="#千千阙歌-陈慧娴">¶</a>千千阙歌-陈慧娴</h3>
<h3 id="富士山下-陈奕迅"><a class="header-anchor" href="#富士山下-陈奕迅">¶</a>富士山下-陈奕迅</h3>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>音乐</tag>
        <tag>香港</tag>
        <tag>港乐</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐几款安卓和IOS平台用于观看IPTV的客户端软件</title>
    <url>/posts/2353.html</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p><img src="https://img.ycyc.win/img/20240904101409.png" alt="20240904101409"><br>
上周趁着清明假期，鼓捣了一下局域网iptv组播，然后自己也在一些平台和终端测试了一些主流的IPTV播放软件，结合自己手头现有设备的情况，推荐下面几款播放软件，如果你有更好的软件，欢迎推荐分享。<br>
软件本身并不提供IPTV直播服务，需要我们将自己创建或是下载到的m3u文件导入到软件内进行播放。另外有部分软件支持epg节目预告，可以根据m3u里面的频道匹配该频道的节目播放单，实现节目预告。这里感谢51zmt提供的epg服务（<a href="http://epg.51zmt.top:8000/%EF%BC%89">http://epg.51zmt.top:8000/）</a> 。另外该站点还支持台标匹配，你可以上传自己的m3u文件，然后匹配对应的频道台标LOGO。</p>
<h2 id="kodi（全平台）"><a class="header-anchor" href="#kodi（全平台）">¶</a>kodi（全平台）</h2>
<p>只要你的设备能安装和运行kodi，推荐使用kodi来播放IPTV的m3u。<br>
首先需要在插件里面下载 iptv simply client 这个插件，安装好之后在插件设置里面设置好m3u源文件地址，设置好epg节目预告地址（<a href="http://epg.51zmt.top:8000/e.xml%EF%BC%89">http://epg.51zmt.top:8000/e.xml）</a>, 然后在主页面进去电视菜单，就可以观看IPTV了。<br>
官网 <a href="https://kodi.tv">https://kodi.tv</a></p>
<span id="more"></span>
<h2 id="aptv（iOS、tVOS、Mac-OS）"><a class="header-anchor" href="#aptv（iOS、tVOS、Mac-OS）">¶</a>aptv（iOS、tVOS、Mac OS）</h2>
<p>ios平台体验不错的IPTV客户端，免费版只能添加一个m3u配置，但是也够了。软件会根据m3u地址在线匹配epg节目预告，不需要手动设置。界面和切换也很流畅。除了ios，该软件还 支持tvOS和MacOS。<br>
itunes链接 <a href="https://apps.apple.com/cn/app/aptv/id1630403500">https://apps.apple.com/cn/app/aptv/id1630403500</a></p>
<h2 id="tivimate-安卓电视盒子"><a class="header-anchor" href="#tivimate-安卓电视盒子">¶</a>tivimate(安卓电视盒子)</h2>
<p>如果你觉得kodi操作起来比较繁琐，可以试试这款软件。</p>
<h2 id="cloud-stream-iptv-player-旧版iOS设备"><a class="header-anchor" href="#cloud-stream-iptv-player-旧版iOS设备">¶</a>cloud stream iptv player (旧版iOS设备)</h2>
<p>如果你的iOS设备版本太老，不支持安装APTV，可以试试cloud stream iptv player 这个APP（黄色图标）。界面是英文的，但不影响使用，用法类似，直接添加m3u地址源就可以了，比较遗憾的是不支持epg。<br>
itunes链接 <a href="https://apps.apple.com/cn/app/cloud-stream-iptv-player/id1138002135">https://apps.apple.com/cn/app/cloud-stream-iptv-player/id1138002135</a></p>
<h2 id="vlc和potplayer（windows）"><a class="header-anchor" href="#vlc和potplayer（windows）">¶</a>vlc和potplayer（windows）</h2>
<p>windows下可以用vlc或是potplayer直接打开m3u文件播放，当然你也可以在windows上安装kodi。<br>
vlc官网 <a href="https://www.videolan.org/">https://www.videolan.org/</a><br>
potplayer官网 <a href="https://potplayer.daum.net/">https://potplayer.daum.net/</a></p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>iOS</tag>
        <tag>android</tag>
        <tag>IPTV</tag>
        <tag>epg</tag>
      </tags>
  </entry>
  <entry>
    <title>渊澄视频开放公测</title>
    <url>/posts/30251.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/202410181139510.png" alt="image.png"></p>
<p>最近几天抽空建了一个视频网站，用的是苹果cmsV10搭建的。视频数据主要采集各资源平台的m3u8格式。<br>
目前基本功能都已经测试完毕，正式开放公测。<br>
公测期间注册会员可观看全部视频资源。游客会限制部分分类的观看。<br>
公测时间截止到2024年12月31日。bug反馈或是片源需求可在站内留言板中留言。<br>
站点地址： <a href="https://v.ycyc.win">https://v.ycyc.win</a></p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>渊澄视频</tag>
      </tags>
  </entry>
  <entry>
    <title>网易爆米花无需Alist套娃添加小雅资源的方法(2025-1-11更新)</title>
    <url>/posts/5555.html</url>
    <content><![CDATA[<p>最近在搞网易爆米花，一款媒体组织及播放软件，支持多平台，可接入主流网盘，支持WEBDAV、SMB协议。<br>
虽然爆米花宣称支持WEBDAV协议，实测也可以接入标准的alist，但在添加同样基于Alist服务的小雅资源时候却会报错。虽然提示正在全力开发中，但是已经过去半年多了，还是没开发完😂<br>
<img src="https://img.ycyc.win/img/202411281121724.png" alt="image.png"><br>
我在之前的文章中写过，可以通过Alist套娃的方法来将小雅通过Alist中转接入到爆米花，但毕竟还需要再搭建一套Alist，不仅麻烦，还会增加其他不稳定因素。如果你不想再搭一套Alist专门用于小雅的接入，可以试试下面的方法。</p>
<span id="more"></span>
<p>昨天经过反复测试，发现只要在添加小雅webdav协议的时候不要直接添加根目录，而选择添加二级文件夹，如下图所示，在路径/dav后面加上文件夹名称，就不会出现报错提示，可以和常规webdav一样直接接入爆米花，然后进行元数据刮削。<br>
<img src="https://img.ycyc.win/img/202411281114572.png" alt="image.png"><br>
具体是什么原因引起的，个人猜想应该是爆米花对小雅根目录下某些文件或文件夹做了监测，检测到相关的文件就会提示不允许添加，我们只要跳过根目录就可以了。具体网易爆米花为什么会限制小雅的接入，会不会在后续的版本中完全开放小雅的接入，或是封堵这个漏洞，这就不得而知了。<br>
<img src="https://img.ycyc.win/img/202411281115817.png" alt="image.png"></p>
<h2 id="2025-1-11更新"><a class="header-anchor" href="#2025-1-11更新">¶</a>2025-1-11更新</h2>
<p>目前最新版本的爆米花(iOS端1.6.0版本)已经可以直接添加小雅根目录资源了，大家按照常规webdav接入就可以了。<br>
端口：5678，默认用户名：guest，默认密码：guest_Api789，默认路径：/dav<br>
不过还是建议大家不要直接挂载根目录，因为确实没有什么太大的用处。直接挂载几个主要的文件夹即可，比如电影、电视剧、每日更新。<br>
<s>具体针对小雅做了什么特殊优化还未知。</s><br>
咨询小雅作者后得知，原来是最新版的小雅跳过了爆米花的检测，而非爆米花针对小雅做了优化。😂</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>alist</tag>
        <tag>网易</tag>
        <tag>小雅</tag>
        <tag>爆米花</tag>
      </tags>
  </entry>
  <entry>
    <title>H96pro+盒子刷原生谷歌Android TV系统</title>
    <url>/posts/34659.html</url>
    <content><![CDATA[<p>H96 PRO+是一款配置很高的山寨安卓播放盒，采用S912的处理器，最高配置3GB运存，32GB存储空间，自带Android原生系统，支持4K分辨率。淘宝上每台390块大洋，就参数配置来讲，还是很有性价比的，比目前配置最高的小米盒子还要高。</p>
<p><img src="https://img.ycyc.win/img/202411021303069.jpg" alt=""></p>
<p>只不过盒子自带的是Android系统，非Android TV系统，Android TV 系统是Google专为TV优化的操作系统，配备Android TV的硬件主要有小米盒子国际版以及英伟达的Shield TV等。</p>
<p>与普通的Android系统相比，Android TV系统为电视以及遥控器做了很多优化，更适合在电视上使用，我查阅了国内外大神的相关文章，结合自己的实际经验，写了这篇教程，如有不对的地方，敬请指正。</p>
<p>我们需要用到的东西：</p>
<p>H96 PRO+一台；</p>
<p>16GB的TF卡一张（含读卡器）；</p>
<p>卡针一个；</p>
<p>Windows系统的电脑一台。</p>
<p>操作马上开始。</p>
<p>下载名为BurnCardMaker的软件并安装。</p>
<p>下载Android TV固件镜像（H96 PRO+的主板有蓝色和绿色两种，大家可以通过机器的缝隙看到，请下载自己对应颜色的固件）。</p>
<p>打开BurnCardMaker软件，将TF卡连接到电脑，在软件里选择好TF卡的盘符，浏览到下载好的固件，分区和格式化打钩，选择强制擦除，然后点击&quot;制作&quot;开始将固件写入到TF卡中。</p>
<p><img src="https://img.ycyc.win/img/202411021304319.png" alt="TIM截图20180423140701.png"></p>
<p>写入完毕之后我们将TF卡插入机器中，连接好HDMI线，然后用卡针按住reset孔不放的同时接通电源，然后松开卡针。</p>
<p>此时电视屏幕上应该会出现Android机器人的画面，等待刷机完成，重启机器即可完成整个刷机过程。</p>
<p><strong><span style="color: #ff0000;">软件及固件下载地址在页面下方。</span></strong></p>
<p>最后吐槽一下盒子的做工，简直是粗糙到无力吐槽，无论是盒子本身还是遥控器，如果对于硬件配置没有太高要求，对外观做工比较看重的朋友，还是建议入手小米盒子之类的国内品牌电视盒子。</p>
<p>下载地址链接: <a href="https://pan.baidu.com/s/1_v45uHmL9b8g3Fcm-BuWeA">https://pan.baidu.com/s/1_v45uHmL9b8g3Fcm-BuWeA</a> 提取码: 52my</p>
<p><span style="color: #008000;">目前我的H96PRO+电源口已经坏掉了，现在沦为尸体，各位珍重吧。</span></p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>刷机</tag>
        <tag>Android安卓</tag>
        <tag>android</tag>
        <tag>机顶盒</tag>
      </tags>
  </entry>
  <entry>
    <title>再次入坑黑群晖</title>
    <url>/posts/42924.html</url>
    <content><![CDATA[<p>前些天在某鱼入手了一台二手的群晖ds214se，用了一段时间之后，感觉机器的硬件配置实在是太差了，开机打开一个应用，CPU占用率就直接飙到了100%，而且还不支持docker，所以果断出掉了。</p>
<p>最近在SMZDM上看了几篇DIY NAS的文章，加上家人的手机存储空间都不够了，于是又萌生了DIY黑群晖的想法，之前自己也做过一台黑群晖，用的是DELL的ZINO准系统，基于intel的ATOM平台，配了2GB的内存，硬件性能倒是够用，无奈LAN口是百兆的，局域网内传输稍大一点的文件就不给力了，最后也在某鱼上出手了。</p>
<p>直接买台群晖倒是省心，怎奈坑爹群晖，便宜的型号性能太弱，性能好的机器又太贵，我等温饱尚未解决的同志还是消费不起，那只好自己动手来组装了，好在现在网上关于黑群晖安装的资源还是很多的，有点基础的朋友还是很容易上手的。</p>
<p>然后来说说我用到NAS的几个功能。</p>
<p>1.高清视频、音乐、文件的存储及共享；</p>
<p>2.自动备份手机里的照片；</p>
<p>3.挂机下载高清视频；</p>
<p>4.连接高清播放器播放电影和音乐；</p>
<p>5.定时备份电脑里面的重要文件；</p>
<p>6.再外可以随时读取到NAS里面的文件；</p>
<p>7.鼓捣docker。</p>
<p>这次在淘宝上买了一款集成了AMD A8CPU的磐正A5545NX7主板，ITX规格，主板自带4个SATA3接口，也就是说如果机箱允许的话，可以接4块硬盘，内存支持DDR3，正好家里有一条闲置的DDR3 1333 4GB内存条拿来用，然后家里有两块1T的硬盘，先拿来练手，机箱选择了酷冷至尊的小魔方，支持ITX主板，带3个硬盘位，支持标准电源，电源也选择了酷冷至尊299元的全模组电源，东西还没到货，估计这周末应该能到，等到货之后再来写一篇详细的安装和使用教程吧。</p>
<p><img src="https://img.ycyc.win/img/202411021301602.jpg" alt="TB2Utq.cH4npuFjSZFmXXXl4FXa_2429537308.jpg"></p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>Synology群晖</tag>
        <tag>synology群晖</tag>
        <tag>黑群晖</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title>H96pro+盒子刷原生谷歌Android TV系统</title>
    <url>/posts/34659.html</url>
    <content><![CDATA[<p>H96 PRO+是一款配置很高的山寨安卓播放盒，采用S912的处理器，最高配置3GB运存，32GB存储空间，自带Android原生系统，支持4K分辨率。淘宝上每台390块大洋，就参数配置来讲，还是很有性价比的，比目前配置最高的小米盒子还要高。</p>
<p><img src="https://img.ycyc.win/img/202411021303069.jpg" alt=""></p>
<p>只不过盒子自带的是Android系统，非Android TV系统，Android TV 系统是Google专为TV优化的操作系统，配备Android TV的硬件主要有小米盒子国际版以及英伟达的Shield TV等。</p>
<p>与普通的Android系统相比，Android TV系统为电视以及遥控器做了很多优化，更适合在电视上使用，我查阅了国内外大神的相关文章，结合自己的实际经验，写了这篇教程，如有不对的地方，敬请指正。</p>
<p>我们需要用到的东西：</p>
<p>H96 PRO+一台；</p>
<p>16GB的TF卡一张（含读卡器）；</p>
<p>卡针一个；</p>
<p>Windows系统的电脑一台。</p>
<p>操作马上开始。</p>
<p>下载名为BurnCardMaker的软件并安装。</p>
<p>下载Android TV固件镜像（H96 PRO+的主板有蓝色和绿色两种，大家可以通过机器的缝隙看到，请下载自己对应颜色的固件）。</p>
<p>打开BurnCardMaker软件，将TF卡连接到电脑，在软件里选择好TF卡的盘符，浏览到下载好的固件，分区和格式化打钩，选择强制擦除，然后点击&quot;制作&quot;开始将固件写入到TF卡中。</p>
<p><img src="https://img.ycyc.win/img/202411021304319.png" alt="TIM截图20180423140701.png"></p>
<p>写入完毕之后我们将TF卡插入机器中，连接好HDMI线，然后用卡针按住reset孔不放的同时接通电源，然后松开卡针。</p>
<p>此时电视屏幕上应该会出现Android机器人的画面，等待刷机完成，重启机器即可完成整个刷机过程。</p>
<p><strong><span style="color: #ff0000;">软件及固件下载地址在页面下方。</span></strong></p>
<p>最后吐槽一下盒子的做工，简直是粗糙到无力吐槽，无论是盒子本身还是遥控器，如果对于硬件配置没有太高要求，对外观做工比较看重的朋友，还是建议入手小米盒子之类的国内品牌电视盒子。</p>
<p>下载地址链接: <a href="https://pan.baidu.com/s/1_v45uHmL9b8g3Fcm-BuWeA">https://pan.baidu.com/s/1_v45uHmL9b8g3Fcm-BuWeA</a> 提取码: 52my</p>
<p><span style="color: #008000;">目前我的H96PRO+电源口已经坏掉了，现在沦为尸体，各位珍重吧。</span></p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>刷机</tag>
        <tag>Android安卓</tag>
        <tag>android</tag>
        <tag>机顶盒</tag>
      </tags>
  </entry>
  <entry>
    <title>经典播放器KMPlayer-YouTube视频播放下载利器</title>
    <url>/posts/48882.html</url>
    <content><![CDATA[<p>KMPlayer是来自韩国的一款视频播放器，可以播放包括MKV、AVI、MP4在内的多种格式的视频文件。</p>
<p><img src="https://img.ycyc.win/img/202411021300840.png" alt="TIM截图20181215211734.png"></p>
<p>之前没有发现，这个播放器还可以播放YouTube视频，只需要复制YouTube的视频地址，用KMPlayer打开即可播放。</p>
<p>今天要提到的是，KMPlayer居然还可以下载Youtube上的视频哦。播放器左下角有个&quot;下载&quot;的图标，打开它，把视频地址复制进去，选择你要下载的视频格式及分辨率，然后选择保存位置，就可以开始下载了。</p>
<p><img src="https://img.ycyc.win/img/202411021300934.png" alt="TIM截图20181215210306.png"></p>
<p>当然，以上播放和下载YouTube视频的前提是你的网络环境支持科学上网。</p>
<p>KMPlayer播放器官网<a href="http://www.kmplayer.com/">http://www.kmplayer.com/</a></p>
]]></content>
      <categories>
        <category>影音</category>
      </categories>
      <tags>
        <tag>视频</tag>
        <tag>youtube</tag>
        <tag>下载</tag>
        <tag>KMPlayer</tag>
        <tag>KODI科迪</tag>
        <tag>播放器</tag>
      </tags>
  </entry>
  <entry>
    <title>istoreos外接网卡做主路由获取不到IP地址解决方法</title>
    <url>/posts/42078.html</url>
    <content><![CDATA[<h2 id="事件经过及故障现象"><a class="header-anchor" href="#事件经过及故障现象">¶</a>事件经过及故障现象</h2>
<p>目前手头有N1和oect两个设备，两个机器都自带一个千兆网口，都刷了istoreos作为旁路由使用，使用也很正常。于是我就想着外接一个USB网卡作为wan口，让设备可以拥有两个网口来当作主路由使用。<br>
插入网卡后系统可以正常识别为eth1接口，于是我将eth1设置为了wan口，用于pppoe拨号，机器自带的网桥br-lan作为lan口。<br>
<img src="https://img.iycyc.com/img/20250224095617351.png" alt="image.png"><br>
并将lan口的dhcp功能以及强制选项打开。<br>
<img src="https://img.iycyc.com/img/20250224095800904.png" alt="image.png"><br>
以为这样就万事大吉可以正常分配IP地址了，但是当我将电脑接入到lan口后，死活获取不到IP地址，必须手动设置和路由器同一网段的地址才能登录到路由器。<br>
接着我找遍了可能的所有设置，均未解决无法自动分配IP地址的问题，而且该问题同时存在于N1和oect。</p>
<span id="more"></span>
<h2 id="解决方法"><a class="header-anchor" href="#解决方法">¶</a>解决方法</h2>
<p>于是我向万能的电报群友求助，感谢群里Jerry大佬的帮助，最终发现是dhcp配置文件里面将v4地址禁用了。和外接网卡没有半毛钱关系。<br>
该文件位于/etc/config/dhcp，文件内的dhcpv4字段为disabled，改为server或是将该字段去除，然后重启系统，就可以解决不能分配IP地址的问题了。<br>
<img src="https://img.iycyc.com/img/20250224100538777.png" alt="image.png"><br>
至于为什么该字段被设置为disabled，可能是作者没想到有人会用单网口的设备主路由，所以为了引起不必要的故障，直接在文件里写死了dhcp功能，无论你界面上怎么设置，都无法开启。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>istoreOS</tag>
        <tag>dhcp</tag>
      </tags>
  </entry>
  <entry>
    <title>cloudflare pages同步github Hexo</title>
    <url>/posts/38710.html</url>
    <content><![CDATA[<p>Cloudflare有一个pages的功能，类似于Github Page,可以用来托管静态网站。那有没有可能将hexo站点托管到CF pages呢？<br>
下面来操作吧。</p>
<h3 id="创建build-sh脚本"><a class="header-anchor" href="#创建build-sh脚本">¶</a>创建build.sh脚本</h3>
<p>首先确保你在Github上有Hexo的仓库，我们在仓库的根目录新建一个名为build.sh的文件，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 配置环境</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">mkdir hexo</span><br><span class="line">cd hexo</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br><span class="line">rm -rf source/_posts</span><br><span class="line">mkdir -p source/_posts</span><br><span class="line"></span><br><span class="line"># 安装主题(你们可以改成自己喜欢的主题)</span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"></span><br><span class="line"># 使用新的渲染器</span><br><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it --save</span><br><span class="line"># 处理图片</span><br><span class="line">npm i hexo-image-link --save</span><br><span class="line"></span><br><span class="line"># 复制文章到指定目录</span><br><span class="line">cd ../</span><br><span class="line">cp -r `ls | grep -v hexo | grep -v config.yml | xargs` hexo/source/_posts</span><br><span class="line"># 复制配置文件</span><br><span class="line">cp config.yml hexo</span><br><span class="line"></span><br><span class="line"># 开始构建</span><br><span class="line">cd hexo &amp;&amp; hexo g --config config.yml </span><br></pre></td></tr></table></figure>
<h3 id="登录CF创建应用"><a class="header-anchor" href="#登录CF创建应用">¶</a>登录CF创建应用</h3>
<p>登录到Cloudflare，切换到pages选项卡，新建一个项目，选择“连接到git”，使用Github账户登录<br>
<img src="https://img.ycyc.win/img/20220725160214.png" alt="20220725160214"><br>
然后选择你的hexo仓库，点击下一步<br>
<img src="https://img.ycyc.win/img/20220725160035.png" alt="20220725160035"><br>
按图片所示填入信息，然后点击保存并部署。<br>
<img src="https://img.ycyc.win/img/20220725160435.png" alt="20220725160435"><br>
部署完成之后我们就可以使用系统分配的pages.dev域名来访问部署在Cloudflare的站点了。</p>
<h3 id="测试同步"><a class="header-anchor" href="#测试同步">¶</a>测试同步</h3>
<p>现在看下在github上发布一篇文章，看看会不会自动同步更新。<br>
<img src="https://img.ycyc.win/img/20220725160708.png" alt="20220725160708"></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>Cloudflare</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>丢掉端口，使用cloudflare tunnel 实现免端口访问内网服务</title>
    <url>/posts/5954.html</url>
    <content><![CDATA[<h2 id="楔子"><a class="header-anchor" href="#楔子">¶</a>楔子</h2>
<p>何为内网穿透，简单来说就是在公网可以直接访问到你在内网搭建的各种服务。<br>
起初是我前两天在serv00搭建了alist，并且把原本在openwrt上面搭建的数据都迁移了过去。今天发现上面挂载的国内网盘（百度、阿里云及115）都加载不出来，全部显示timeout超时，cloudflare的R2存储可以正常打开。而我之前挂载在openwrt上面的却能正常访问，想想可能是serv00对访问国内网盘的api有做限制或是国内网盘限制从serv00服务器登录？所以我还是想着把挂在openwrt上的Alist开放出来做存储站点附件的网盘用，因为在serv00上的alist地址不带端口，所以就想到了做内网穿透。</p>
<h2 id="传统DDNS设置"><a class="header-anchor" href="#传统DDNS设置">¶</a>传统DDNS设置</h2>
<p>对于普通家用宽带用户来说，一般需要做DDNS域名+端口的形式来访问内网服务，当然这个前提是你家宽带获取到了公网IP。这个方法也是我目前常用的方法，一般的操作步骤如下：<br>
1.在主路由添加并设置DDNS服务，常用的DDNS服务商是花生壳。首先你需要先去花生壳注册一个账户，还要注册一个壳域名。然后在路由器相关界面输入账号和域名信息。目前国内主流的路由器基本上都内置了oray花生壳的ddns服务。<br>
<img src="https://img.ycyc.win/img/202410141138710.png" alt="image.png"></p>
<p>2.在主路由添加NAT端口映射服务，设置外部访问端口，这里内部端口和外部端口可以不一致。内部端口是你内网环境下该服务使用的端口，而外部端口是你希望在外网环境下访问该服务使用的端口。目前国内运营商基本上都封禁了类似于80、443、21、22等常用的端口，所以我们如果需要外网访问这些端口服务的话，就需要将这些端口映射成其他不同的端口。<br>
<img src="https://img.ycyc.win/img/202410141139654.png" alt="image.png"></p>
<p>这样设置完之后就可以通过ddns域名+外部访问端口来访问对应的服务了。</p>
<span id="more"></span>
<p>如果你家宽带没有公网IP，那这个办法就行不通了，而且这种方法访问的时候需要加端口号，形式上不太美观，更重要的是会直接暴露你家的公网IP地址。<br>
这个时候就需要用到内网穿透技术了，常用的内网穿透技术还有frps，但这个需要搭建一个单独的服务器，门槛比较高。今天介绍的是使用cloudflare的tunnel服务来实现内网穿透，只需要一个可以运行docker的环境即可。因为我家里还有一个刷了openwrt的旁路由，可以运行docker容器，所以我就在这台openwrt上跑cloudflare tunnel服务了。</p>
<h2 id="cloudflare-tunnel设置"><a class="header-anchor" href="#cloudflare-tunnel设置">¶</a>cloudflare tunnel设置</h2>
<p>登录到cloudflare网站，进入站点，左侧菜单找到Access。进入Zero Trust。</p>
<p><img src="https://img.ycyc.win/img/202410141146472.png" alt="image.png"><br>
进入Network，找到Tunnel，新增一条tunnel记录。</p>
<p><img src="https://img.ycyc.win/img/202410141144398.png" alt="tunnel01.png"></p>
<p>给tunnel起一个名字。</p>
<p><img src="https://img.ycyc.win/img/202410141145576.png" alt="tunnel02.png"></p>
<p>环境选择Docker，并复制下面的运行命令。</p>
<p><img src="https://img.ycyc.win/img/202410141145029.png" alt="tunnel03.png"></p>
<p>接着输入你想要设置的二级域名，并且输入内网主机地址及端口，Type选择HTTP。完成之后会自带https。</p>
<p><img src="https://img.ycyc.win/img/202410141144093.png" alt="tunnel04.png"></p>
<p>接着使用复制出来的命令在旁路由上新建容器，确保容器正常运行即可。</p>
<p>等待几分钟在Tunnels中看到状态为healthy，就可以用我们设置好的二级域名直接访问内网服务了。<br>
<img src="https://img.ycyc.win/img/202410141352698.png" alt="image.png"></p>
<p>如果你后续还需要穿透更多的服务，直接编辑现有的tunnel就可以增加了，无需再次部署docker。<br>
<img src="https://img.ycyc.win/img/202410141353584.png" alt="image.png"></p>
<p><img src="https://img.ycyc.win/img/202410141154556.png" alt="image.png"></p>
<p>如果我们回到这个域名的解析列表中查看，可以看到刚刚设置的二级域名被CNAME解析到了cfargotunnel.com结尾的站点，并且开启了黄色小云朵。无论你在这个tunnels下创建了多少个hostname，这个地址都是相同的。<br>
<img src="https://img.ycyc.win/img/202410141401200.png" alt="image.png"></p>
<h2 id="访问速度"><a class="header-anchor" href="#访问速度">¶</a>访问速度</h2>
<p>基于国内的网络状况，相较于传统的ddns，cloudflare tunnels在国内的访问速度比较一般，主要表现在第一次打开时比较慢。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
        <tag>tunnel</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cloudflare ddns 解析群晖NAS ipv4和ipv6地址</title>
    <url>/posts/63020.html</url>
    <content><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2>
<p>家庭宽带现在基本上都很难要到公网IP了，但是IPv6却很有可能会直接获取到。如果你的群晖NAS能获取到IPV6地址，并且这个地址是公网地址，那就可以利用这个地址来远程访问和管理你的NAS了。</p>
<h2 id="确认获取IPV6公网地址"><a class="header-anchor" href="#确认获取IPV6公网地址">¶</a>确认获取IPV6公网地址</h2>
<p>确认之前需要确保你的路由器或光猫中相关IPV6的选项已经开启。<br>
如下图所示，在群晖的网络界面IPV6选项中看到2408开头的V6地址（不同运营商前缀不一样），说明IPV6已经获取成功，可以跟着我往下操作了。<br>
<img src="https://img.ycyc.win/img/202412251332771.png" alt="image.png"></p>
<h2 id="IPV4解析"><a class="header-anchor" href="#IPV4解析">¶</a>IPV4解析</h2>
<p>关于IPV4地址的解析可以参阅我之前写的文章，这里不在赘述。<br>
<a href="https://ycyc.win/posts/44166">群晖安装cloudflare的ddns服务 | 渊澄</a></p>
<span id="more"></span>
<h2 id="IPV6解析"><a class="header-anchor" href="#IPV6解析">¶</a>IPV6解析</h2>
<p>那有小伙伴会问，我同一个域名能不能既设置IPV4解析，又设置IPV6解析呢？答案是肯定可以的，两种地址都设置解析的话，如果你的网络支持IPV6访问，浏览器会默认优先使用IPV6地址来访问。但是目前在群晖自带的ddns服务中，仅有synology自家的ddns服务支持V4和V6双解析，其他三方的ddns服务都只能设置IPV4地址的解析。如果你和我一样使用的是黑群晖，就无法使用这个服务了。但是方法总比困难多，我们可以docker来创建一个容器，进行ipv6地址的解析。<br>
首先ssh登录到NAS，使用下面的命令拉取镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull docker.miaoyang.win/oznu/cloudflare-ddns</span><br></pre></td></tr></table></figure>
<p>然后打开docker界面创建容器，在环境变量中添加API_KEY，ZONE及SUBDOMAIN三个变量，分别对应cloudflare的API KEY，一级域名以及二级域名前缀。这里的域名需要与你IPV4解析中设置的域名一致。另外需要将RRTYPE的值修改为AAAA。</p>
<p><img src="https://img.ycyc.win/img/202412251342211.png" alt="image.png"><br>
最后勾选“启用自动重新启动”，即可运行容器。<br>
容器启动后可通过日志查看服务是否正常运行，另外可登录cloudflare网站查看相关域名的解析是否已正确添加。</p>
<h2 id="结尾"><a class="header-anchor" href="#结尾">¶</a>结尾</h2>
<p>如果一切顺利的话你设置的二级域名已经可以成功解析到IPV4和IPV6两个地址了，在支持IPV6访问的环境下，就会优先使用IPV6地址来访问我们的NAS了。如果你的宽带只获取到了IPV6地址，也可以尝试只设置IPV6解析，这样在支持IPV6的地方也能访问到NAS设备，无需再搞什么内网穿透了。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>群晖</tag>
        <tag>Cloudflare</tag>
        <tag>DDNS</tag>
        <tag>IPV6</tag>
        <tag>IPV4</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cloudflare+jsdmirror加速github图床访问</title>
    <url>/posts/54996.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/202409111646715.png" alt="image.png"></p>
<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>之前写过一篇文章，如何设置github图床(<a href="https://miaoyang.win/posts/23057">https://miaoyang.win/posts/23057</a>) ，由于github在国内的访问时长抽风，导致浏览体验不太理想，所以当初使用了Jsdelivr的加速服务，也就是在Picgo自定义域名那里填写<a href="https://cdn.jsdelivr.net/gh/GitHub%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/GitHub用户名/仓库名</a> 使用Jsdelivr的cdn来加速图床的访问。<br>
但是最近Jsdelivr在国内的访问也是时断时续，经常出现打不开的情况。于是想着看看还有什么可用的国内加速服务。一路搜索找到了jsdmirror这个服务，详细介绍可查看项目Github页面（<a href="https://github.com/54ayao/JSDMirror%EF%BC%89">https://github.com/54ayao/JSDMirror）</a> ，太深奥的专业术语咱也看不懂，只知道这个服务可以代替Jsdelivr，加速国内的访问。<br>
然后拜读了Leehow的这篇文章<a href="https://www.haoyep.com/posts/github-graph-beds-cdn/">通过 Cloudflare 和 JsDelivr 免费加速博客 GitHub 图床等静态资源</a> ，于是决定放手一试，用cloudflare来加速图床的访问。</p>
<h2 id="实现的效果"><a class="header-anchor" href="#实现的效果">¶</a>实现的效果</h2>
<p>最终实现的效果：使用自己的二级域名<a href="https://cdn.miaoyang.win">https://cdn.miaoyang.win</a> 来替换jsdelivr的<a href="https://cdn.jsdelivr.net">https://cdn.jsdelivr.net</a> 来加速github图床，并且根据访问者的ip匹配规则，国内ip调用jsdmirror的服务，国外ip调用jsdelivr。</p>
<span id="more"></span>
<h2 id="操作前提"><a class="header-anchor" href="#操作前提">¶</a>操作前提</h2>
<p>1.github图床已经设置完成并且可以正常访问，具体设置教程请参与(<a href="https://miaoyang.win/posts/23057">https://miaoyang.win/posts/23057</a>);<br>
2.域名已经停靠到了cloudflare。<br>
3.有一个绑定了银行卡的paypal账户，无需付款。</p>
<h2 id="操作步骤"><a class="header-anchor" href="#操作步骤">¶</a>操作步骤</h2>
<h3 id="二级域名cdn-miaoyang-win使用cname解析到cdn-jsdmirror-com，并且勾选代理云朵图标。"><a class="header-anchor" href="#二级域名cdn-miaoyang-win使用cname解析到cdn-jsdmirror-com，并且勾选代理云朵图标。">¶</a><a href="http://xn--cdn-pi9dr5ww6fu92f.miaoyang.xn--wincnamecdn-yd2r83z161fjv0bhl4d.jsdmirror.com">二级域名cdn.miaoyang.win使用cname解析到cdn.jsdmirror.com</a>，并且勾选代理云朵图标。</h3>
<p><img src="https://img.ycyc.win/img/20240910140410.png" alt="20240910140410"></p>
<h3 id="设置重定向规则"><a class="header-anchor" href="#设置重定向规则">¶</a>设置重定向规则</h3>
<p>根据访问者ip来设置重定向规则。<br>
<img src="https://img.ycyc.win/img/20240910140544.png" alt="20240910140544"></p>
<p>国内ip规则设置如下图所示：<br>
<img src="https://img.ycyc.win/img/20240910140922.png" alt="20240910140922"><br>
表达式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">concat(&quot;https://cdn.jsdmirror.com&quot;, http.request.uri.path)</span><br></pre></td></tr></table></figure>
<p>国外ip规则设置如下图所示：<br>
<img src="https://img.ycyc.win/img/20240910140834.png" alt="20240910140834"><br>
表达式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">concat(&quot;https://cdn.jsdelivr.net&quot;, http.request.uri.path)</span><br></pre></td></tr></table></figure>
<h3 id="订阅saas申请SSL证书"><a class="header-anchor" href="#订阅saas申请SSL证书">¶</a>订阅saas申请SSL证书</h3>
<p>进入如下图所示的“自定义主机名”页面，申请saas服务，申请过程需要外币卡或是绑定了银行卡的paypal账号，但并不会实际发生扣款。<br>
<img src="https://img.ycyc.win/img/20240910141119.png" alt="20240910141119"><br>
开通saas服务之后添加二级域名并进行认证，之后等待域名状态和证书状态为“有效”即可。</p>
<h2 id="测试效果"><a class="header-anchor" href="#测试效果">¶</a>测试效果</h2>
<p>在picgo插件中将原有的delivr网址替换为自己设置的cdn.miaoyang.win即可测试服务是否正常。<br>
将图片链接复制到浏览器中，切换国内外ip观察其是否会跳转到指定的加速站点。</p>
<h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2>
<p>在部署过程中遇到了图片无法正常显示以及https无法访问异常的情况，试着在jsdmirror的github主页试着提交了issus，得到了作者54ayao的指点，才得以最终部署完成，特此感谢。</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://www.haoyep.com/posts/github-graph-beds-cdn/">通过 Cloudflare 和 JsDelivr 免费加速博客 GitHub 图床等静态资源</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>github</tag>
        <tag>Cloudflare</tag>
        <tag>jsdmirror</tag>
        <tag>jsdelivr</tag>
        <tag>加速</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cloudflare的worker加速docker镜像下载</title>
    <url>/posts/11994.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/20240904100521.png" alt="20240904100521"><br>
进入六月份以后国内众多的docker加速镜像突然停止了服务，外加docker官方源在国内被屏蔽，导致拉取docker镜像成了难题，就算是挂上梯子，速度也不理想。有网友发布了通过cloudflare的worker服务来加速docker镜像拉取的教程，我也实际操作了一遍，操作不复杂，而且加速效果明显，感兴趣的同学可以根据我下面的步骤操作。</p>
<h3 id="将域名停靠到cloudflare"><a class="header-anchor" href="#将域名停靠到cloudflare">¶</a>将域名停靠到cloudflare</h3>
<p>先去注册cloudflare账号，然后添加你的域名，将域名的NS地址改到cloudflare，等待生效。</p>
<span id="more"></span>
<h3 id="新建worker项目"><a class="header-anchor" href="#新建worker项目">¶</a>新建worker项目</h3>
<p>进入左侧的worker和pages菜单<br>
<img src="https://img.ycyc.win/img/20240708094217.png" alt="20240708094217"><br>
新建一个worker项目，然后自己随意起个项目名字，最后点击右下角的部署按钮。<br>
<img src="https://img.ycyc.win/img/20240708094525.png" alt="20240708094525"></p>
<h3 id="复制代码"><a class="header-anchor" href="#复制代码">¶</a>复制代码</h3>
<p>创建成功之后点击如图所示的编辑代码按钮。<br>
<img src="https://img.ycyc.win/img/20240708094650.png" alt="20240708094650"><br>
将下面的代码全部复制过去,然后点击右上角的部署按钮。<br>
<img src="https://img.ycyc.win/img/20240708094926.png" alt="20240708094926"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;</span><br><span class="line">const hub_host = &#x27;registry-1.docker.io&#x27;</span><br><span class="line">const auth_url = &#x27;https://auth.docker.io&#x27;</span><br><span class="line">const workers_url = &#x27;https://yourdomain.com&#x27;</span><br><span class="line">const PREFLIGHT_INIT = &#123;</span><br><span class="line">    status: 204,</span><br><span class="line">    headers: new Headers(&#123;</span><br><span class="line">        &#x27;access-control-allow-origin&#x27;: &#x27;*&#x27;,</span><br><span class="line">        &#x27;access-control-allow-methods&#x27;: &#x27;GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS&#x27;,</span><br><span class="line">        &#x27;access-control-max-age&#x27;: &#x27;1728000&#x27;,</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;</span><br><span class="line">function makeRes(body, status = 200, headers = &#123;&#125;) &#123;</span><br><span class="line">    headers[&#x27;access-control-allow-origin&#x27;] = &#x27;*&#x27;</span><br><span class="line">    return new Response(body, &#123;status, headers&#125;)</span><br><span class="line">&#125;</span><br><span class="line">function newUrl(urlStr) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        return new URL(urlStr)</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        return null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">addEventListener(&#x27;fetch&#x27;, e =&gt; &#123;</span><br><span class="line">    const ret = fetchHandler(e)</span><br><span class="line">        .catch(err =&gt; makeRes(&#x27;cfworker error:n&#x27; + err.stack, 502))</span><br><span class="line">    e.respondWith(ret)</span><br><span class="line">&#125;)</span><br><span class="line">async function fetchHandler(e) &#123;</span><br><span class="line">  const getReqHeader = (key) =&gt; e.request.headers.get(key);</span><br><span class="line">  let url = new URL(e.request.url);</span><br><span class="line">  if (url.pathname === &#x27;/token&#x27;) &#123;</span><br><span class="line">      let token_parameter = &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">        &#x27;Host&#x27;: &#x27;auth.docker.io&#x27;,</span><br><span class="line">        &#x27;User-Agent&#x27;: getReqHeader(&quot;User-Agent&quot;),</span><br><span class="line">        &#x27;Accept&#x27;: getReqHeader(&quot;Accept&quot;),</span><br><span class="line">        &#x27;Accept-Language&#x27;: getReqHeader(&quot;Accept-Language&quot;),</span><br><span class="line">        &#x27;Accept-Encoding&#x27;: getReqHeader(&quot;Accept-Encoding&quot;),</span><br><span class="line">        &#x27;Connection&#x27;: &#x27;keep-alive&#x27;,</span><br><span class="line">        &#x27;Cache-Control&#x27;: &#x27;max-age=0&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      let token_url = auth_url + url.pathname + url.search</span><br><span class="line">      return fetch(new Request(token_url, e.request), token_parameter)</span><br><span class="line">  &#125;</span><br><span class="line">  url.hostname = hub_host;</span><br><span class="line">  let parameter = &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &#x27;Host&#x27;: hub_host,</span><br><span class="line">      &#x27;User-Agent&#x27;: getReqHeader(&quot;User-Agent&quot;),</span><br><span class="line">      &#x27;Accept&#x27;: getReqHeader(&quot;Accept&quot;),</span><br><span class="line">      &#x27;Accept-Language&#x27;: getReqHeader(&quot;Accept-Language&quot;),</span><br><span class="line">      &#x27;Accept-Encoding&#x27;: getReqHeader(&quot;Accept-Encoding&quot;),</span><br><span class="line">      &#x27;Connection&#x27;: &#x27;keep-alive&#x27;,</span><br><span class="line">      &#x27;Cache-Control&#x27;: &#x27;max-age=0&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    cacheTtl: 3600</span><br><span class="line">  &#125;;</span><br><span class="line">  if (e.request.headers.has(&quot;Authorization&quot;)) &#123;</span><br><span class="line">    parameter.headers.Authorization = getReqHeader(&quot;Authorization&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  let original_response = await fetch(new Request(url, e.request), parameter)</span><br><span class="line">  let original_response_clone = original_response.clone();</span><br><span class="line">  let original_text = original_response_clone.body;</span><br><span class="line">  let response_headers = original_response.headers;</span><br><span class="line">  let new_response_headers = new Headers(response_headers);</span><br><span class="line">  let status = original_response.status;</span><br><span class="line">  if (new_response_headers.get(&quot;Www-Authenticate&quot;)) &#123;</span><br><span class="line">    let auth = new_response_headers.get(&quot;Www-Authenticate&quot;);</span><br><span class="line">    let re = new RegExp(auth_url, &#x27;g&#x27;);</span><br><span class="line">    new_response_headers.set(&quot;Www-Authenticate&quot;, response_headers.get(&quot;Www-Authenticate&quot;).replace(re, workers_url));</span><br><span class="line">  &#125;</span><br><span class="line">  if (new_response_headers.get(&quot;Location&quot;)) &#123;</span><br><span class="line">    return httpHandler(e.request, new_response_headers.get(&quot;Location&quot;))</span><br><span class="line">  &#125;</span><br><span class="line">  let response = new Response(original_text, &#123;</span><br><span class="line">            status,</span><br><span class="line">            headers: new_response_headers</span><br><span class="line">        &#125;)</span><br><span class="line">  return response;</span><br><span class="line">&#125;</span><br><span class="line">function httpHandler(req, pathname) &#123;</span><br><span class="line">    const reqHdrRaw = req.headers</span><br><span class="line">    // preflight</span><br><span class="line">    if (req.method === &#x27;OPTIONS&#x27; &amp;&amp;</span><br><span class="line">        reqHdrRaw.has(&#x27;access-control-request-headers&#x27;)</span><br><span class="line">    ) &#123;</span><br><span class="line">        return new Response(null, PREFLIGHT_INIT)</span><br><span class="line">    &#125;</span><br><span class="line">    let rawLen = &#x27;&#x27;</span><br><span class="line">    const reqHdrNew = new Headers(reqHdrRaw)</span><br><span class="line">    const refer = reqHdrNew.get(&#x27;referer&#x27;)</span><br><span class="line">    let urlStr = pathname</span><br><span class="line">    const urlObj = newUrl(urlStr)</span><br><span class="line">    /** @type &#123;RequestInit&#125; */</span><br><span class="line">    const reqInit = &#123;</span><br><span class="line">        method: req.method,</span><br><span class="line">        headers: reqHdrNew,</span><br><span class="line">        redirect: &#x27;follow&#x27;,</span><br><span class="line">        body: req.body</span><br><span class="line">    &#125;</span><br><span class="line">    return proxy(urlObj, reqInit, rawLen, 0)</span><br><span class="line">&#125;</span><br><span class="line">async function proxy(urlObj, reqInit, rawLen) &#123;</span><br><span class="line">    const res = await fetch(urlObj.href, reqInit)</span><br><span class="line">    const resHdrOld = res.headers</span><br><span class="line">    const resHdrNew = new Headers(resHdrOld)</span><br><span class="line">    // verify</span><br><span class="line">    if (rawLen) &#123;</span><br><span class="line">        const newLen = resHdrOld.get(&#x27;content-length&#x27;) || &#x27;&#x27;</span><br><span class="line">        const badLen = (rawLen !== newLen)</span><br><span class="line">        if (badLen) &#123;</span><br><span class="line">            return makeRes(res.body, 400, &#123;</span><br><span class="line">                &#x27;--error&#x27;: `bad len: $&#123;newLen&#125;, except: $&#123;rawLen&#125;`,</span><br><span class="line">                &#x27;access-control-expose-headers&#x27;: &#x27;--error&#x27;,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const status = res.status</span><br><span class="line">    resHdrNew.set(&#x27;access-control-expose-headers&#x27;, &#x27;*&#x27;)</span><br><span class="line">    resHdrNew.set(&#x27;access-control-allow-origin&#x27;, &#x27;*&#x27;)</span><br><span class="line">    resHdrNew.set(&#x27;Cache-Control&#x27;, &#x27;max-age=1500&#x27;)</span><br><span class="line">    resHdrNew.delete(&#x27;content-security-policy&#x27;)</span><br><span class="line">    resHdrNew.delete(&#x27;content-security-policy-report-only&#x27;)</span><br><span class="line">    resHdrNew.delete(&#x27;clear-site-data&#x27;)</span><br><span class="line">    return new Response(res.body, &#123;</span><br><span class="line">        status,</span><br><span class="line">        headers: resHdrNew</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将代码中的const workers_url = ‘<a href="https://yourdomain.com">https://yourdomain.com</a>’ 换成你的自定义域名</p>
</blockquote>
<h3 id="添加自定义域名"><a class="header-anchor" href="#添加自定义域名">¶</a>添加自定义域名</h3>
<p>之后进入到worker项目页面点击设置-触发器，添加一个自定义域，这个自定义域可以是你解析到cloudflare的域名的一个二级域名，<a href="http://xn--docker-9v9ii49d.example.com">例如docker.example.com</a> 。然后将该域名添加一条路由。<br>
<img src="https://img.ycyc.win/img/20240708104819.png" alt="20240708104819"></p>
<h3 id="测试加速效果"><a class="header-anchor" href="#测试加速效果">¶</a>测试加速效果</h3>
<p>如果你需要拉取的镜像homeassistant/aarch64-homeassistant:latest<br>
现在需要在docker镜像前面加上你的自定义域，命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull docker.example.com/homeassistant/aarch64-homeassistant:latest</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Cloudflare</tag>
        <tag>worker</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cloudflare+jsdmirror加速github图床访问</title>
    <url>/posts/54996.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/202409111646715.png" alt="image.png"></p>
<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>之前写过一篇文章，如何设置github图床(<a href="https://miaoyang.win/posts/23057">https://miaoyang.win/posts/23057</a>) ，由于github在国内的访问时长抽风，导致浏览体验不太理想，所以当初使用了Jsdelivr的加速服务，也就是在Picgo自定义域名那里填写<a href="https://cdn.jsdelivr.net/gh/GitHub%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/GitHub用户名/仓库名</a> 使用Jsdelivr的cdn来加速图床的访问。<br>
但是最近Jsdelivr在国内的访问也是时断时续，经常出现打不开的情况。于是想着看看还有什么可用的国内加速服务。一路搜索找到了jsdmirror这个服务，详细介绍可查看项目Github页面（<a href="https://github.com/54ayao/JSDMirror%EF%BC%89">https://github.com/54ayao/JSDMirror）</a> ，太深奥的专业术语咱也看不懂，只知道这个服务可以代替Jsdelivr，加速国内的访问。<br>
然后拜读了Leehow的这篇文章<a href="https://www.haoyep.com/posts/github-graph-beds-cdn/">通过 Cloudflare 和 JsDelivr 免费加速博客 GitHub 图床等静态资源</a> ，于是决定放手一试，用cloudflare来加速图床的访问。</p>
<h2 id="实现的效果"><a class="header-anchor" href="#实现的效果">¶</a>实现的效果</h2>
<p>最终实现的效果：使用自己的二级域名<a href="https://cdn.miaoyang.win">https://cdn.miaoyang.win</a> 来替换jsdelivr的<a href="https://cdn.jsdelivr.net">https://cdn.jsdelivr.net</a> 来加速github图床，并且根据访问者的ip匹配规则，国内ip调用jsdmirror的服务，国外ip调用jsdelivr。</p>
<span id="more"></span>
<h2 id="操作前提"><a class="header-anchor" href="#操作前提">¶</a>操作前提</h2>
<p>1.github图床已经设置完成并且可以正常访问，具体设置教程请参与(<a href="https://miaoyang.win/posts/23057">https://miaoyang.win/posts/23057</a>);<br>
2.域名已经停靠到了cloudflare。<br>
3.有一个绑定了银行卡的paypal账户，无需付款。</p>
<h2 id="操作步骤"><a class="header-anchor" href="#操作步骤">¶</a>操作步骤</h2>
<h3 id="二级域名cdn-miaoyang-win使用cname解析到cdn-jsdmirror-com，并且勾选代理云朵图标。"><a class="header-anchor" href="#二级域名cdn-miaoyang-win使用cname解析到cdn-jsdmirror-com，并且勾选代理云朵图标。">¶</a><a href="http://xn--cdn-pi9dr5ww6fu92f.miaoyang.xn--wincnamecdn-yd2r83z161fjv0bhl4d.jsdmirror.com">二级域名cdn.miaoyang.win使用cname解析到cdn.jsdmirror.com</a>，并且勾选代理云朵图标。</h3>
<p><img src="https://img.ycyc.win/img/20240910140410.png" alt="20240910140410"></p>
<h3 id="设置重定向规则"><a class="header-anchor" href="#设置重定向规则">¶</a>设置重定向规则</h3>
<p>根据访问者ip来设置重定向规则。<br>
<img src="https://img.ycyc.win/img/20240910140544.png" alt="20240910140544"></p>
<p>国内ip规则设置如下图所示：<br>
<img src="https://img.ycyc.win/img/20240910140922.png" alt="20240910140922"><br>
表达式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">concat(&quot;https://cdn.jsdmirror.com&quot;, http.request.uri.path)</span><br></pre></td></tr></table></figure>
<p>国外ip规则设置如下图所示：<br>
<img src="https://img.ycyc.win/img/20240910140834.png" alt="20240910140834"><br>
表达式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">concat(&quot;https://cdn.jsdelivr.net&quot;, http.request.uri.path)</span><br></pre></td></tr></table></figure>
<h3 id="订阅saas申请SSL证书"><a class="header-anchor" href="#订阅saas申请SSL证书">¶</a>订阅saas申请SSL证书</h3>
<p>进入如下图所示的“自定义主机名”页面，申请saas服务，申请过程需要外币卡或是绑定了银行卡的paypal账号，但并不会实际发生扣款。<br>
<img src="https://img.ycyc.win/img/20240910141119.png" alt="20240910141119"><br>
开通saas服务之后添加二级域名并进行认证，之后等待域名状态和证书状态为“有效”即可。</p>
<h2 id="测试效果"><a class="header-anchor" href="#测试效果">¶</a>测试效果</h2>
<p>在picgo插件中将原有的delivr网址替换为自己设置的cdn.miaoyang.win即可测试服务是否正常。<br>
将图片链接复制到浏览器中，切换国内外ip观察其是否会跳转到指定的加速站点。</p>
<h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2>
<p>在部署过程中遇到了图片无法正常显示以及https无法访问异常的情况，试着在jsdmirror的github主页试着提交了issus，得到了作者54ayao的指点，才得以最终部署完成，特此感谢。</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://www.haoyep.com/posts/github-graph-beds-cdn/">通过 Cloudflare 和 JsDelivr 免费加速博客 GitHub 图床等静态资源</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>图床</tag>
        <tag>github</tag>
        <tag>Cloudflare</tag>
        <tag>jsdmirror</tag>
        <tag>jsdelivr</tag>
        <tag>加速</tag>
      </tags>
  </entry>
  <entry>
    <title>使用cloudflare重定向规则无缝切换域名</title>
    <url>/posts/16703.html</url>
    <content><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2>
<p>昨天注册了一个ycyc.win的域名，想着把之前的miaoyang.win换掉。虽然主域名已经解析到了站点，也可以正常访问了，但旧域名还在正常工作，并且搜索引擎收录的也是旧域名。那如何能使旧域名跳转到新域名，而且要保证搜索引擎收录的页面也能正常跳转呢？需要用到之前给图床加速的cloudflare的重定向规则功能。</p>
<h2 id="操作"><a class="header-anchor" href="#操作">¶</a>操作</h2>
<p>我们进入到旧域名的cloudflare页面，找到规则-重定向规则，然后新建一条。<br>
<img src="https://cdn.ycyc.win/gh/miaoyanginfo/hexo-img/img/202409150807412.png" alt="image.png"><br>
按照图中所示填入新旧域名，然后保存生效。这次状态代码那里要选择301。</p>
<h2 id="测试"><a class="header-anchor" href="#测试">¶</a>测试</h2>
<p>进入搜索引擎找一个被收录的旧域名页面打开，看其是否跳转到了新域名，而且页面是否正确。<br>
<a href="https://miaoyang.win/posts/2353">https://miaoyang.win/posts/2353</a></p>
<h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2>
<p>之前想要实现以上功能，大部分情况下都需要另外搭建一台nginx服务器，然后设置301跳转。现在只要在cloudflare简单设置一下，就可以省去搭建单独服务器的成本，并且可以利用其内置的多种类型条件，实现不同的功能。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>Cloudflare</tag>
        <tag>重定向</tag>
      </tags>
  </entry>
  <entry>
    <title>出国不求人，Cloudflare pages+BPB项目搭建免费个人节点</title>
    <url>/posts/39778.html</url>
    <content><![CDATA[<h2 id="前提"><a class="header-anchor" href="#前提">¶</a>前提</h2>
<p>注册Github/Cloudflare账户并处于正常状态。</p>
<h2 id="Github操作"><a class="header-anchor" href="#Github操作">¶</a>Github操作</h2>
<p>Fork BPB项目到你的Github仓库。<br>
BPB项目地址：<a href="https://github.com/bia-pain-bache/BPB-Worker-Panel">bia-pain-bache/BPB-Worker-Panel: A GUI Panel providing Worker subscriptions and Fragment settings and Warp configs, providing configs for cross-platform clients using (singbox-core and xray-core) (github.com)</a><br>
<img src="https://img.ycyc.win/img/202409120841448.png" alt="image.png"><br>
Fork之后就会得到以你的用户为为开头的BPB项目地址。我Fork后的项目地址为<a href="https://github.com/miaoyanginfo/BPB">miaoyanginfo/BPB: A GUI Panel providing Worker subscriptions and Fragment settings and Warp configs, providing configs for cross-platform clients using (singbox-core and xray-core) (github.com)</a></p>
<p>Github这边的操作就基本上完成了。接着我们需要去到Cloudflare操作。</p>
<span id="more"></span>
<h2 id="Cloudflare操作"><a class="header-anchor" href="#Cloudflare操作">¶</a>Cloudflare操作</h2>
<h3 id="创建KV空间"><a class="header-anchor" href="#创建KV空间">¶</a>创建KV空间</h3>
<p>登录Cloudflare后按照下图指示创建KV空间并命名。我这边命名为MYBPB。</p>
<p><img src="https://img.ycyc.win/img/202409120847516.png" alt="image.png"></p>
<h3 id="创建Pages并绑定KV"><a class="header-anchor" href="#创建Pages并绑定KV">¶</a>创建Pages并绑定KV</h3>
<p>按照下图指示创建Cloudflare Pages，<br>
<img src="https://img.ycyc.win/img/202409120850439.png" alt="image.png"></p>
<p>链接到你的Github账户。<img src="https://img.ycyc.win/img/202409120851682.png" alt="image.png"><br>
选择你之前Fork的BPB项目的源，然后点击右下角的“开始设置”，其他选项无需更改，保存部署即可。<br>
<img src="https://img.ycyc.win/img/202409120852710.png" alt="image.png"></p>
<p>部署完成之后回到Pages页面找到刚才创建的项目，按下图指示找到KV命名空间绑定，将之前创建的KV空间与Pages绑定。<br>
<img src="https://img.ycyc.win/img/202409120855179.png" alt=""></p>
<h3 id="设置环境变量"><a class="header-anchor" href="#设置环境变量">¶</a>设置环境变量</h3>
<p>按下图指示编辑环境变量。添加PROXYIP 以及UUID字段。<br>
<img src="https://img.ycyc.win/img/202409120858714.png" alt="image.png"></p>
<p>UUID可使用在线生成器随机生成，例如这个网站<a href="https://1024tools.com/uuid">UUID在线生成 - 1024Tools</a>。PROXY可以前往这个站点<a href="https://www.nslookup.io/domains/cdn.xn--b6gac.eu.org/dns-records/">DNS records for cdn.↗↘↗.eu.org (nslookup.io)</a>选择一个与你本地网络延迟较小的IP地址。<br>
全部填入之后进入部署选项卡，重新部署项目即可。<br>
<img src="https://img.ycyc.win/img/202409120905727.png" alt="image.png"></p>
<h2 id="登录面板进行设置"><a class="header-anchor" href="#登录面板进行设置">¶</a>登录面板进行设置</h2>
<p>重新部署完成之后我们可以使用cloudfalre pages随机生成的网址加/panel访问项目设置面板。<br>
设置访问密码之后即可登录。<br>
<img src="https://img.ycyc.win/img/202409120909404.png" alt="image.png"><br>
其他选项无需大动。点击拷贝订阅链接之后粘贴到v2rayN即可。<br>
<img src="https://img.ycyc.win/img/202409120911963.png" alt="image.png"></p>
<h2 id="v2rayN订阅"><a class="header-anchor" href="#v2rayN订阅">¶</a>v2rayN订阅</h2>
<p>将复制的订阅地址粘贴到v2rayN，然后更新订阅之后，会出现许多节点。<br>
<img src="https://img.ycyc.win/img/202409120912768.png" alt="image.png"></p>
<p>v2rayN下载<a href="https://github.com/2dust/v2rayN">2dust/v2rayN: A GUI client for Windows, support Xray core and v2fly core and others (github.com)</a></p>
<p>对节点进行速度测试，选择一个连接正常的节点应用。<br>
<img src="https://img.ycyc.win/img/202409120914367.png" alt="image.png"><br>
不出意外的话就可以打开谷歌油管了。</p>
<p><img src="https://img.ycyc.win/img/202409120914335.png" alt="image.png"></p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://uzbox.com/tech/bpb-vpn.html">免费VPN 永久免费节点订阅 BPB Panel+CloudFlare 实现WARP IP优选 - 优质盒子 (uzbox.com)</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Cloudflare</tag>
        <tag>bpb</tag>
      </tags>
  </entry>
  <entry>
    <title>出国不求人，Cloudflare pages+BPB项目搭建免费个人节点</title>
    <url>/posts/39778.html</url>
    <content><![CDATA[<h2 id="前提"><a class="header-anchor" href="#前提">¶</a>前提</h2>
<p>注册Github/Cloudflare账户并处于正常状态。</p>
<h2 id="Github操作"><a class="header-anchor" href="#Github操作">¶</a>Github操作</h2>
<p>Fork BPB项目到你的Github仓库。<br>
BPB项目地址：<a href="https://github.com/bia-pain-bache/BPB-Worker-Panel">bia-pain-bache/BPB-Worker-Panel: A GUI Panel providing Worker subscriptions and Fragment settings and Warp configs, providing configs for cross-platform clients using (singbox-core and xray-core) (github.com)</a><br>
<img src="https://img.ycyc.win/img/202409120841448.png" alt="image.png"><br>
Fork之后就会得到以你的用户为为开头的BPB项目地址。我Fork后的项目地址为<a href="https://github.com/miaoyanginfo/BPB">miaoyanginfo/BPB: A GUI Panel providing Worker subscriptions and Fragment settings and Warp configs, providing configs for cross-platform clients using (singbox-core and xray-core) (github.com)</a></p>
<p>Github这边的操作就基本上完成了。接着我们需要去到Cloudflare操作。</p>
<span id="more"></span>
<h2 id="Cloudflare操作"><a class="header-anchor" href="#Cloudflare操作">¶</a>Cloudflare操作</h2>
<h3 id="创建KV空间"><a class="header-anchor" href="#创建KV空间">¶</a>创建KV空间</h3>
<p>登录Cloudflare后按照下图指示创建KV空间并命名。我这边命名为MYBPB。</p>
<p><img src="https://img.ycyc.win/img/202409120847516.png" alt="image.png"></p>
<h3 id="创建Pages并绑定KV"><a class="header-anchor" href="#创建Pages并绑定KV">¶</a>创建Pages并绑定KV</h3>
<p>按照下图指示创建Cloudflare Pages，<br>
<img src="https://img.ycyc.win/img/202409120850439.png" alt="image.png"></p>
<p>链接到你的Github账户。<img src="https://img.ycyc.win/img/202409120851682.png" alt="image.png"><br>
选择你之前Fork的BPB项目的源，然后点击右下角的“开始设置”，其他选项无需更改，保存部署即可。<br>
<img src="https://img.ycyc.win/img/202409120852710.png" alt="image.png"></p>
<p>部署完成之后回到Pages页面找到刚才创建的项目，按下图指示找到KV命名空间绑定，将之前创建的KV空间与Pages绑定。<br>
<img src="https://img.ycyc.win/img/202409120855179.png" alt=""></p>
<h3 id="设置环境变量"><a class="header-anchor" href="#设置环境变量">¶</a>设置环境变量</h3>
<p>按下图指示编辑环境变量。添加PROXYIP 以及UUID字段。<br>
<img src="https://img.ycyc.win/img/202409120858714.png" alt="image.png"></p>
<p>UUID可使用在线生成器随机生成，例如这个网站<a href="https://1024tools.com/uuid">UUID在线生成 - 1024Tools</a>。PROXY可以前往这个站点<a href="https://www.nslookup.io/domains/cdn.xn--b6gac.eu.org/dns-records/">DNS records for cdn.↗↘↗.eu.org (nslookup.io)</a>选择一个与你本地网络延迟较小的IP地址。<br>
全部填入之后进入部署选项卡，重新部署项目即可。<br>
<img src="https://img.ycyc.win/img/202409120905727.png" alt="image.png"></p>
<h2 id="登录面板进行设置"><a class="header-anchor" href="#登录面板进行设置">¶</a>登录面板进行设置</h2>
<p>重新部署完成之后我们可以使用cloudfalre pages随机生成的网址加/panel访问项目设置面板。<br>
设置访问密码之后即可登录。<br>
<img src="https://img.ycyc.win/img/202409120909404.png" alt="image.png"><br>
其他选项无需大动。点击拷贝订阅链接之后粘贴到v2rayN即可。<br>
<img src="https://img.ycyc.win/img/202409120911963.png" alt="image.png"></p>
<h2 id="v2rayN订阅"><a class="header-anchor" href="#v2rayN订阅">¶</a>v2rayN订阅</h2>
<p>将复制的订阅地址粘贴到v2rayN，然后更新订阅之后，会出现许多节点。<br>
<img src="https://img.ycyc.win/img/202409120912768.png" alt="image.png"></p>
<p>v2rayN下载<a href="https://github.com/2dust/v2rayN">2dust/v2rayN: A GUI client for Windows, support Xray core and v2fly core and others (github.com)</a></p>
<p>对节点进行速度测试，选择一个连接正常的节点应用。<br>
<img src="https://img.ycyc.win/img/202409120914367.png" alt="image.png"><br>
不出意外的话就可以打开谷歌油管了。</p>
<p><img src="https://img.ycyc.win/img/202409120914335.png" alt="image.png"></p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://uzbox.com/tech/bpb-vpn.html">免费VPN 永久免费节点订阅 BPB Panel+CloudFlare 实现WARP IP优选 - 优质盒子 (uzbox.com)</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Cloudflare</tag>
        <tag>bpb</tag>
      </tags>
  </entry>
  <entry>
    <title>曲线救国，使用Alist挂载CloudflareR2存储桶</title>
    <url>/posts/36618.html</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>之前一直在用RaiDrive这款软件在windows端挂载WEBDAV网盘，RaiDrive除了支持WEBDAV协议之外，还支持其他主流的网盘服务，比如OneDrive，Google Drive等等，这些都是支持读写操作的。然后RaiDrive也支持比如亚马逊AWS S3和CloudflareR2等等对象存储的接入，但是RaiDrive的免费计划仅支持这些存储的读取，不支持写入，想要写入的话还需要至少每月4.84美元以上的付费计划。<br>
<img src="https://img.ycyc.win/img/202410091757081.png" alt="RaiDrive付费权益计划"></p>
<p>除了使用付费RaiDrive套餐之后，还可以选择我们之前提到的Alist来挂载CloudflareR2（当然也包括AWS S3，R2是兼容S3协议的）。</p>
<span id="more"></span>
<h2 id="操作"><a class="header-anchor" href="#操作">¶</a>操作</h2>
<p>添加之前我们需要先创建一个R2令牌。<br>
<img src="https://img.ycyc.win/img/202410091108554.png" alt="获取R2令牌"><br>
创建令牌的时候需要按需选择密钥权限。在使用过程中发现权限不足的话，也可以再次进入该页面进行编辑，赋予更高的权限。<br>
<img src="https://img.ycyc.win/img/202410091117924.png" alt="R2令牌权限类型"></p>
<p>获取到访问密钥ID，机密访问密钥以及终结点地址三个信息。<br>
<img src="https://img.ycyc.win/img/202410091110196.png" alt="R2密钥获取"></p>
<p>然后在Alist后台添加存储，类型选择“对象存储”，根据下图所示将获取到的R2相关密钥填入相应参数即可完成添加。</p>
<p><img src="https://img.ycyc.win/img/202410091106160.png" alt="Alist添加R2对象存储"><br>
添加完成之后就可以在Alist首页看到我们添加的R2存储文件夹了，并且支持读写操作。这样再通过WebDav协议利用RaiDrive挂载到windows本地就可以读写操作了。<br>
如果你需要添加更多类似的对象存储，可访问文章结尾的Alist官网文档。</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://alist.nn.ci/zh/guide/drivers/s3.html">对象存储 | AList文档</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>alist</tag>
        <tag>webdav</tag>
        <tag>Cloudflare</tag>
        <tag>R2</tag>
        <tag>S3</tag>
        <tag>RaiDrive</tag>
      </tags>
  </entry>
  <entry>
    <title>更新Cloudflare SSL TLS策略规则，部署免费CA</title>
    <url>/posts/21296.html</url>
    <content><![CDATA[<p>之前在部署站点的时候因为浏览器提示不安全，所以将停靠在Cloudflare的域名选择的SSL/TLS策略是【灵活】模式，Cloudflare给出的说明是“仅在访问者与 Cloudflare 之间启用加密。这可以避免浏览器发出安全警告，但 Cloudflare 与您的源服务器之间的所有连接均通过 HTTP 建立”，意思就是访问者到Cloudflare之间使用的是HTTPS，而Cloudflare到源服务器之间使用的是HTTP协议。这样设置之后虽然浏览器没有安全警告了，但是由于源服务器没有部署SSL证书，使用的是HTTP协议，从Clouflare到源服务器之间还是容易被黑客监听造成信息泄露隐患。<br>
所以今天我将Cloudflare的证书策略调整为了【完全（严格）】模式，此模式的意思是“启用端到端加密，对源服务器证书强制执行验证。使用 Cloudflare 的源服务器 CA 为您的源服务器生成证书”。而如果你要选择更为高级的【严格】模式，则需要升级账户为企业账户才能设置。</p>
<p><img src="https://img.ycyc.win/img/202411011346503.png" alt="image.png"></p>
<span id="more"></span>
<p>但是由于我的源服务器还没有部署证书，所以现在访问会提示证书错误，如下图所示。<br>
<img src="https://img.ycyc.win/img/202411011405412.png" alt="image.png">接下来就需要在你的源服务器部署证书了，当然你也可以使用Cloudflare免费的CA证书，有效期为15年。<br>
按下图进入源服务器界面，按照提示生成证书和密钥，然后上传到源服务器就可以了。</p>
<p><img src="https://img.ycyc.win/img/202411011401939.png" alt="image.png"><br>
证书部署完成后就可以正常使用https访问站点了，而且目前全链路都是https。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Cloudflare</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖安装cloudflare的ddns服务</title>
    <url>/posts/44166.html</url>
    <content><![CDATA[<p>w<br>
项目Github 主页 <a href="https://github.com/joshuaavalon/SynologyCloudflareDDNS">https://github.com/joshuaavalon/SynologyCloudflareDDNS</a><br>
前提是你的域名已经停靠到了cloudflare并可以正常在cloudflare做解析。</p>
<h2 id="开启并登录SSH服务"><a class="header-anchor" href="#开启并登录SSH服务">¶</a>开启并登录SSH服务</h2>
<p>进入路径：群晖后台-控制面板-终端机和SNMP。启动SSH功能。<br>
<img src="https://img.ycyc.win/img/20240219101051.png" alt="20240219101051"><br>
用putty等ssh终端登录群晖，然后输入sudo -i切换到管理员账户。</p>
<span id="more"></span>
<h2 id="下载运行脚本"><a class="header-anchor" href="#下载运行脚本">¶</a>下载运行脚本</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/joshuaavalon/SynologyCloudflareDDNS/master/cloudflareddns.sh -O /sbin/cloudflareddns.sh</span><br><span class="line">chmod +x /sbin/cloudflareddns.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc.defaults/ddns_provider.conf &lt;&lt; &#x27;EOF&#x27;</span><br><span class="line">[Cloudflare]</span><br><span class="line">        modulepath=/sbin/cloudflareddns.sh</span><br><span class="line">        queryurl=https://www.cloudflare.com</span><br><span class="line">        website=https://www.cloudflare.com</span><br><span class="line">E*.</span><br></pre></td></tr></table></figure>
<h2 id="生成cloudflare的api-token"><a class="header-anchor" href="#生成cloudflare的api-token">¶</a>生成cloudflare的api token</h2>
<p><img src="https://img.ycyc.win/img/20240219100721.png" alt="20240219100721"><br>
登录cloudflare域名主页，在上图所示区域复制zoneID，并生成API token。</p>
<h2 id="群晖添加服务"><a class="header-anchor" href="#群晖添加服务">¶</a>群晖添加服务</h2>
<p>进入路径：群晖后台-控制面板-外部访问-DDNS</p>
<p><img src="https://img.ycyc.win/img/20240219100241.png" alt="20240219100241"><br>
如上图所示，主机名称处填DDNS域名，用户名填cloudflare的zoneID，密码填api token。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>群晖</tag>
        <tag>Cloudflare</tag>
        <tag>DDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>GoogleCloud安装宝塔面板</title>
    <url>/posts/26602.html</url>
    <content><![CDATA[<p>宝塔面板可以运行在各类Linux系统中，方便我们搭建和管理网站。现在演示一下如何在GoogleCloud中安装宝塔面板。</p>
<p>首先我们进入Compute Engine中创建一个VM实例，为了尽可能的提升访问速度，我们将区域选择为香港。，启动磁盘选择Centos7。</p>
<p><img src="https://img.ycyc.win/img/202411021246485.jpg" alt="TIM截图20181102140908.jpg"></p>
<p>创建时在防火墙中勾选允许HTTP及HTTPS流量。</p>
<p><img src="https://img.ycyc.win/img/202411021246510.jpg" alt="TIM截图20181102140930.jpg"></p>
<p>接着我们进入VPC网络，在外部IP地址中我们将&quot;临时&quot;改为&quot;静态&quot;。</p>
<p><img src="https://img.ycyc.win/img/202411021247011.jpg" alt="TIM截图20181102141251.jpg"></p>
<p>在防火墙规则中，我们将出入站的所有端口及协议开放，并应用到所有实例。</p>
<p><img src="https://img.ycyc.win/img/202411021247258.jpg" alt="TIM截图20181102141349.jpg"></p>
<p>之后我们用SSH登陆到我们创建的VM实例，</p>
<p><img src="https://img.ycyc.win/img/202411021247362.jpg" alt="TIM截图20181102141447.jpg"></p>
<p>并运行以下命令进行安装：</p>
<pre><code>sudo su

yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh
</code></pre>
<p>根据提示选择安装功能，等安装结束会提示面板登陆地址、用户名及密码。</p>
<p>我们根据给出的安装信息就可以登陆到面板来创建和管理网站了。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>LINUX</tag>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>宝塔面板</tag>
      </tags>
  </entry>
  <entry>
    <title>使用namecheap免费的域名解析服务</title>
    <url>/posts/49189.html</url>
    <content><![CDATA[<p>最近我的一个域名被DNS污染了，之前一直在DnsPod做解析，发现被污染之后转到了万网自带的解析服务，问题依然没有解决。于是我开始寻找国外免费的域名解析服务商。</p>
<p>其实国外大型的域名注册商都提供免费的域名解析服务，允许在第三方注册的域名使用他们的解析服务，比如Godaddy和NameCheap。</p>
<p>因为我直接在Godaddy注册的域名被盗过，而且还没有找回，所以对Godaddy没有了好感。这次我选择使用NameCheap的免费域名解析服务。</p>
<p><img src="https://img.ycyc.win/img/202411021241766.jpg" alt="TIM截图20190103101540.jpg"></p>
<p>首先去NameCheap官网注册一个账户，然后选择FreeDNS服务，添加你的域名，添加之后系统会给你列出NameCheap的5个NS服务器地址，你需要前往你的域名注册商那里将域名的NS服务器地址设置为上面列出的地址。</p>
<p><img src="https://img.ycyc.win/img/202411021241984.jpg" alt="TIM截图20190103101752.jpg"></p>
<p>等待大约5-10分钟更改就会生效，生效之后就可以在NameCheap来进行域名解析了。</p>
<p>我的域名在换到Namecheap做解析之后，之前出现的DNS污染问题也得到了解决。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Network网络</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在一台路由器下接入多个路由器</title>
    <url>/posts/51237.html</url>
    <content><![CDATA[<p>今年五一假期的最后一天，黑群晖的WOL还没有搞定，给主板厂家打电话咨询主板开启WOL功能的地方，估计是五一放假，电话打不通，先放一边吧，等之后有了时间再研究。</p>
<p>之前把HA系统迁移到了群晖的docker中，运行还算稳定，不过HA系统需要24小时开机运行，黑群晖的功率足足有40多瓦，一整天工作下来先不说长时间通电对主板、硬盘等硬件的影响，光是电费也是一笔不小的开支，所以本着够用就好，节能为主的思想，又把树莓派用起来了。</p>
<p>买的H96 PRO+盒子还算不错，刷了原生的ANDROID TV之后感觉焕发了第二春，主要安装了KODI、PLEX、群晖的DS VIDEO以及几个国内常用的视频APP，运行都不错，还试了几个直播APP，感觉速度一般，估计是源的问题，切换到普通分辨率也会出现卡顿，所以基本放弃了在盒子上看电视直播的想法。</p>
<p>最后说介绍我家的网络结构，以及如何在一台路由器下接入多个子路由器，并保证所有设备在一个局域网内。</p>
<p>我家用的是联通的宽带，有两根光纤进户，一根是宽带和IPTV，另一根是固话，所以就有两台光猫。路由器有三台，一台联想的Y1s作为主路由器，配有千兆和百兆LAN口各两个。一台极路由极壹s和一台NEWIFI mini作为分路由，用来扩展WIFI信号及网口数量。三台路由器都刷了hiboy大神的padavan固件。Y1s负责宽带拨号、DHCP分配、SS等功能，其他两台路由器关闭了DHCP功能，并且把LAN口的IP设置成了和主路由在一个网段的地址，主路由的LAN直连分路由的LAN口，这样设置有几个好处，一是所有的设备都在一个局域网中，方便共享和互相访问，再一个就是配置分路由的时候无需切换IP地址，直接输入设置好的LAN口IP地址就可以进入分路由的管理界面。主路由的两个千兆LAN分别接了NAS以及H96盒子，应因为这两个设备的网口也是千兆的，用千兆网线连接之后可以达到千兆的速度，另外两个LAN口直连了两台分路由器。这样主路由的所有网口就都用完了，其他需要网线连接的设备，比如树莓派可以连到分路由剩下的LAN口上，这样就可以实现无缝的互相访问了。</p>
<p>以上设置适合有同样需求的朋友，如果你家从主路由到分路由没有走网线，也可以试一下无线桥接的方式，在分路由上进行设置，如下图</p>
<p><img src="https://img.ycyc.win/img/202411021157246.png" alt="TIM截图20180501120414.png"></p>
<p>然后搜索到主路由的SSID，输入密码就可以了，设置之前记得关闭DHCP以及设置好LAN的IP地址。</p>
<p><img src="https://img.ycyc.win/img/202411021157464.png" alt="TIM截图20180501120631.png"></p>
<p><img src="https://img.ycyc.win/img/202411021158638.png" alt="TIM截图20180501120705.png"></p>
<p>本来想画一张拓扑图来着，但没有找到合适的软件，就暂且搁置了。</p>
<p>最后感谢hiboy大神，编译了padavan估计以及能持续发布更新。</p>
<p>点击进入hiboy在恩山的帖子<a href="http://www.right.com.cn/forum/thread-161324-1-1.html">http://www.right.com.cn/forum/thread-161324-1-1.html</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>路由器</tag>
        <tag>网络</tag>
        <tag>Network网络</tag>
      </tags>
  </entry>
  <entry>
    <title>使用花生壳DDNS来远程管理Padavan路由器</title>
    <url>/posts/10805.html</url>
    <content><![CDATA[<p>Padavan固件内置了很多DDNS服务商，但唯独没有我们日常使用较多的Oray花生壳，下面我将教大家如何再Padavan系统中使用花生壳DDNS实现远程登陆我们的路由器管理页面。</p>
<p>登陆路由器，前往【高级设置】-【外部网络】-【动态域名解析】</p>
<p>在&quot;服务器&quot;一栏中选择&quot;custom&quot;，“DDNS服务器&quot;中输入&quot;<a href="http://ddns.oray.com">ddns.oray.com</a>”，然后填入你在花生壳注册的域名，以及你的花生壳账户及密码，最后保存页面设置。</p>
<p><img src="https://img.ycyc.win/img/202411021159530.jpg" alt="TIM截图20181229084749.jpg"></p>
<p>然后我们切换到&quot;端口转发&quot;选项卡，把路由器的80端口转发到任意一个其他端口，下面图片里我将路由器的80端口转发到了1234端口，大家可以将1234换为自己喜欢的端口。</p>
<p><img src="https://img.ycyc.win/img/202411021200042.jpg" alt="TIM截图20181229085041.jpg"></p>
<p>保存设置之后，我们在远程访问<a href="http://xn--eqrt2gwxah83fjgo:1234">http://花生壳域名:1234</a>  就可以访问到我们的路由器管理界面了。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>路由器</tag>
        <tag>padavan</tag>
        <tag>Network网络</tag>
        <tag>远程访问</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔面板如何部署DNSPod的免费SSL证书</title>
    <url>/posts/2448.html</url>
    <content><![CDATA[<p>DNSPod现在可以申请为期一年的免费SSL证书，只要使用DNSPod的解析服务就可以申请。</p>
<p>进入DNSPod管理后台，左侧菜单选在SSL证书-证书管理</p>
<p><img src="https://img.ycyc.win/img/202411021150662.jpg" alt="TIM截图20191024172300.jpg"></p>
<p>然后选择你要申请证书的域名，然后选择DNS验证，等验证通过之后手机会收到短信通知，接着我们将证书下载到本地。</p>
<p><img src="https://img.ycyc.win/img/202411021151071.jpg" alt="TIM截图20191024171954.jpg"></p>
<p>下载之后解压，会得到4个文件夹，如果你使用LNMP，则进入Nginx文件夹，如果是LAMP，则进入Apache文件夹，我这边以Nginx为例进行介绍。</p>
<p><img src="https://img.ycyc.win/img/202411021151485.jpg" alt="TIM截图20191024172034.jpg"></p>
<p>之后我们用记事本打开文件夹中的两个文件。</p>
<p><img src="https://img.ycyc.win/img/202411021151110.jpg" alt="TIM截图20191024172057.jpg"></p>
<p>接着我们进入宝塔面板的SSL设置界面，将那两个文件内容复制到相应的地方，注意最后不要加空格。</p>
<p><img src="https://img.ycyc.win/img/202411021152279.jpg" alt="TIM截图20191024171745.jpg"></p>
<p>保存提交之后，我们的SSL证书就部署完成了。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
        <tag>VPS</tag>
        <tag>dnspod</tag>
        <tag>SSL</tag>
        <tag>宝塔</tag>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>家庭网络布线注意事项</title>
    <url>/posts/47723.html</url>
    <content><![CDATA[<p>今天给准备装修的小伙伴分享一些在装修过程中可能遇到与网络或是智能相关问题的小贴士，供大家参考。</p>
<p>1.网线选择</p>
<p>最好选择正规厂家的CAT6六类网线，也就是网线中有十字骨架的那种网线。</p>
<p>目前家庭宽带接入普遍已经达到了100M，有的地区甚至达到了500M以上，而我们日常见到的网线一般都是五类线（CAT5）或是超五类线（CAT5E），五类线属于百兆线，理论传输速度只能达到100M。也就是说我们虽然在电信运营商那里办理的是300M的宽带，但由于家里的网线没有达到千兆标准，加上网线质量的因素，实际我们能享受到的网速只有70-80M左右。目前能达到千兆及以上传输速度的网线有超五类、六类及七类网线。虽然超五类线理论可以达到千兆网速，但是受到水晶头质量以及面板模块质量的影响，也不能完全保证能达到千兆。所以我建议大家在选择网线的时候尽量选择六类网线，如果预算有限，那也一定要选择正规厂家的超五类线。为什么不建议选择七类网线，是因为目前七类网线价格比较而言性价比不高，加之其配套的水晶头、网络模块需要用专业的工具来制作，对制作水准要求比较高，所以目前不推荐个人用户在布线的时候选择七类网线。</p>
<p>还有一点需要注意，六类网线分为屏蔽网线和非屏蔽网线，在家庭环境中我们只要选择非屏蔽网线就好了，没必要选择带屏蔽的网线。</p>
<p>2.设备的选择</p>
<p>虽然我们的网线支持了千兆，我们的路由器及交换机也要选择千兆接口的才可以，这里说的千兆接口是指设备的硬件WAN口及LAN口。</p>
<p>如果家里面的房间较多，平米数较大，需要做无线覆盖，我们要根据房间数量选择带POE供电的交换机来给各个房间的AP面板来供电。</p>
<p>3.布线中需要注意的问题</p>
<ol>
<li>每个房间都要尽量留有网线到弱电箱，以便以后做无线覆盖用，当然厕所除外。</li>
<li>书房要至少留两根网线到弱电箱，一根接AP面板，一根接台式电脑。</li>
<li>卧室电视墙也要留一根网线，以便以后接IPTV用。</li>
<li>客厅电视墙至少要留三根网线，一根接IPTV，一根接主路由器，另一根回弱电箱内的交换机。</li>
<li>弱电箱一定要留有220V电源。</li>
<li>有线电缆基本上淘汰了，装修中可以不考虑。</li>
</ol>
<p>4.后期加装智能需要注意的地方</p>
<p>智能家居是个趋势，为了以后改造方便，每个开关底盒内要留有零线，窗帘盒内要预留有220V电源，无线覆盖一定要做好。</p>
<p>目前暂时想到的就上面一些，以后会继续做补充。</p>
<p>最后总结一下，网线尽量选择六类线，家中的所有网线都回弱电箱，客厅电视墙至少留有三根网线，如果有可能改造弱电箱，尺寸尽可能做大，因为弱电箱里的东西会比较多，除了电信的光猫，还会有POE交换机，如果AP数量多了，还需要AC控制器，后期如果加装智能，还需要容纳智能主机。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>Daily我的日常</tag>
        <tag>布线</tag>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title>年付19.99美元的搬瓦工VPS上架了</title>
    <url>/posts/29037.html</url>
    <content><![CDATA[<p>今天去搬瓦工看到之前停售的年付19.99美元的VPS重新上架了，有需要的朋友可以前往购买。之前一直用VULTR的主机，不过最近几个月老是无故被墙，所以现在还是用上了之前在搬瓦工买的VPS，用了几个月感觉速度和稳定性方面都还不错，年付19.99美元还是比较合算的。下面是该主机的详细配置。</p>
<ul>
<li>10GB的SSD空间RAID-10</li>
<li>512MB的内存</li>
<li>1颗英特尔至强CPU</li>
<li>每月500GB的流量</li>
<li>千兆网速</li>
<li>OVZ和KMV可选</li>
<li>多地区可选</li>
<li>每年19.99美金，支持支付宝付款</li>
<li>支持30天退款<br>
购买链接<a href="https://bandwagonhost.com/aff.php?aff=31267">https://bandwagonhost.com/aff.php?aff=31267</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>VPS</tag>
        <tag>搬瓦工</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖开启NFS文件共享服务</title>
    <url>/posts/14057.html</url>
    <content><![CDATA[<p>NFS是一种文件传输方式，类似于SAMBA。</p>
<p>前往控制面板，文件服务，在NFS处启用NFS服务。<br>
<img src="https://img.ycyc.win/img/202411021156451.png" alt="TIM截图20180422221904.png"></p>
<p>接着进入共享文件夹选项，编辑你需要设置NFS共享的文件夹，切换到权限选项卡，确保已正确设置了读写权限</p>
<p><img src="https://img.ycyc.win/img/202411021156204.png" alt="TIM截图20180422222200.png"></p>
<p>然后切换到NFS权限选项卡，按照下图进行设置，然后保存即可。<br>
<img src="https://img.ycyc.win/img/202411021156477.png" alt="TIM截图20180422222343.png"></p>
<p>设置完成之后我们就可以在局域网内的设备上使用NFS来传输文件了，比如在KODI中，我们可以通过NFS浏览到NAS中共享的文件，经测试NFS比传统的SAMBA传输更快，占用更少的带宽。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Synology群晖</tag>
        <tag>synology群晖</tag>
        <tag>NFS</tag>
        <tag>共享</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖搭建wordpress外网测试</title>
    <url>/posts/7079.html</url>
    <content><![CDATA[<!-- wp:paragraph -->
<p>测试外网访问，文章发布，附件上传功能是否正常。</p>
<!-- /wp:paragraph -->
<!-- wp:image {"id":774,"sizeSlug":"large","linkDestination":"none"} -->
<figure class="wp-block-image size-large">![](cNcuPEE.png)</figure>
<!-- /wp:image -->]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云域名转入Godaddy实录</title>
    <url>/posts/56597.html</url>
    <content><![CDATA[<p>我在腾讯云注册有一个.com域名，还有两天到期，我决定把域名转移到Godaddy，Godaddy是全球最大的域名注册商，之前是纯英文界面，最近几年增加了中文界面，而且支持支付宝直接付款，虽然没有明确表示进军中国 域名注册市场，但不影响我们正常使用。</p>
<p>下面我来一步一步介绍如何将域名转移到Godaddy。</p>
<p>首先我们登录腾讯云，在域名管理页面找到我们要进行转移的域名。</p>
<p><img src="https://img.ycyc.win/img/202411021242215.png" alt="Snip20190305_7.png"></p>
<p>点管理按钮。然后在打开的页面最底部，找到『转出域名』。</p>
<p><img src="https://img.ycyc.win/img/202411021243893.png" alt="Snip20190305_8.png"></p>
<p>接着点击『获取转移码』，稍后转移码会发到你的邮箱中，请注意查收，收到转移码之后，腾讯这边的操作就告一段落了，我们接下来去Godaddy进行域名转入设置。</p>
<p>注册并登录Godaddy，语言切换到简体中文，在首页导航栏中选择『域名』，然后选择『域名转移』。</p>
<p><img src="https://img.ycyc.win/img/202411021243418.png" alt="Snip20190305_10.png"></p>
<p>输入你要转移的域名，然后点击『搜索』。</p>
<p><img src="https://img.ycyc.win/img/202411021243428.png" alt="Snip20190305_11.png"></p>
<p>然后在接下来的页面输入你获取到的域名转移码，点击『继续』，如果一切顺利的话系统会要求你付款，因为在转移域名的时候，新的域名注册商会收取一部分手续费以及域名下一年的注册费。因为我已经转移成功了，就不再上传付款页面的截图了，我是用支付宝付的款，最后折合成人民币大约58块钱左右。</p>
<p>付款完成之后需要等待3-7天，域名就会转移到Godaddy了，以后域名的解析管理和续费操作就可以在Godaddy来操作了。</p>
<p><img src="https://img.ycyc.win/img/202411021244944.png" alt="Snip20190305_12.png"></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>域名</tag>
        <tag>Network网络</tag>
        <tag>godaddy</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌云安装bbr加速及酸酸乳</title>
    <url>/posts/58542.html</url>
    <content><![CDATA[<p>BBR是谷歌推出的一套TCP加速算法，类似于之前的锐速，安装在VPS之后可以显著提升酸酸乳的速度，流畅观看1080P甚至是4K的油管视频。下面介绍如何在基于Debian8的系统中安装BBR算法，以及配置酸酸乳服务。</p>
<p>操作系统选择Debian8.</p>
<p>####获取root权限####</p>
<pre><code>sudo -i
</code></pre>
<p>####下载bbr安装脚本####</p>
<pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/YankeeBBR/master/bbr.sh &amp;&amp; bash bbr.sh install
</code></pre>
<p>选择NO。然后重启。重新连接。<br>
####再次获取root权限####</p>
<pre><code>sudo -i
</code></pre>
<p>####运行bbr安装脚本####</p>
<pre><code>bash bbr.sh start
</code></pre>
<p>####获取酸酸乳安装脚本####</p>
<pre><code>wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh &amp;&amp; chmod +x shadowsocksR.sh
</code></pre>
<p>####运行酸酸乳安装脚本####</p>
<pre><code>./shadowsocksR.sh
</code></pre>
<p>之后根据提示设置酸酸乳的连接密码、端口及加密方式等等。</p>
<p>将自己设置的信息记录下来，然后下载相应平台的酸酸乳客户端，填入自己的服务器地址、端口、密码、加密方式等信息，就可以愉快的玩耍了。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>GOOGLE</tag>
        <tag>VPS</tag>
        <tag>谷歌云</tag>
        <tag>加速</tag>
        <tag>BBR</tag>
        <tag>SSR</tag>
        <tag>酸酸乳</tag>
      </tags>
  </entry>
  <entry>
    <title>越过长城，走向世界-SS之家免费节点</title>
    <url>/posts/42324.html</url>
    <content><![CDATA[<p><img src="https://img.ycyc.win/img/202411021245063.jpg" alt="TIM截图20181119140137.jpg"></p>
<p>是的，全新的SS之家上线了，助力您畅游互联网，无痛点访问谷歌、YouTube、Facebook、Instagram，YouTube实测1080无压力。</p>
<p>支持Android、iOS手机，Windows、Mac电脑，LEDE、梅林、Padavan路由器。</p>
<p>免费套餐也同时上线，每月赠送1GB流量，每日签到另外可得最多50MB流量，可连接普通节点，不限终端数量。</p>
<p>其他包月、包年套餐可以移步网站查看。</p>
<p>即日起至11月30日为内测期，期间所有套餐均可享受5折优惠。</p>
<p><img src="https://img.ycyc.win/img/202411021245866.jpg" alt="TIM截图20181119140202.jpg"></p>
<p>具体套餐详情及购买方式请Q312780013。</p>
<p>SS之家网址 <a href="https://sshome.win">HTTPS://SSHOME.WIN</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Network网络</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌云的防火墙设置</title>
    <url>/posts/64128.html</url>
    <content><![CDATA[<p>大家在搭建了酸酸乳服务器之后，在客户端中填好信息之后会发现连接不上，其实是谷歌云的防火墙在作怪，谷歌云为了安全，默认只开启了80、433等常用的端口，而我们酸酸乳使用到的端口并没有被开启，所以我们需要手动配置一下。</p>
<p>首先进入谷歌云的控制台，在左边的菜单中依次选择VPC网络—防火墙规则，然后点击上面的&quot;创建防火墙规则&quot;按钮来创建一条，设置如下图所示</p>
<p><img src="https://img.ycyc.win/img/202411021153231.png" alt="TIM截图20180419143303.png"></p>
<p>需要注意的几个地方：</p>
<p>1.名称可以随意写；</p>
<p>2.来源IP地址范围必须写成 0.0.0.0/0</p>
<p>3.目标选择&quot;网络中的所有实例&quot;</p>
<p>4.协议和端口部分，可以设置成全部允许，这样的话所有的端口都会通过防火墙，以后安装其他服务就不用重复设置防火墙了，也可以设置成指定的协议和端口，比如你酸酸乳的端口是1234，可以写成 tcp:1234;udp1234 的格式。</p>
<p>设置完成之后点击&quot;创建&quot;按钮来保存，这样谷歌云的防火墙就设置好了。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>GOOGLE</tag>
        <tag>VPS</tag>
        <tag>谷歌云</tag>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>serv00安装PM2守护程序及应用保活测试</title>
    <url>/posts/7811.html</url>
    <content><![CDATA[<h2 id="楔子"><a class="header-anchor" href="#楔子">¶</a>楔子</h2>
<p>之前在serv00上部署了Alist服务，当时使用的是screen来后台运行alist进程。<br>
经过两天使用发现，前一天服务正常，到第二天早上的时候服务就被停止了，而且也找不到screen进程，就算是在管理面板添加了cron jobs也不起作用。除非再次手动执行启动命令，任务才会启动。<br>
网上搜到有人使用PM2来守护进程，今天我也试着安装了，具体效果怎么样，还需要一段时间来检验。</p>
<h2 id="一键安装脚本"><a class="header-anchor" href="#一键安装脚本">¶</a>一键安装脚本</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s https://raw.githubusercontent.com/k0baya/alist_repl/main/serv00/install-pm2.sh)</span><br></pre></td></tr></table></figure>
<h2 id="Alist任务运行脚本"><a class="header-anchor" href="#Alist任务运行脚本">¶</a>Alist任务运行脚本</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/ycycwin/domains/pan.ycyc.win/alist &amp;&amp; pm2 start ./alist -- server ~/domains/pan.ycyc.win/alist</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意替换脚本内相关用户名和域名。</p>
</blockquote>
<p>最后将上面的运行脚本添加到面板中的cron jobs中，等到明天看下效果如何。</p>
<p>当然你要是只用serv00来做简单的网页服务器，不搞这些奇怪应用的话，还是很稳定的。😅</p>
<h2 id="次日更新"><a class="header-anchor" href="#次日更新">¶</a>次日更新</h2>
<p>今天早上应用进程还是没启动，难道是serv00连自己的cron job也不执行？可惜无法看到重启后脚本是否执行了。<br>
换了一个启动方法试一下，将现有pm2进程保存，然后再恢复。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm2 save</span><br><span class="line">pm2 resurrect </span><br></pre></td></tr></table></figure>
<p>corn jobs 里面直接运行pm2 resurrect ，设置频率为每小时运行。明天再观察下效果如何。<br>
<img src="https://img.ycyc.win/img/202410130916654.png" alt="image.png"></p>
<h2 id="再次更新"><a class="header-anchor" href="#再次更新">¶</a>再次更新</h2>
<p>又失败了，给我的感觉好像是这个cron job根本没有执行。<br>
于是我写了一个脚本，准备使用青龙面板来定时登录ssh，然后执行 pm2 resurrect，每小时执行一次。目前看上去脚本执行是没问题的。具体效果再观察看下。</p>
<p><img src="https://img.ycyc.win/img/202410132012628.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>alist</tag>
        <tag>serv00</tag>
        <tag>PM2</tag>
      </tags>
  </entry>
  <entry>
    <title>0成本serv00搭建wordpress</title>
    <url>/posts/52893.html</url>
    <content><![CDATA[<h2 id="楔子"><a class="header-anchor" href="#楔子">¶</a>楔子</h2>
<p>serv00是一家提供免费虚拟主机空间的厂商，除了免费空间外，还提供免费的数据库和企业邮箱等服务。并且提供的虚拟空间基于freeBSD操作系统，3GB存储，512MB内存，支持SSH登录，支持PHP多版本切换，支持多种数据库类型。关键的关键是这一切都是免费的，只需要你每隔三个月至少登录一次主机SSH或是管理面板，否则账户将被注销。<br>
<img src="https://img.ycyc.win/img/202410100830523.png" alt="image.png"></p>
<h2 id="目标"><a class="header-anchor" href="#目标">¶</a>目标</h2>
<p>0成本使用serv00提供的虚拟空间服务搭建基于wordpress的站点，并且使用cloudflare加速站点国内访问速度，支持https。<br>
<img src="https://img.ycyc.win/img/202410091747007.png" alt="image.png"></p>
<span id="more"></span>
<h2 id="前提准备"><a class="header-anchor" href="#前提准备">¶</a>前提准备</h2>
<p>1.一个挂靠在Cloudflare的域名，下文以miaoyang.win演示，搭建站点的二级域名为wp.miaoyang.win。<br>
2.serv00账号（注册地址：<a href="https://www.serv00.com/offer/create_new_account">Serv00.com » Create an account</a>）提交注册信息时如出现报错，需更换代理IP或注册邮箱地址尝试。<br>
3.科学上网环境（以下全部操作默认在科学环境下操作）。</p>
<h2 id="开干"><a class="header-anchor" href="#开干">¶</a>开干</h2>
<h3 id="创建站点"><a class="header-anchor" href="#创建站点">¶</a>创建站点</h3>
<p>serv00注册成功后邮箱会收到一封邮件，里面包含serv00的用户名、密码、panel登录地址等信息。根据邮件提供的信息登录控制面板，按照下图所示新建一个站点，输入站点域名。然后点击Add。<br>
<img src="https://img.ycyc.win/img/202410091646803.png" alt="image.png"><br>
创建成功之后会在Website list选项卡看到新建的站点信息，在File manager中可以看到站点文件夹。<br>
<img src="https://img.ycyc.win/img/202410091650439.png" alt="image.png"></p>
<h3 id="上传wordpress文件"><a class="header-anchor" href="#上传wordpress文件">¶</a>上传wordpress文件</h3>
<p>前往WordPress网站下载压缩包到本地（<a href="https://cn.wordpress.org/download/">下载 – WordPress.org China 简体中文</a>）。<br>
<img src="https://img.ycyc.win/img/202410091653866.png" alt="image.png"></p>
<p>默认的站点文件夹为/domains/wp.miaoyang.win/public_html，我们需要先将文件夹内的index.html文件手动删除，然后wordpress的全部文件上传到此目录。<br>
上传可以通过网页端的File manager上传，也可以使用winSCP等支持FTP和SFTP的客户端上传。我这边实际测试了速度都不太理想，推荐使用SSH 命令直接从wordpress下载。<br>
使用SSH登录之后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /domains/wp.miaoyang.win/public_html</span><br><span class="line">wget https://cn.wordpress.org/latest-zh_CN.zip</span><br></pre></td></tr></table></figure>
<p>然后通过File manager将压缩包内的wordpress文件夹解压到public_html文件夹。<br>
<img src="https://img.ycyc.win/img/202410091700532.png" alt="image.png"><br>
最终的文件架构如下图所示。<br>
<img src="https://img.ycyc.win/img/202410091701514.png" alt="image.png"></p>
<h3 id="域名解析"><a class="header-anchor" href="#域名解析">¶</a>域名解析</h3>
<p>进入DNS zones，然后找到之前添加的域名点击Edit。进来之后找到域名的A记录目标IP记录下来。<br>
<img src="https://img.ycyc.win/img/202410091704349.png" alt="image.png"></p>
<p>前往Cloudflare的DNS界面，创建一个A记录将wp.miaoyang.win 解析到上面的IP地址，并开启代理云朵。<br>
<img src="https://img.ycyc.win/img/202410091711779.png" alt="image.png"><br>
这时候要是访问域名的话会提示证书错误，我们还需要去设置一下域名的证书。</p>
<h3 id="证书设置"><a class="header-anchor" href="#证书设置">¶</a>证书设置</h3>
<p>如下图所示进入Cloudflare的自定义主机名，添加wp.miaoyang.win。<br>
<img src="https://img.ycyc.win/img/202410091721749.png" alt="image.png"></p>
<p>然后根据提示新建txt记录验证域名所有权，直到证书状态和主机状态都为绿色有效。<br>
<img src="https://img.ycyc.win/img/202410091721240.png" alt="image.png"></p>
<p>现在就可以通过 <a href="https://wp.miaoyang.win">https://wp.miaoyang.win</a> 来访问站点了。</p>
<h3 id="创建MySQL数据库"><a class="header-anchor" href="#创建MySQL数据库">¶</a>创建MySQL数据库</h3>
<p>安装WordPress需要MySQL数据库。如下图所示新建一个数据库，记录下数据库名、数据库用户名、密码，以及数据库地址。<br>
<img src="https://img.ycyc.win/img/202410091726668.png" alt="image.png"></p>
<h3 id="安装WordPress"><a class="header-anchor" href="#安装WordPress">¶</a>安装WordPress</h3>
<p>访问<a href="https://my.miaoyang.win">https://my.miaoyang.win</a> 根据提示进行安装，期间需要输入数据库相关信息。需要注意的是在数据库主机那里，将默认的localhost删除，填入上一步记录下来的数据库地址。<br>
<img src="https://img.ycyc.win/img/202410091729872.png" alt="image.png"><br>
设置完站点基础信息以及用户名和密码之后就完成了WordPress的安装。</p>
<h2 id="站点访问"><a class="header-anchor" href="#站点访问">¶</a>站点访问</h2>
<p>现在我们就可以使用 <a href="https://wp.miaoyang.win">https://wp.miaoyang.win</a> 来访问wordpress了！<br>
<img src="https://img.ycyc.win/img/202410091743938.png" alt="image.png"></p>
<p>因为我们在Cloudflare设置了cdn代理加速，所以现在停掉科学代理，也可以访问到站点了，而且速度也不错。<br>
<img src="https://img.ycyc.win/img/202410091739340.png" alt="image.png"></p>
<p>那如果直接使用serv00默认的ip访问站点的话，可以看到国内是全部被墙的。<br>
<img src="https://img.ycyc.win/img/202410091739861.png" alt="image.png"></p>
<blockquote>
<p>类似的我们可以使用serv00的免费空间来搭建更多的基于PHP+MySQL的站点。</p>
<p>另外需要注意的是serv00需要至少每隔三个月登录一次SSH或是管理面板，否则账户会被删除！</p>
</blockquote>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://post.smzdm.com/p/aqq6o08p/">玩转serv00虚拟主机（一）：零成本搭建wordpress个人博客&amp;入门_服务器_什么值得买</a></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
        <tag>Cloudflare</tag>
        <tag>serv00</tag>
      </tags>
  </entry>
  <entry>
    <title>靠谱的serv00保活办法-利用青龙定时启动PM2</title>
    <url>/posts/1316.html</url>
    <content><![CDATA[<p>经过一个星期的测试，利用青龙面板定时执行pm2 resurrect 能持续保持任务运行。</p>
<h2 id="serv00上面的设置"><a class="header-anchor" href="#serv00上面的设置">¶</a>serv00上面的设置</h2>
<p>首先你需要在serv00上面安装PM2命令，具体方法可以参考我的上一篇文章（<a href="https://ycyc.win/posts/7811">serv00安装PM2守护程序及应用保活测试 | 渊澄</a>）<br>
然后将你所有需要后台保持的应用使用pm2命令启动。<br>
使用pm2 list查看所有任务是否已启动，确认无误之后使用pm2 save保存当前进度。</p>
<h2 id="青龙面板相关设置"><a class="header-anchor" href="#青龙面板相关设置">¶</a>青龙面板相关设置</h2>
<p>请确保青龙面板已搭建成功并正常运行。<br>
首先需要安装Linux sshpass依赖。<br>
<img src="https://img.ycyc.win/img/202410190934923.png" alt="image.png"></p>
<span id="more"></span>
<p>接着创建一个任务脚本，将下面命令复制并命名为 <a href="http://serv00.sh">serv00.sh</a> 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">HOST=<span class="string">&quot;你的服务器地址&quot;</span></span><br><span class="line"></span><br><span class="line">USERNAME=serv00用户名 </span><br><span class="line"></span><br><span class="line">PASSWORD=serv00密码</span><br><span class="line"></span><br><span class="line">sshpass -p <span class="variable">$&#123;PASSWORD&#125;</span> ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt <span class="variable">$&#123;USERNAME&#125;</span>@<span class="variable">$&#123;HOST&#125;</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">pm2 resurrect</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;finished&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>将脚本中的服务器地址、用户名和密码修改成你的信息。<br>
<img src="https://img.ycyc.win/img/202410190936937.png" alt="image.png"></p>
</blockquote>
<p>最后创建一个定时任务就可以了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task serv00/serv00.sh</span><br></pre></td></tr></table></figure>
<p>定时规则可以根据自己情况做修改，下图所示为一个小时执行一次。详细的crontab规则可参考（<a href="https://ycyc.win/posts/18367">crontab 定时任务规则收藏 | 渊澄</a>）<br>
<img src="https://img.ycyc.win/img/202410190939313.png" alt="image.png"></p>
<h2 id="试运行"><a class="header-anchor" href="#试运行">¶</a>试运行</h2>
<p>点击运行脚本查看日志，如果出现下图所示日志，则说明任务正常运行了。否则根据日志排查错误。<br>
<img src="https://img.ycyc.win/img/202410190943316.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>青龙面板</tag>
        <tag>serv00</tag>
        <tag>PM2</tag>
        <tag>保活</tag>
      </tags>
  </entry>
  <entry>
    <title>serv00搭建Alist记录</title>
    <url>/posts/36597.html</url>
    <content><![CDATA[<h2 id="楔子"><a class="header-anchor" href="#楔子">¶</a>楔子</h2>
<p>昨天撸了一个免费的serv00虚拟空间，并且成功搭建了WordPress站点。在搜索serv00相关信息期间看到有大神写了用serv00搭建Alist的教程。自己的Alist之前是搭建在家里的openwrt上面的，于是决定将其迁移到serv00上面来，以下记录在serv00搭建Alist以及数据迁移的过程，供有需求的朋友参考。</p>
<h2 id="Alist数据备份导出"><a class="header-anchor" href="#Alist数据备份导出">¶</a>Alist数据备份导出</h2>
<p>如下图所示登录原Alist管理后台将数据备份并导出到本地。<br>
<img src="https://img.ycyc.win/img/202410101043611.png" alt="image.png"></p>
<span id="more"></span>
<h2 id="serv00开放端口"><a class="header-anchor" href="#serv00开放端口">¶</a>serv00开放端口</h2>
<p>登录到serv00管理后台，找到Port reservation，然后添加一个开放端口，由于常用一些端口都被占用了，所以我们直接点击Random随机生成一个端口。<br>
<img src="https://img.ycyc.win/img/202410101045490.png" alt="image.png"></p>
<p>生成之后在Port list就能看到该端口了，记录下改端口号。<br>
<img src="https://img.ycyc.win/img/202410101048542.png" alt="image.png"></p>
<h2 id="serv00创建站点"><a class="header-anchor" href="#serv00创建站点">¶</a>serv00创建站点</h2>
<p>如下图所示，输入站点域名，这里以yun.ycyc.win为例，类型选择proxy，端口选择刚才开放的端口号。这样，我们就可以直接使用域名而无需加端口号来访问站点了。<br>
<img src="https://img.ycyc.win/img/202410101147128.png" alt="image.png"></p>
<h2 id="serv00开放应用运行"><a class="header-anchor" href="#serv00开放应用运行">¶</a>serv00开放应用运行</h2>
<p>如下图所示进入Additional services，打开运用运行。<br>
<img src="https://img.ycyc.win/img/202410101101928.png" alt="image.png"></p>
<h2 id="解析域名并设置证书"><a class="header-anchor" href="#解析域名并设置证书">¶</a>解析域名并设置证书</h2>
<p>此步骤请参阅我的上一篇文章相关章节，这里不再赘述。<br>
<a href="https://ycyc.win/posts/52893#%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90">0成本serv00搭建wordpress | 渊澄</a></p>
<h2 id="serv00创建MySQL数据库"><a class="header-anchor" href="#serv00创建MySQL数据库">¶</a>serv00创建MySQL数据库</h2>
<p>此步骤同样请参阅上篇文章相关章节。<br>
<a href="https://ycyc.win/posts/52893#%E5%88%9B%E5%BB%BAMySQL%E6%95%B0%E6%8D%AE%E5%BA%93">0成本serv00搭建wordpress | 渊澄</a></p>
<h2 id="安装应用"><a class="header-anchor" href="#安装应用">¶</a>安装应用</h2>
<p>进入File manager模块，进入到站点文件夹，新建一个名为alist的文件夹，并将alist文件上传到新建的alist文件夹内。</p>
<p>文件下载地址：<a href="https://yun.ycyc.win/serv00%E6%90%AD%E5%BB%BAalist">渊澄网盘</a><br>
然后登录SSH执行以下命令进行安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/home/ycycwin/domains/yun.ycyc.win/alist</span><br><span class="line">chmod +x alist</span><br><span class="line">alist./alist server</span><br></pre></td></tr></table></figure>
<p>命令运行完成后出现下图所示的提示说明安装完成。<br>
<img src="https://img.ycyc.win/img/202410101107730.png" alt="image.png"></p>
<h2 id="修改配置文件"><a class="header-anchor" href="#修改配置文件">¶</a>修改配置文件</h2>
<p>进入到站点目录，找到data/config.json 将数据库字段替换为创建的MySQL数据库相关信息，并将端口替换为之前放开的端口号。<br>
<img src="https://img.ycyc.win/img/202410101128407.png" alt="image.png"></p>
<h2 id="运行程序"><a class="header-anchor" href="#运行程序">¶</a>运行程序</h2>
<p>运行下面的命令启动alist程序，首次运行会生成默认密码，需要及时记录下来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./alist server</span><br></pre></td></tr></table></figure>
<p><img src="https://img.ycyc.win/img/202410101150430.png" alt="image.png"></p>
<h2 id="登录管理"><a class="header-anchor" href="#登录管理">¶</a>登录管理</h2>
<p>如果一切顺利的话，现在就可以在浏览器中访问 <a href="https://ycyc.win">https://ycyc.win</a> 了。使用默认的用户名admin以及上一步生成的默认密码就可以登录Alist后台进行操作了。<br>
<img src="https://img.ycyc.win/img/202410101153302.png" alt="image.png"></p>
<h2 id="导入Alist备份"><a class="header-anchor" href="#导入Alist备份">¶</a>导入Alist备份</h2>
<p>进入Alist后台之后将第一步导出的备份文件导入系统，等待全部还原完成即可。</p>
<h2 id="程序后台运行"><a class="header-anchor" href="#程序后台运行">¶</a>程序后台运行</h2>
<p>现在的Alist只能在当前SSH界面中运行，如果关闭SSH或退出当前命令，Alist就会结束运行。<br>
现在需要使用screen命令保存当前进程并增加开机自动运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -S alist /home/ycycwin/domains/yun.ycyc.win/alist/alist server</span><br></pre></td></tr></table></figure>
<p>执行后会新建一个<code>screen</code>会话运行<code>alist</code></p>
<p>可以在当前会话按下 <code>Ctrl + A</code>，然后按<code>D</code>，这会让你从当前 <code>screen</code> 会话中脱离，但 <code>alist</code> 程序仍会在后台运行。</p>
<p>如果你需要重新连接到这个 <code>screen</code> 会话，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -r alist</span><br></pre></td></tr></table></figure>
<h2 id="添加计划任务"><a class="header-anchor" href="#添加计划任务">¶</a>添加计划任务</h2>
<p>在网页管理面板进入<code>Cron jobs</code>菜单，点击<code>Add cron job</code>，新建一个脚本，然后在<code>Command</code>框中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/ycycwin/domains/yun.ycyc.win/alist &amp;&amp; screen ./alist server</span><br></pre></td></tr></table></figure>
<p>然后点击<code>Add</code>，这样，当服务器重启的时候就会执行操作自动启动<code>alist</code>应用了<br>
<img src="https://img.ycyc.win/img/202410101159201.png" alt="image.png"></p>
<h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2>
<p>搭建的过程虽然步骤比较多，但操作起来还是比较顺利的。有几个重点需要再次说明一下，第一个就是一定要开启站点应用程序执行权限，第二个是screen命令的运行，最后就是cron job的添加，以防服务器重启导致alist服务未启动。<br>
还有就是文内命令中的相关用户名及域名路径要换成你自己的。<br>
搭建过程中遇到问题可以在下方评论区与我讨论。</p>
<h2 id="引用"><a class="header-anchor" href="#引用">¶</a>引用</h2>
<p><a href="https://www.zzzwb.com/2024/07-06-serv00-alist.html">serv00部署alist详细记录 - Wenbin’s blog</a><br>
<a href="https://post.smzdm.com/p/a0x9rl3z/">玩转serv00虚拟主机（三）：零成本搭建alist个人网盘_网络存储_什么值得买</a></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>alist</tag>
        <tag>Cloudflare</tag>
        <tag>serv00</tag>
      </tags>
  </entry>
</search>
